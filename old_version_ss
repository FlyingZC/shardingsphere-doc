commit 02002c0d397b55e78a9c2c3f22f486c544de3841
Author: Xinze Guo <101622833+azexcy@users.noreply.github.com>
Date:   Fri Dec 2 16:17:01 2022 +0800

    Add refer link at migration document (#22586)
    
    * Add refer link at migration document
    
    * Add missing link
    
    * Fix version

diff --git a/docs/document/content/user-manual/shardingsphere-proxy/migration/usage.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/migration/usage.cn.md
index 8b38f1ad8fd..c6e14988ddd 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/migration/usage.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/migration/usage.cn.md
@@ -48,7 +48,7 @@ show variables like '%binlog%';
 执行以下命令，查看该用户是否有迁移权限：
 
 ```
-SHOW GRANTS FOR 'user';
+SHOW GRANTS FOR 'migration_user';
 ```
 
 示例结果：
@@ -69,9 +69,11 @@ SHOW GRANTS FOR 'user';
 示例：
 
 ```sql
-GRANT CREATE, DROP, SELECT, INSERT, UPDATE, DELETE, INDEX ON migration_ds_0.* TO `normal_user`@`%`;
+GRANT CREATE, DROP, SELECT, INSERT, UPDATE, DELETE, INDEX ON migration_ds_0.* TO `migration_user`@`%`;
 ```
 
+详情请参见 [MySQL GRANT](https://dev.mysql.com/doc/refman/8.0/en/grant.html)
+
 ### 完整流程示例
 
 #### 前提条件
@@ -281,12 +283,12 @@ host replication repl_acct 0.0.0.0/0 md5
 
 4. 赋予数据库和表的访问权限
 
-如果使用非超级管理员账号进行迁移，要求该账号在迁移时用到的数据库上，具备 CREATE，和 CONNECT 的权限。
+如果使用非超级管理员账号进行迁移，要求该账号在迁移时用到的数据库上，具备 CREATE 和 CONNECT 的权限。
 
 示例：
 
 ```sql
-GRANT CREATE, CONNECT ON DATABASE migration_ds_0 TO normal_user;
+GRANT CREATE, CONNECT ON DATABASE migration_ds_0 TO migration_user;
 ```
 
 还需要账号对迁移的表和 schema 具备访问权限，以 test schema 下的 t_order 表为例。
@@ -294,12 +296,14 @@ GRANT CREATE, CONNECT ON DATABASE migration_ds_0 TO normal_user;
 ```sql
 \c migration_ds_0
 
-GRANT USAGE ON SCHEMA test TO GROUP normal_user;
-GRANT SELECT ON TABLE test.t_order TO normal_user;
+GRANT USAGE ON SCHEMA test TO GROUP migration_user;
+GRANT SELECT ON TABLE test.t_order TO migration_user;
 ```
 
 PostgreSQL 有 OWNER 的概念，如果是数据库，SCHEMA，表的 OWNER，则可以省略对应的授权步骤。
 
+详情请参见 [PostgreSQL GRANT](https://www.postgresql.org/docs/current/sql-grant.html)
+
 ### 完整流程示例
 
 #### 前提条件
@@ -486,14 +490,17 @@ max_connections = 600
 ```
 host replication repl_acct 0.0.0.0/0 md5
 ```
+
+详情请参见 [Configuring Client Access Authentication](https://opengauss.org/en/docs/2.0.1/docs/Developerguide/configuring-client-access-authentication.html) 和 [Example: Logic Replication Code](https://opengauss.org/en/docs/2.0.1/docs/Developerguide/example-logic-replication-code.html)。
+
 3. 赋予数据库和表的访问权限
 
-如果使用非超级管理员账号进行迁移，要求该账号在迁移时用到的数据库上，具备 CREATE，和 CONNECT 的权限。
+如果使用非超级管理员账号进行迁移，要求该账号在迁移时用到的数据库上，具备 CREATE 和 CONNECT 的权限。
 
 示例：
 
 ```sql
-GRANT CREATE, CONNECT ON DATABASE migration_ds_0 TO normal_user;
+GRANT CREATE, CONNECT ON DATABASE migration_ds_0 TO migration_user;
 ```
 
 还需要账号对迁移的表和 schema 具备访问权限，以 test schema 下的 t_order 表为例。
@@ -501,19 +508,19 @@ GRANT CREATE, CONNECT ON DATABASE migration_ds_0 TO normal_user;
 ```sql
 \c migration_ds_0
 
-GRANT USAGE ON SCHEMA test TO GROUP normal_user;
-GRANT SELECT ON TABLE test.t_order TO normal_user;
+GRANT USAGE ON SCHEMA test TO GROUP migration_user;
+GRANT SELECT ON TABLE test.t_order TO migration_user;
 ```
 
 openGauss 有 OWNER 的概念，如果是数据库，SCHEMA，表的 OWNER，则可以省略对应的授权步骤。
 
-openGauss 因为安全原因，不允许普通客户在 public 模式下操作。所以如果迁移的表在 public 模式下，需要额外授权。
+openGauss 不允许普通账户在 public schema 下操作。所以如果迁移的表在 public schema 下，需要额外授权。
 
 ```sql
-GRANT ALL PRIVILEGES TO normal_user;
+GRANT ALL PRIVILEGES TO migration_user;
 ```
 
-详情请参见 [Configuring Client Access Authentication](https://opengauss.org/en/docs/2.0.1/docs/Developerguide/configuring-client-access-authentication.html) 和 [Example: Logic Replication Code](https://opengauss.org/en/docs/2.0.1/docs/Developerguide/example-logic-replication-code.html)。
+详情请参见 [openGauss GRANT](https://docs.opengauss.org/zh/docs/2.0.1/docs/Developerguide/GRANT.html)
 
 ### 完整流程示例
 
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/migration/usage.en.md b/docs/document/content/user-manual/shardingsphere-proxy/migration/usage.en.md
index 315eebf6b62..31e1bbdd63d 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/migration/usage.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/migration/usage.en.md
@@ -45,7 +45,7 @@ If the following information is displayed, binlog is enabled.
 
 Run the following command and see whether the user has migration permission.
 ```
-SHOW GRANTS FOR 'user';
+SHOW GRANTS FOR 'migration_user';
 ```
 
 Result sample: 
@@ -63,9 +63,11 @@ Result sample:
 If you use a non-super admin account for migration, you need to make sure that the account has the permission to insert, select, update and delete on the physical library used for migration.
 
 ```sql
-GRANT CREATE, DROP, SELECT, INSERT, UPDATE, DELETE, INDEX ON migration_ds_0.* TO `normal_user`@`%`;
+GRANT CREATE, DROP, SELECT, INSERT, UPDATE, DELETE, INDEX ON migration_ds_0.* TO `migration_user`@`%`;
 ```
 
+Please refer to [MySQL GRANT](https://dev.mysql.com/doc/refman/8.0/en/grant.html)
+
 ### Complete procedure example
 
 #### Prerequisite
@@ -276,7 +278,7 @@ Please refer to [The pg_hba.conf File](https://www.postgresql.org/docs/9.6/auth-
 If you are using a non-super admin account for migration, you need to GRANT CREATE and CONNECT privileges on the database used for migration.
 
 ```sql
-GRANT CREATE, CONNECT ON DATABASE migration_ds_0 TO normal_user;
+GRANT CREATE, CONNECT ON DATABASE migration_ds_0 TO migration_user;
 ```
 
 The account also need to have access to the migrated tables and schema, take the t_order table under test schema as an example. 
@@ -284,12 +286,14 @@ The account also need to have access to the migrated tables and schema, take the
 ```sql
 \c migration_ds_0
 
-GRANT USAGE ON SCHEMA test TO GROUP normal_user;
-GRANT SELECT ON TABLE test.t_order TO normal_user;
+GRANT USAGE ON SCHEMA test TO GROUP migration_user;
+GRANT SELECT ON TABLE test.t_order TO migration_user;
 ```
 
 PostgreSQL has the concept of OWNER, and if the account is the OWNER of a database, SCHEMA, or table, the relevant steps can be omitted.
 
+Please refer to [PostgreSQL GRANT](https://www.postgresql.org/docs/current/sql-grant.html)
+
 ### Complete procedure example
 
 #### Prerequisite
@@ -485,7 +489,7 @@ Please refer to [Configuring Client Access Authentication](https://opengauss.org
 If you are using a non-super admin account for migration, you need to GRANT CREATE and CONNECT privileges on the database used for migration.
 
 ```sql
-GRANT CREATE, CONNECT ON DATABASE migration_ds_0 TO normal_user;
+GRANT CREATE, CONNECT ON DATABASE migration_ds_0 TO migration_user;
 ```
 
 The account also need to have access to the migrated tables and schema, take the t_order table under test schema as an example. 
@@ -493,16 +497,18 @@ The account also need to have access to the migrated tables and schema, take the
 ```sql
 \c migration_ds_0
 
-GRANT USAGE ON SCHEMA test TO GROUP normal_user;
-GRANT SELECT ON TABLE test.t_order TO normal_user;
+GRANT USAGE ON SCHEMA test TO GROUP migration_user;
+GRANT SELECT ON TABLE test.t_order TO migration_user;
 ```
 
 openGauss has the concept of OWNER, and if the account is the OWNER of a database, SCHEMA, or table, the relevant steps can be omitted.
 
-openGauss does not allow normal accounts to operate in public mode for security reasons. So if the migrated table is in public mode, you need to authorize additional.
+openGauss does not allow normal accounts to operate in public schema, so if the migrated table is in public schema, you need to authorize additional.
+
+Please refer to [openGauss GRANT](https://docs.opengauss.org/en/docs/2.0.1/docs/Developerguide/grant.html)
 
 ```sql
-GRANT ALL PRIVILEGES TO normal_user;
+GRANT ALL PRIVILEGES TO migration_user;
 ```
 
 ### Complete procedure example

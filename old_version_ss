commit 0e9ef72380ee90b18e60b66bce25fdb8fd3278e7
Author: jiangML <1060319118@qq.com>
Date:   Fri Feb 3 11:19:33 2023 +0800

    update doc of agent (#23950)

diff --git a/docs/document/content/dev-manual/agent.cn.md b/docs/document/content/dev-manual/agent.cn.md
index 7d4cd247e67..012e6bdc515 100644
--- a/docs/document/content/dev-manual/agent.cn.md
+++ b/docs/document/content/dev-manual/agent.cn.md
@@ -19,9 +19,7 @@ chapter = true
 
 | *配置标识*      | *详细说明*                     | *全限定类名* |
 | ------------- | ----------------------------- | ---------- |
-| Prometheus    | Prometheus 插件生命周期管理类    | [`org.apache.shardingsphere.agent.plugin.metrics.prometheus.PrometheusPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/metrics/type/prometheus/src/main/java/org/apache/shardingsphere/agent/plugin/metrics/prometheus/PrometheusPluginLifecycleService.java) |
 | File          | File 插件生命周期管理类          | [`org.apache.shardingsphere.agent.plugin.logging.file.FileLoggingPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/logging/type/file/src/main/java/org/apache/shardingsphere/agent/plugin/logging/file/FileLoggingPluginLifecycleService.java) |
-| Jaeger        | Jaeger 插件生命周期管理类        | [`org.apache.shardingsphere.agent.plugin.tracing.jaeger.JaegerTracingPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/tracing/type/jaeger/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/JaegerTracingPluginLifecycleService.java) |
+| Prometheus    | Prometheus 插件生命周期管理类    | [`org.apache.shardingsphere.agent.plugin.metrics.prometheus.PrometheusPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/metrics/type/prometheus/src/main/java/org/apache/shardingsphere/agent/plugin/metrics/prometheus/PrometheusPluginLifecycleService.java) |
 | OpenTelemetry | OpenTelemetry 插件生命周期管理类 | [`org.apache.shardingsphere.agent.plugin.tracing.opentelemetry.OpenTelemetryTracingPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/tracing/type/opentelemetry/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentelemetry/OpenTelemetryTracingPluginLifecycleService.java) |
 | OpenTracing   | OpenTracing 插件生命周期管理类   | [`org.apache.shardingsphere.agent.plugin.tracing.opentracing.OpenTracingPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/tracing/type/opentracing/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/OpenTracingPluginLifecycleService.java) |
-| Zipkin        | Zipkin 插件生命周期管理类        | [`org.apache.shardingsphere.agent.plugin.tracing.zipkin.ZipkinTracingPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/tracing/type/zipkin/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/zipkin/ZipkinTracingPluginLifecycleService.java) |
diff --git a/docs/document/content/dev-manual/agent.en.md b/docs/document/content/dev-manual/agent.en.md
index 379efed8fe5..d72088839a5 100644
--- a/docs/document/content/dev-manual/agent.en.md
+++ b/docs/document/content/dev-manual/agent.en.md
@@ -19,9 +19,7 @@ Plug lifecycle management interface
 
 | *Configuration Type* | *Description*                                        | *Fully-qualified class name* |
 | -------------------- | ---------------------------------------------------- | ---------------------------- |
-| Prometheus           | Prometheus plug lifecycle management class           | [`org.apache.shardingsphere.agent.plugin.metrics.prometheus.PrometheusPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/metrics/type/prometheus/src/main/java/org/apache/shardingsphere/agent/plugin/metrics/prometheus/PrometheusPluginLifecycleService.java) |
 | File                 | Logging plug lifecycle management class              | [`org.apache.shardingsphere.agent.plugin.logging.file.FileLoggingPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/logging/type/file/src/main/java/org/apache/shardingsphere/agent/plugin/logging/file/FileLoggingPluginLifecycleService.java) |
-| Jaeger               | Jaeger plug lifecycle management class               | [`org.apache.shardingsphere.agent.plugin.tracing.jaeger.JaegerTracingPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/tracing/type/jaeger/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/jaeger/JaegerTracingPluginLifecycleService.java) |
+| Prometheus           | Prometheus plug lifecycle management class           | [`org.apache.shardingsphere.agent.plugin.metrics.prometheus.PrometheusPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/metrics/type/prometheus/src/main/java/org/apache/shardingsphere/agent/plugin/metrics/prometheus/PrometheusPluginLifecycleService.java) |
 | OpenTelemetry        | OpenTelemetryTracing plug lifecycle management class | [`org.apache.shardingsphere.agent.plugin.tracing.opentelemetry.OpenTelemetryTracingPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/tracing/type/opentelemetry/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentelemetry/OpenTelemetryTracingPluginLifecycleService.java) |
 | OpenTracing          | OpenTracing plug lifecycle management class          | [`org.apache.shardingsphere.agent.plugin.tracing.opentracing.OpenTracingPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/tracing/type/opentracing/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentracing/OpenTracingPluginLifecycleService.java) |
-| Zipkin               | Zipkin plug lifecycle management class               | [`org.apache.shardingsphere.agent.plugin.tracing.zipkin.ZipkinTracingPluginLifecycleService`](https://github.com/apache/shardingsphere/blob/master/agent/plugins/tracing/type/zipkin/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/zipkin/ZipkinTracingPluginLifecycleService.java) |
diff --git a/docs/document/content/features/observability/_index.cn.md b/docs/document/content/features/observability/_index.cn.md
index a792dbdfa3a..3d04cce274a 100644
--- a/docs/document/content/features/observability/_index.cn.md
+++ b/docs/document/content/features/observability/_index.cn.md
@@ -12,13 +12,10 @@ APM（应用性能监控） 是通过对系统可观察性数据进行采集、
 
 Apache ShardingSphere 并不负责如何采集、存储以及展示应用性能监控的相关数据，而是为应用监控系统提供必要的指标数据。 换句话说，Apache ShardingSphere 仅负责产生具有价值的数据，并通过标准协议或插件化的方式递交给相关系统。
 
-Tracing 用于获取 SQL 解析与 SQL 执行的链路跟踪信息。Apache ShardingSphere 默认提供了对 SkyWalking，Zipkin，Jaeger 和 OpenTelemetry 的支持，也支持用户通过插件化的方式开发自定义的 Tracing 组件。
-
-- 使用 Zipkin 和 Jaeger
-通过在agent配置文件中开启对应的插件，并配置好 Zipkin 或者 Jaeger 服务器信息即可。
+Tracing 用于获取 SQL 解析与 SQL 执行的链路跟踪信息。Apache ShardingSphere 默认提供了对 OpenTelemetry，SkyWalking 的支持，也支持用户通过插件化的方式开发自定义的 Tracing 组件。
 
 - 使用 OpenTelemetry
-OpenTelemetry 在 2019 年由 OpenTracing 和 OpenCencus 合并而来。 使用这种方式，只需要在 agent 配置文件中，根据 OpenTelemetry SDK 自动配置说明 ，填写合适的配置即可。
+OpenTelemetry 在 2019 年由 OpenTracing 和 OpenCencus 合并而来。 使用这种方式，只需要在 agent 配置文件中，根据 [OpenTelemetry SDK 自动配置说明](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure) ，填写合适的配置即可。可以导出数据到 Jaeger，Zipkin。
 
 - 使用 SkyWalking
 需要在 agent 配置中配置启用对应插件，并且需要同时配置使用 SkyWalking 的 apm-toolkit 工具。
diff --git a/docs/document/content/features/observability/_index.en.md b/docs/document/content/features/observability/_index.en.md
index be7c2cc2259..5e77e52170f 100644
--- a/docs/document/content/features/observability/_index.en.md
+++ b/docs/document/content/features/observability/_index.en.md
@@ -10,13 +10,10 @@ In order to grasp the distributed system status, observe running state of the cl
 
 APM (application performance monitoring) is to monitor and diagnose the performance of the system by collecting, storing and analyzing the observable data of the system. Its main functions include performance index monitoring, call stack analysis, service topology, etc.
 
-Apache ShardingSphere is not responsible for gathering, storing and demonstrating APM data, but provides the necessary information for the APM. In other words, Apache ShardingSphere is only responsible for generating valuable data and submitting it to relevant systems through standard protocols or plug-ins. Tracing is to obtain the tracking information of SQL parsing and SQL execution. Apache ShardingSphere provides support for SkyWalking, Zipkin, Jaeger and OpenTelemetry by default. It also supports users to develop customized components through plug-in.
-
-- Use Zipkin or Jaeger
-Just provides correct Zipkin or Jaeger server information in the agent configuration file.
+Apache ShardingSphere is not responsible for gathering, storing and demonstrating APM data, but provides the necessary information for the APM. In other words, Apache ShardingSphere is only responsible for generating valuable data and submitting it to relevant systems through standard protocols or plug-ins. Tracing is to obtain the tracking information of SQL parsing and SQL execution. Apache ShardingSphere provides support for OpenTelemetry, SkyWalking by default. It also supports users to develop customized components through plug-in.
 
 - Use OpenTelemetry
-OpenTelemetry was merged by OpenTracing and OpenCencus in 2019. In this way, you only need to fill in the appropriate configuration in the agent configuration file according to OpenTelemetry SDK Autoconfigure Guide.
+OpenTelemetry was merged by OpenTracing and OpenCencus in 2019. In this way, you only need to fill in the appropriate configuration in the agent configuration file according to [OpenTelemetry SDK Autoconfigure Guide](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure). Data can be exported to Jaeger, Zipkin.
 
 - Use SkyWalking
 Enable the SkyWalking plug-in in configuration file and need to configure the SkyWalking apm-toolkit.
diff --git a/docs/document/content/features/observability/concept.cn.md b/docs/document/content/features/observability/concept.cn.md
index 01c56518e20..14de419374b 100644
--- a/docs/document/content/features/observability/concept.cn.md
+++ b/docs/document/content/features/observability/concept.cn.md
@@ -19,7 +19,7 @@ APM 是应用性能监控的缩写。
 
 ## Metrics
 
-系统统计指标，通过探针收集，并且写入到时序数据库，供第三方应用展示。
+系统统计指标，通过探针收集，供第三方应用展示。
 
 ## Logging
 
diff --git a/docs/document/content/features/observability/concept.en.md b/docs/document/content/features/observability/concept.en.md
index 98e6b3d6aab..1c793dd688a 100644
--- a/docs/document/content/features/observability/concept.en.md
+++ b/docs/document/content/features/observability/concept.en.md
@@ -21,7 +21,7 @@ Tracing data between distributed services or internal processes will be collecte
 
 ## Metrics
 
-System statistical indicators are collected through probes and written to the time series database for display by third-party applications.
+System statistical indicators are collected through probes for display by third-party applications.
 
 ## Logging
 
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/observability/_index.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/observability/_index.cn.md
index dc173aa6d01..b1b8d326655 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/observability/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/observability/_index.cn.md
@@ -3,7 +3,9 @@ title = "可观察性"
 weight = 5
 +++
 
-## 源码编译
+## Agent
+
+### 源码编译
 
 从 Github 下载 Apache ShardingSphere 源码，对源码进行编译，操作命令如下。
 
@@ -14,9 +16,7 @@ mvn clean install -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Drat.skip=tr
 ```
 agent 包输出目录为 distribution/agent/target/apache-shardingsphere-${latest.release.version}-shardingsphere-agent-bin.tar.gz
 
-## agent 配置
-
-* 目录说明
+### 目录说明
 
 创建 agent 目录，解压 agent 二进制包到 agent 目录。
 
@@ -25,29 +25,28 @@ mkdir agent
 tar -zxvf apache-shardingsphere-${latest.release.version}-shardingsphere-agent-bin.tar.gz -C agent
 cd agent
 tree 
-.
 ├── LICENSE
 ├── NOTICE
 ├── conf
 │   └── agent.yaml
-├── lib
-│   ├── shardingsphere-agent-metrics-core-${latest.release.version}.jar
-│   └── shardingsphere-agent-plugin-core-${latest.release.version}.jar
 ├── plugins
-│   ├── shardingsphere-agent-logging-file-${latest.release.version}.jar
-│   ├── shardingsphere-agent-metrics-prometheus-${latest.release.version}.jar
-│   ├── shardingsphere-agent-tracing-jaeger-${latest.release.version}.jar
-│   ├── shardingsphere-agent-tracing-opentelemetry-${latest.release.version}.jar
-│   ├── shardingsphere-agent-tracing-opentracing-${latest.release.version}.jar
-│   └── shardingsphere-agent-tracing-zipkin-${latest.release.version}.jar
+│   ├── lib
+│   │   ├── shardingsphere-agent-metrics-core-${latest.release.version}.jar
+│   │   └── shardingsphere-agent-plugin-core-${latest.release.version}.jar
+│   ├── logging
+│   │   └── shardingsphere-agent-logging-file-${latest.release.version}.jar
+│   ├── metrics
+│   │   └── shardingsphere-agent-metrics-prometheus-${latest.release.version}.jar
+│   └── tracing
+│       ├── shardingsphere-agent-tracing-opentelemetry-${latest.release.version}.jar
+│       └── shardingsphere-agent-tracing-opentracing-${latest.release.version}.jar
 └── shardingsphere-agent-${latest.release.version}.jar
 ```
+Agent 日志输出位置在 `agent/logs/stdout.log`。
 
-* 配置说明
+### 配置说明
 
-`conf/agent.yaml` 用于管理 agent 配置。
-内置插件包括 Jaeger、OpenTracing、Zipkin、OpenTelemetry、Log 及 Prometheus。
-默认不开启任何插件。
+`conf/agent.yaml` 用于管理 agent 配置。内置插件包括 File、Prometheus、OpenTelemetry、OpenTracing。
 
 ```yaml
 plugins:
@@ -62,49 +61,50 @@ plugins:
 #      props:
 #        jvm-information-collector-enabled: "true"
 #  tracing:
-#    Jaeger:
-#      host: "localhost"
-#      port: 6831
-#      props:
-#        service-name: "shardingsphere"
-#        jaeger-sampler-type: "const"
-#        jaeger-sampler-param: "1"
-#        jaeger-reporter-flush-interval: "1000"
-#        jaeger-reporter-max-queue-size: "100"
-#    Zipkin:
-#      host: "localhost"
-#      port: 9411
+#    OpenTelemetry:
 #      props:
-#        service-name: "shardingsphere"
-#        url-version: "/api/v2/spans"
-#        sampler-type: "const"
-#        sampler-param: "1"
+#        otel.service.name: "shardingsphere"
+#        otel.traces.exporter: "jaeger"
+#        otel.exporter.otlp.traces.endpoint: "http://localhost:14250"
+#        otel.traces.sampler: "always_on"
 #    OpenTracing:
 #      props:
 #        opentracing-tracer-class-name: "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingTracer"
-#    OpenTelemetry:
-#      props:
-#        otel-resource-attributes: "service.name=shardingsphere"
-#        otel-traces-exporter: "zipkin"
 ```
 
-* 参数说明；
-
-| 名称                                | 说明                        | 取值范围                                                                                                                    | 默认值                               |
-|:----------------------------------|:-----------------------------|:------------------------------------------------------------------------------------------------------------------------|:----------------------------------|
-| jvm-information-collector-enabled | 是否开启 JVM 采集器             | true、false                                                                                                              | true                              |
-| service-name                      | 链路跟踪的服务名称               | 自定义                                                                                                                     | shardingsphere                    |
-| jaeger-sampler-type               | Jaeger 采样率类型               | const、probabilistic、ratelimiting、remote                                                                                 | const                             |
-| jaeger-sampler-param              | Jaeger 采样率参数               | const：0、1，probabilistic：0.0 - 1.0，ratelimiting：> 0，自定义每秒采集数量，remote：需要自定义配置远程采样率管理服务地址，JAEGER_SAMPLER_MANAGER_HOST_PORT | 1（const 类型）|
-| jaeger-reporter-flush-interval    | Jaeger 上报数据刷新间隔(毫秒)    | 自定义                                                                                                                     | 1000                              |
-| jaeger-reporter-max-queue-size    | Jaeger 上报 span 时最大队列大小   | 自定义                                                                                                                     | 100                               |
-| url-version                       | Zipkin url 地址                 | 自定义                                                                                                                     | /api/v2/spans                     |
-| sampler-type                      | Zipkin 采样率类型                | const、counting、ratelimiting、boundary                                                                                    | const                             |
-| sampler-param                     | Zipkin 采样率参数                | const： 0、1，counting：0.01 - 1.0，ratelimiting：> 0，自定义每秒采集数量，boundary: 0.0001 - 1.0                               | 1（const 类型）                    |
-| otel-resource-attributes          | opentelemetry 资源属性          | 字符串键值对（,分割）                                                                                                         | service.name=shardingsphere-agent |
-| otel-traces-exporter              | Tracing expoter                | zipkin、jaeger                                                                                                            | zipkin                            |
-| otel-traces-sampler               | opentelemetry 采样率类型         | always_on、always_off、traceidratio                                                                                        | always_on                         |
-| otel-traces-sampler-arg           | opentelemetry 采样率参数         | traceidratio：0.0 - 1.0                                                                                                    | 1.0                               |
+### 插件说明
+
+#### File
+
+目前 File 插件只有构建元数据耗时日志输出，暂无其他日志输出。
+
+#### Prometheus
+
+用于暴露监控指标
+
+* 参数说明
+
+| 名称                               | 说明                 |
+|-----------------------------------|----------------------|
+| host                              | 主机                 |
+| port                              | 端口                 |
+| jvm-information-collector-enabled | 是否采集 JVM 指标信息  |
+
+#### OpenTelemetry
+
+OpenTelemetry 可以导出 tracing 数据到 Jaeger，Zipkin。
+
+* 参数说明
+
+| 名称                                 | 说明                |
+|------------------------------------|----------------------|
+| otel.service.name                  | 服务名称              |
+| otel.traces.exporter               | traces exporter      |
+| otel.exporter.otlp.traces.endpoint | traces endpoint      |
+| otel.traces.sampler                | traces sampler       |
+
+参数参考 [OpenTelemetry SDK Autoconfigure](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure)
+
 
 ## ShardingSphere-Proxy 中使用
 
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/observability/_index.en.md b/docs/document/content/user-manual/shardingsphere-proxy/observability/_index.en.md
index 192f26c65c8..48224b093be 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/observability/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/observability/_index.en.md
@@ -3,7 +3,9 @@ title = "Observability"
 weight = 5
 +++
 
-## Compile source code
+## Agent
+
+### Compile source code
 
 Download Apache ShardingSphere from GitHub,Then compile.
 
@@ -15,40 +17,38 @@ mvn clean install -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Drat.skip=tr
 
 Artifact is distribution/agent/target/apache-shardingsphere-${latest.release.version}-shardingsphere-agent-bin.tar.gz
 
-## Agent configuration
-
-* Directory structure
+### Directory structure
 
-  Create agent directory, and unzip agent distribution package to the directory.
+Create agent directory, and unzip agent distribution package to the directory.
 
 ```shell
 mkdir agent
 tar -zxvf apache-shardingsphere-${latest.release.version}-shardingsphere-agent-bin.tar.gz -C agent
 cd agent
 tree 
-.
 ├── LICENSE
 ├── NOTICE
 ├── conf
 │   └── agent.yaml
-├── lib
-│   ├── shardingsphere-agent-metrics-core-${latest.release.version}.jar
-│   └── shardingsphere-agent-plugin-core-${latest.release.version}.jar
 ├── plugins
-│   ├── shardingsphere-agent-logging-file-${latest.release.version}.jar
-│   ├── shardingsphere-agent-metrics-prometheus-${latest.release.version}.jar
-│   ├── shardingsphere-agent-tracing-jaeger-${latest.release.version}.jar
-│   ├── shardingsphere-agent-tracing-opentelemetry-${latest.release.version}.jar
-│   ├── shardingsphere-agent-tracing-opentracing-${latest.release.version}.jar
-│   └── shardingsphere-agent-tracing-zipkin-${latest.release.version}.jar
+│   ├── lib
+│   │   ├── shardingsphere-agent-metrics-core-${latest.release.version}.jar
+│   │   └── shardingsphere-agent-plugin-core-${latest.release.version}.jar
+│   ├── logging
+│   │   └── shardingsphere-agent-logging-file-${latest.release.version}.jar
+│   ├── metrics
+│   │   └── shardingsphere-agent-metrics-prometheus-${latest.release.version}.jar
+│   └── tracing
+│       ├── shardingsphere-agent-tracing-opentelemetry-${latest.release.version}.jar
+│       └── shardingsphere-agent-tracing-opentracing-${latest.release.version}.jar
 └── shardingsphere-agent-${latest.release.version}.jar
 ```
+Agent log output location is `agent/logs/stdout.log`.
 
-* Configuration file
+### Configuration
 
 `conf/agent.yaml` is used to manage agent configuration.
-Built-in plugins include Jaeger, OpenTracing, Zipkin, OpenTelemetry, Log and Prometheus.
-No plugin is enabled by default.
+Built-in plugins include File, Prometheus, OpenTelemetry, OpenTracing.
 
 ```yaml
 plugins:
@@ -63,49 +63,49 @@ plugins:
 #      props:
 #        jvm-information-collector-enabled: "true"
 #  tracing:
-#    Jaeger:
-#      host: "localhost"
-#      port: 6831
-#      props:
-#        service-name: "shardingsphere"
-#        jaeger-sampler-type: "const"
-#        jaeger-sampler-param: "1"
-#        jaeger-reporter-flush-interval: "1000"
-#        jaeger-reporter-max-queue-size: "100"
-#    Zipkin:
-#      host: "localhost"
-#      port: 9411
+#    OpenTelemetry:
 #      props:
-#        service-name: "shardingsphere"
-#        url-version: "/api/v2/spans"
-#        sampler-type: "const"
-#        sampler-param: "1"
+#        otel.service.name: "shardingsphere"
+#        otel.traces.exporter: "jaeger"
+#        otel.exporter.otlp.traces.endpoint: "http://localhost:14250"
+#        otel.traces.sampler: "always_on"
 #    OpenTracing:
 #      props:
 #        opentracing-tracer-class-name: "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingTracer"
-#    OpenTelemetry:
-#      props:
-#        otel-resource-attributes: "service.name=shardingsphere"
-#        otel-traces-exporter: "zipkin"
 ```
 
-* Parameter description:
-
-| Name                              | Description                                                           | Value range                                                                                                                                                                                  | Default value                     |
-|:----------------------------------|:----------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------|
-| jvm-information-collector-enabled | Start JVM collector                                                   | true, false                                                                                                                                                                                  | true                              |
-| service-name                      | Tracking service name                                                 | Custom                                                                                                                                                                                       | shardingsphere-agent              |
-| jaeger-sampler-type               | Jaeger sample rate type                                               | const, probabilistic, ratelimiting, remote                                                                                                                                                   | const                             |
-| jaeger-sampler-param              | Jaeger sample rate parameter                                          | const:0, 1, probabilistic:0.0 - 1.0, ratelimiting: > 0, Customize the number of acquisitions per second, remote：need to customize the remote service addres,JAEGER_SAMPLER_MANAGER_HOST_PORT| 1 (const type)                    |
-| jaeger-reporter-flush-interval    | Jaeger the flush interval when reporting spans remotely (millisecond) | Custom                                                                                                                                                                                       | 1000                              |
-| jaeger-reporter-max-queue-size    | Jaeger the maximum queue size for use when reporting spans remotely   | Custom                                                                                                                                                                                       | 100                               |
-| url-version                       | Zipkin url address                                                    | Custom                                                                                                                                                                                       | /api/v2/spans                     |
-| sampler-type                      | Zipkin sample rate type                                               | const, counting, ratelimiting, boundary                                                                                                                                                      | const                             |
-| sampler-param                     | Zipkin sampling rate parameter                                        | const:0, 1, counting:0.01 - 1.0, ratelimiting: > 0, boundary:0.0001 - 1.0                                                                                                                    | 1 (const type)                    |
-| otel-resource-attributes          | opentelemetry properties                                              | String key value pair (, split)                                                                                                                                                              | service.name=shardingsphere-agent |
-| otel-traces-exporter              | Tracing expoter                                                       | zipkin, jaeger                                                                                                                                                                               | zipkin                            |
-| otel-traces-sampler               | Opentelemetry sample rate type                                        | always_on, always_off, traceidratio                                                                                                                                                          | always_on                         |
-| otel-traces-sampler-arg           | Opentelemetry sample rate parameter                                   | traceidratio：0.0 - 1.0                                                                                                                                                                       | 1.0                               |
+### Plugin description
+
+#### File
+
+Currently, the File plugin only outputs the time-consuming log output of building metadata, and has no other log output for the time being.
+
+#### Prometheus
+
+Used for exposure monitoring metrics.
+
+* Parameter description
+
+| Name                              | Description                                  |
+|-----------------------------------|----------------------------------------------|
+| host                              | host IP                                      |
+| port                              | port                                         |
+| jvm-information-collector-enabled | whether to collect JVM indicator information |
+
+#### OpenTelemetry
+
+OpenTelemetry can export tracing data to Jaeger, Zipkin.
+
+* Parameter description
+
+| Name                               | Description     |
+|------------------------------------|-----------------|
+| otel.service.name                  | service name    |
+| otel.traces.exporter               | traces exporter |
+| otel.exporter.otlp.traces.endpoint | traces endpoint |
+| otel.traces.sampler                | traces sampler  |
+
+Parameter reference [OpenTelemetry SDK Autoconfigure](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure)
 
 ## Usage in ShardingSphere-Proxy
 

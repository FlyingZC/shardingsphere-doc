commit e5076747b49a6e0cd1c865b91131587115a96790
Author: ChenJiaHao <37339007+Pace2Car@users.noreply.github.com>
Date:   Mon Dec 5 14:22:01 2022 +0800

    Update Spring related document (#22582)
    
    * Remove Spring related document
    
    * Add Spring configure `ShardingSphereDriver` document
    
    * Format
    
    * Revise title

diff --git a/docs/document/content/faq/_index.cn.md b/docs/document/content/faq/_index.cn.md
index ee4c5cc330f..1b24dfca5a4 100644
--- a/docs/document/content/faq/_index.cn.md
+++ b/docs/document/content/faq/_index.cn.md
@@ -7,21 +7,6 @@ chapter = true
 
 ## JDBC
 
-### [JDBC] 为什么配置了某个数据连接池的 spring-boot-starter（比如 druid）和 shardingsphere-jdbc-spring-boot-starter 时，系统启动会报错？
-
-回答：
-
-1. 因为数据连接池的 starter（比如 druid）可能会先加载并且其创建一个默认数据源，这将会使得 ShardingSphere-JDBC 创建数据源时发生冲突。
-2. 解决办法为，去掉数据连接池的 starter 即可，ShardingSphere-JDBC 自己会创建数据连接池。
-
-### [JDBC] 使用 Spring 命名空间时找不到 xsd?
-
-回答：
-
-Spring 命名空间使用规范并未强制要求将 xsd 文件部署至公网地址，但考虑到部分用户的需求，我们也将相关 xsd 文件部署至 ShardingSphere 官网。
-实际上 shardingsphere-jdbc-spring-namespace 的 jar 包中 META-INF\spring.schemas 配置了 xsd 文件的位置：
-META-INF\namespace\sharding.xsd 和 META-INF\namespace\readwrite-splitting.xsd，只需确保 jar 包中该文件存在即可。
-
 ### [JDBC] 引入 `shardingsphere-transaction-xa-core` 后，如何避免 spring-boot 自动加载默认的 JtaTransactionManager？
 
 回答:
diff --git a/docs/document/content/faq/_index.en.md b/docs/document/content/faq/_index.en.md
index 5b1d42e55aa..f6f263eeb25 100644
--- a/docs/document/content/faq/_index.en.md
+++ b/docs/document/content/faq/_index.en.md
@@ -7,21 +7,6 @@ chapter = true
 
 ## JDBC
 
-### [JDBC] Why there may be an error when configure both shardingsphere-jdbc-spring-boot-starter and a spring-boot-starter of certain datasource pool (such as druid)?
-
-Answer:
-
-1. Because the spring-boot-starter of certain datasource pool (such as druid) will be configured before shardingsphere-jdbc-spring-boot-starter and create a default datasource, causing conflict to occur when ShardingSphere-JDBC create datasources.
-2. A simple way to solve this issue is removing the spring-boot-starter of certain datasource pool, allowing shardingsphere-jdbc to create datasources with suitable pools.
-
-### [JDBC] Why is xsd unable to be found when Spring Namespace is used?
-
-Answer:
-
-The norm of Spring Namespace does not require deploying xsd files to the official website. But considering some users' needs, we will deploy them to ShardingSphere's official website.
-Actually, META-INF\spring.schemas in the jar package of shardingsphere-jdbc-spring-namespace has been configured with the position of xsd files:
-META-INF\namespace\sharding.xsd and META-INF\namespace\readwrite-splitting.xsd, so you only need to make sure that the file is in the jar package.
-
 ### [JDBC] Found a JtaTransactionManager in spring boot project when integrating with XAtransaction.
 
 Answer:
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.cn.md
index 7fac15cadc8..3016d865615 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.cn.md
@@ -1,18 +1,12 @@
 +++
-title = "Spring Boot Starter"
+title = "Spring Boot"
 weight = 4
 chapter = true
 +++
 
 ## 简介
 
-ShardingSphere-JDBC 提供官方的 Spring Boot Starter，使开发者可以非常便捷的整合 ShardingSphere-JDBC 和 Spring Boot。
-
-兼容 SpringBoot 版本支持列表如下 : 
-
-1. SpringBoot 1.x
-2. SpringBoot 2.x 
-3. SpringBoot 3.x (实验中)
+ShardingSphere 提供 JDBC 驱动，开发者可以在 Spring Boot 中配置 `ShardingSphereDriver` 来使用 ShardingSphere。
 
 ## 使用步骤
 
@@ -21,36 +15,32 @@ ShardingSphere-JDBC 提供官方的 Spring Boot Starter，使开发者可以非
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
+    <artifactId>shardingsphere-jdbc-core</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
 
-### 配置 Spring Boot 属性
+### 配置 Spring Boot
 
-ShardingSphere-JDBC 的 Spring Boot 属性配置由 Database 名称、运行模式、数据源集合、规则集合以及属性配置组成。
+#### 驱动类名称
 
-```properties
-# JDBC 逻辑库名称。在集群模式中，使用该参数来联通 ShardingSphere-JDBC 与 ShardingSphere-Proxy。
-spring.shardingsphere.database.name= # 逻辑库名称，默认值：logic_db
-spring.shardingsphere.mode.xxx= # 运行模式
-spring.shardingsphere.dataSource.xxx= # 数据源集合
-spring.shardingsphere.rules.xxx= # 规则集合
-spring.shardingsphere.props= # 属性配置
-```
+`org.apache.shardingsphere.driver.ShardingSphereDriver`
 
-模式详情请参见[模式配置](/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/mode)。
+#### URL 配置说明
 
-数据源详情请参见[数据源配置](/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source)。
+- 以 `jdbc:shardingsphere:` 为前缀
+- 配置文件：`xxx.yaml`，配置文件格式与 [YAML 配置](/cn/user-manual/shardingsphere-jdbc/yaml-config/)一致
+- 配置文件加载规则：
+  - 无前缀表示从指定路径加载配置文件
+  - `classpath:` 前缀表示从类路径中加载配置文件
 
-规则详情请参见[规则配置](/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/rules)。
+```properties
+# 配置 DataSource Driver
+spring.datasource.driver-class-name=org.apache.shardingsphere.driver.ShardingSphereDriver
+# 指定 YAML 配置文件
+spring.datasource.url=jdbc:shardingsphere:classpath:xxx.yaml
+```
 
 ### 使用数据源
 
-直接通过注入的方式即可使用 ShardingSphereDataSource；
-或者将 ShardingSphereDataSource 配置在 JPA、Hibernate、MyBatis 等 ORM 框架中配合使用。
-
-```java
-@Resource
-private DataSource dataSource;
-```
+直接使用该数据源；或者将 ShardingSphereDataSource 配置在 JPA、Hibernate、MyBatis 等 ORM 框架中配合使用。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.en.md
index 6d66c31d8e7..76159916d2f 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.en.md
@@ -1,19 +1,12 @@
 +++
-title = "Spring Boot Starter"
+title = "Spring Boot"
 weight = 4
 chapter = true
 +++
 
 ## Overview
 
-ShardingSphere-JDBC provides official Spring Boot Starter to make convenient for developers to integrate ShardingSphere-JDBC and Spring Boot.
-
-The list of compatible SpringBoot versions is as follows:
-
-1. SpringBoot 1.x
-2. SpringBoot 2.x
-3. SpringBoot 3.x (Experimental)
-
+ShardingSphere provides a JDBC driver, and developers can configure `ShardingSphereDriver` in Spring Boot to use ShardingSphere.
 ## Usage
 
 ### Import Maven Dependency
@@ -21,37 +14,32 @@ The list of compatible SpringBoot versions is as follows:
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
+    <artifactId>shardingsphere-jdbc-core</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
 
 ### Configure Spring Boot Properties
 
-ShardingSphere-JDBC spring boot properties consists of database name, mode configuration, data source map, rule configurations and properties.
+#### Driver Class Name
 
-```properties
-# JDBC logic database name. Through this parameter to connect ShardingSphere-JDBC and ShardingSphere-Proxy.
-spring.shardingsphere.database.name= # logic database name, default value: logic_db
-spring.shardingsphere.mode.xxx= # mode configuration
-spring.shardingsphere.dataSource.xxx= # data source map
-spring.shardingsphere.rules.xxx= # rule configurations
-spring.shardingsphere.props= # properties
-```
+`org.apache.shardingsphere.driver.ShardingSphereDriver`
 
-Please refer to [Mode Confiugration](/en/user-manual/shardingsphere-jdbc/spring-boot-starter/mode) for more mode details.
+#### URL Configuration Instructions
 
-Please refer to [Data Source Confiugration](/en/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source) for more data source details.
+- Prefixed with `jdbc:shardingsphere:`
+- Configuration file: `xxx.yaml`, the configuration file format is consistent with [YAML Configuration](/en/user-manual/shardingsphere-jdbc/yaml-config)
+- Configuration file loading rules:
+  - No prefix means to load the configuration file from the specified path
+  - The `classpath:` prefix means to load configuration files from the classpath
 
-Please refer to [Rules Confiugration](/en/user-manual/shardingsphere-jdbc/spring-boot-starter/rules) for more rule details.
+```properties
+# Configuring DataSource Drivers
+spring.datasource.driver-class-name=org.apache.shardingsphere.driver.ShardingSphereDriver
+# Specify a YAML configuration file
+spring.datasource.url=jdbc:shardingsphere:classpath:xxx.yaml
+```
 
 ### Use Data Source
 
-Developer can inject to use native JDBC or ORM frameworks such as JPA, Hibernate or MyBatis through the DataSource.
-
-Take native JDBC usage as an example:
-
-```java
-@Resource
-private DataSource dataSource;
-```
+Use this data source directly; or configure ShardingSphereDataSource to be used in conjunction with ORM frameworks such as JPA, Hibernate, and MyBatis.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/algorithm.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/algorithm.cn.md
deleted file mode 100644
index 109171a16ba..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/algorithm.cn.md
+++ /dev/null
@@ -1,48 +0,0 @@
-+++
-title = "算法配置"
-weight = 4
-+++
-
-## 分片算法
-
-```properties
-# sharding-algorithm-name 由用户指定，需要和分片策略中的 sharding-algorithm-name 属性一致
-# type 和 props，请参考分片内置算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/sharding/
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type=xxx
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx=xxx
-```
-
-## 加密算法
-
-```properties
-# encrypt-algorithm-name 由用户指定，需要和加密规则中的 encryptor-name 属性一致
-# type 和 props，请参考加密内置算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/encrypt/
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.type=xxx
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xxx=xxx
-```
-
-## 读写分离负载均衡算法
-
-```properties
-# load-balance-algorithm-name 由用户指定，需要和读写分离规则中的 load-balancer-name 属性一致
-# type 和 props，请参考读写分离负载均衡内置算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/load-balance/
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.type=xxx
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx=xxx
-```
-
-## 影子算法
-
-```properties
-# shadow-algorithm-name 由用户指定，需要和影子库规则中的 shadow-algorithm-names 属性一致
-# type 和 props，请参考影子库内置算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/shadow/
-spring.shardingsphere.rules.shadow.shadow-algorithms.<shadow-algorithm-name>.type=xxx
-spring.shardingsphere.rules.shadow.shadow-algorithms.<shadow-algorithm-name>.props.xxx=xxx
-```
-
-## 高可用
-
-```properties
-# discovery-type-name 由用户指定，需要和数据库发现规则中的 discovery-type-name 属性一致
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.type=xxx
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.props.xxx=xxx
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/algorithm.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/algorithm.en.md
deleted file mode 100644
index 8b42fd0220e..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/algorithm.en.md
+++ /dev/null
@@ -1,48 +0,0 @@
-+++
-title = "Algorithm"
-weight = 4
-+++
-
-## Sharding
-
-```properties
-# sharding-algorithm-name is specified by users and its property should be consistent with that of sharding-algorithm-name in the sharding strategy.
-# type and props, please refer to the built-in sharding algorithm: https://shardingsphere.apache.org/document/current/en/user-manual/common-config/builtin-algorithm/sharding/
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type=xxx
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx=xxx
-```
-
-## Encryption
-
-```properties
-# encrypt-algorithm-name is specified by users, and its property should be consistent with that of encryptor-name in encryption rules. 
-# type and props, please refer to the built-in encryption algorithm: https://shardingsphere.apache.org/document/current/en/user-manual/common-config/builtin-algorithm/encrypt/
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.type=xxx
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xxx=xxx
-```
-
-## Read/Write Splitting Load Balancer
-
-```properties
-# load-balance-algorithm-name is specified by users, and its property has to be consistent with that of load-balancer-name in read/write splitting rules. 
-# type and props, please refer to the built-in read/write splitting algorithm load balancer: https://shardingsphere.apache.org/document/current/en/user-manual/common-config/builtin-algorithm/load-balance/
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.type=xxx
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx=xxx
-```
-
-## Shadow DB
-
-```properties
-# shadow-algorithm-name is specified by users, and its property has to be consistent with that of shadow-algorithm-names in shadow DB rules. 
-# type and props, please refer to the built-in shadow DB algorithm: https://shardingsphere.apache.org/document/current/en/user-manual/common-config/builtin-algorithm/shadow/
-spring.shardingsphere.rules.shadow.shadow-algorithms.<shadow-algorithm-name>.type=xxx
-spring.shardingsphere.rules.shadow.shadow-algorithms.<shadow-algorithm-name>.props.xxx=xxx
-```
-
-## High Availability
-
-```properties
-# discovery-type-name is specified by users, and its property has to be consistent with that of discovery-type-name in database discovery rules. 
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.type=xxx
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.props.xxx=xxx
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.cn.md
deleted file mode 100644
index 66f2293148d..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.cn.md
+++ /dev/null
@@ -1,85 +0,0 @@
-+++
-title = "数据源配置"
-weight = 2
-chapter = true
-+++
-
-## 背景信息
-
-### 使用本地数据源
-
-示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。当使用 ShardingSphere JDBC 时，JDBC 池的属性名取决于各自 JDBC 池自己的定义，并不由 ShardingSphere 硬定义，相关的处理可以参考类`org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`。例如对于 Alibaba Druid 1.2.9 而言，使用`url`代替如下示例中的`jdbc-url`是预期行为。
-
-### 使用 JNDI 数据源
-
-如果计划使用 JNDI 配置数据库，在应用容器（如 Tomcat）中使用 ShardingSphere-JDBC 时，
-可使用 `spring.shardingsphere.datasource.${datasourceName}.jndiName` 来代替数据源的一系列配置。
-
-## 参数解释
-
-### 使用本地数据源
-```properties
-spring.shardingsphere.datasource.names= # 真实数据源名称，多个数据源用逗号区分
-
-# <actual-data-source-name> 表示真实数据源名称
-spring.shardingsphere.datasource.<actual-data-source-name>.type= # 数据库连接池全类名
-spring.shardingsphere.datasource.<actual-data-source-name>.driver-class-name= # 数据库驱动类名，以数据库连接池自身配置为准
-spring.shardingsphere.datasource.<actual-data-source-name>.jdbc-url= # 数据库 URL 连接，以数据库连接池自身配置为准
-spring.shardingsphere.datasource.<actual-data-source-name>.username= # 数据库用户名，以数据库连接池自身配置为准
-spring.shardingsphere.datasource.<actual-data-source-name>.password= # 数据库密码，以数据库连接池自身配置为准
-spring.shardingsphere.datasource.<actual-data-source-name>.<xxx>= # ... 数据库连接池的其它属性
-```
-### 使用 JNDI 数据源
-
-```properties
-spring.shardingsphere.datasource.names= # 真实数据源名称，多个数据源用逗号区分
-# <actual-data-source-name> 表示真实数据源名称
-spring.shardingsphere.datasource.<actual-data-source-name>.jndi-name= # 数据源 JNDI
-```
-
-## 操作步骤
-
-### 1. 引入 MAVEN 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-> 注意：请将 `${latest.release.version}` 更改为实际的版本号。
-
-## 配置示例
-
-### 使用本地数据源
-
-```properties
-# 配置真实数据源
-spring.shardingsphere.datasource.names=ds1,ds2
-
-# 配置第 1 个数据源
-spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1
-spring.shardingsphere.datasource.ds1.username=root
-spring.shardingsphere.datasource.ds1.password=
-
-# 配置第 2 个数据源
-spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2
-spring.shardingsphere.datasource.ds2.username=root
-spring.shardingsphere.datasource.ds2.password=
-```
-### 使用 JNDI 数据源
-
-```properties
-# 配置真实数据源
-spring.shardingsphere.datasource.names=ds1,ds2
-# 配置第 1 个数据源
-spring.shardingsphere.datasource.ds1.jndi-name=java:comp/env/jdbc/ds1
-# 配置第 2 个数据源
-spring.shardingsphere.datasource.ds2.jndi-name=java:comp/env/jdbc/ds2
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.en.md
deleted file mode 100644
index 5ad72e00c6a..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.en.md
+++ /dev/null
@@ -1,73 +0,0 @@
-+++
-title = "Data Source"
-weight = 2
-chapter = true
-+++
-
-## Background information
-
-### Use local datasource
-
-The database driver showed in the example is MySQL and the connection pool is HikariCP, either of which can be replaced by other database drivers and connection pools. When using ShardingSphere JDBC, the property names of the JDBC pools depend on its own definition instead of being fixed by ShardingSphere. See relevant procedures at `org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`. For example, using `url` instead of `jdbc-url` for Alibaba Druid 1.2.9 is the expected behavior.
-
-### Use datasource JNDI
-
-If you wish to use JNDI for database configuration, you can replace a series of datasource configurations with `spring.shardingsphere.datasource.${datasourceName}.jndiName` when you are using ShardingSphere-JDBC on application servers(e.g. Tomcat).
-
-## Parameters Explanation
-
-### Using local datasource
-
-```properties
-spring.shardingsphere.datasource.names= # Actual datasource names. Multiple datasources are separated with comma
-
-# <actual-data-source-name>  to show actual datasource name
-spring.shardingsphere.datasource.<actual-data-source-name>.type= # Full class name of the database connection pool
-spring.shardingsphere.datasource.<actual-data-source-name>.driver-class-name= # Database-driven class name, based on the database connection pool's own configuration
-spring.shardingsphere.datasource.<actual-data-source-name>.jdbc-url= # Database URL connection, in ine with the connection pool's own configuration 
-spring.shardingsphere.datasource.<actual-data-source-name>.username= # database user names，in line with the connection pool's own configuration
-spring.shardingsphere.datasource.<actual-data-source-name>.password= # database password ，in line with the connection pool's own configuration 
-spring.shardingsphere.datasource.<actual-data-source-name>.<xxx>= # ... Other properties of the database connection pool
-```
-
-### Using JNDI datasource
-
-```properties
-spring.shardingsphere.datasource.names= # Authentic datasource names. Multiple datasources are separated with comma
-# <actual-data-source-name> to show actual datasource name
-spring.shardingsphere.datasource.<actual-data-source-name>.jndi-name= # datasource JNDI
-```
-
-## Configuration Examples
-
-### Using local datasource
-
-```properties
-# configure actual datasource
-spring.shardingsphere.datasource.names=ds1,ds2
-
-# configure the first datasource
-spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1
-spring.shardingsphere.datasource.ds1.username=root
-spring.shardingsphere.datasource.ds1.password=
-
-# configure the second datasource
-spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2
-spring.shardingsphere.datasource.ds2.username=root
-spring.shardingsphere.datasource.ds2.password=
-```
-
-### Using JNDI datasource
-
-```properties
-# configure actual datasource
-spring.shardingsphere.datasource.names=ds1,ds2
-# configure the first datasource
-spring.shardingsphere.datasource.ds1.jndi-name=java:comp/env/jdbc/ds1
-# configure the second datasource
-spring.shardingsphere.datasource.ds2.jndi-name=java:comp/env/jdbc/ds2
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.cn.md
deleted file mode 100644
index 20ab5ebb5e6..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.cn.md
+++ /dev/null
@@ -1,74 +0,0 @@
-+++
-title = "模式配置"
-weight = 1
-+++
-
-## 参数解释
-
-```properties
-spring.shardingsphere.mode.type= # 运行模式类型。可选配置：Standalone、Cluster
-spring.shardingsphere.mode.repository= # 持久化仓库配置。
-```
-
-### 单机模式
-
-```properties
-spring.shardingsphere.mode.type=Standalone
-spring.shardingsphere.mode.repository.type= # 持久化仓库类型
-spring.shardingsphere.mode.repository.props.<key>= # 持久化仓库所需属性
-```
-
-### 集群模式 (推荐)
-
-```properties
-spring.shardingsphere.mode.type=Cluster
-spring.shardingsphere.mode.repository.type= # 持久化仓库类型
-spring.shardingsphere.mode.repository.props.namespace= # 注册中心命名空间
-spring.shardingsphere.mode.repository.props.server-lists= # 注册中心连接地址
-spring.shardingsphere.mode.repository.props.<key>= # 持久化仓库所需属性
-```
-
-## 注意事项
-
-1. 生产环境建议使用集群模式部署。
-1. 集群模式部署推荐使用 `ZooKeeper` 注册中心。
-1. `ZooKeeper` 存在配置信息时，则以 `ZooKeeper` 中的配置为准。
-
-## 操作步骤
-
-1. 引入 MAVEN 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-注意：请将 `${latest.release.version}` 更改为实际的版本号。
-
-## 配置示例
-
-### 单机模式
-
-```properties
-spring.shardingsphere.mode.type=Standalone
-spring.shardingsphere.mode.repository.type=JDBC
-```
-
-### 集群模式 (推荐)
-
-```properties
-spring.shardingsphere.mode.type=Cluster
-spring.shardingsphere.mode.repository.type=ZooKeeper
-spring.shardingsphere.mode.repository.props.namespace=governance
-spring.shardingsphere.mode.repository.props.server-lists=localhost:2181
-spring.shardingsphere.mode.repository.props.retryIntervalMilliseconds=500
-spring.shardingsphere.mode.repository.props.timeToLiveSeconds=60
-```
-
-## 相关参考
-
-- [ZooKeeper 注册中心安装与使用](https://zookeeper.apache.org/doc/r3.7.1/zookeeperStarted.html)
-- 持久化仓库类型的详情，请参见[内置持久化仓库类型列表](/cn/user-manual/common-config/builtin-algorithm/metadata-repository/)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.en.md
deleted file mode 100644
index 831ee64e832..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.en.md
+++ /dev/null
@@ -1,72 +0,0 @@
-+++
-title = "Mode"
-weight = 1
-+++
-
-## Parameters
-
-```properties
-spring.shardingsphere.mode.type= # Type of  mode configuration. Value could be: Standalone, Cluster
-spring.shardingsphere.mode.repository= # Persist repository configuration.
-```
-
-### Standalone Mode
-
-```properties
-spring.shardingsphere.mode.type=Standalone
-spring.shardingsphere.mode.repository.type= # Type of persist repository
-spring.shardingsphere.mode.repository.props.<key>= # Properties of persist repository
-```
-
-### Cluster Mode (recommended)
-
-```properties
-spring.shardingsphere.mode.type=Cluster
-spring.shardingsphere.mode.repository.type= # Type of persist repository
-spring.shardingsphere.mode.repository.props.namespace= # Namespace of registry center
-spring.shardingsphere.mode.repository.props.server-lists= # Server lists of registry center
-spring.shardingsphere.mode.repository.props.<key>= # Properties of persist repository
-```
-
-## Notes
-
-1. Cluster mode deployment is recommended for production environment.
-1. The `ZooKeeper` registry center is recommended for cluster mode deployment.
-1. If there is configuration information in the `ZooKeeper`, please refer to the config information there.
-
-## Procedure
-1. Import MAVEN dependency.
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-> Note: please change `${latest.release.version}' to the actual version number.
-## Sample
-
-### Standalone Mode
-
-```properties
-spring.shardingsphere.mode.type=Standalone
-spring.shardingsphere.mode.repository.type=JDBC
-```
-
-### Cluster Mode (recommended)
-
-```properties
-spring.shardingsphere.mode.type=Cluster
-spring.shardingsphere.mode.repository.type=ZooKeeper
-spring.shardingsphere.mode.repository.props.namespace=governance
-spring.shardingsphere.mode.repository.props.server-lists=localhost:2181
-spring.shardingsphere.mode.repository.props.retryIntervalMilliseconds=500
-spring.shardingsphere.mode.repository.props.timeToLiveSeconds=60
-```
-
-## Related References
-
-- [Installation and Usage of ZooKeeper Registry Center](https://zookeeper.apache.org/doc/r3.7.1/zookeeperStarted.html)
-- Please refer to [Builtin Persist Repository List](/en/user-manual/common-config/builtin-algorithm/metadata-repository/) for more details about the type of repository.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.cn.md
deleted file mode 100644
index 2699868d4c6..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.cn.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "规则配置"
-weight = 3
-chapter = true
-+++
-
-规则是 Apache ShardingSphere 面向可插拔的一部分。
-本章节是 ShardingSphere-JDBC 的 Spring Boot Starter 规则配置参考手册。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.en.md
deleted file mode 100644
index ef92196844b..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.en.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "Rules"
-weight = 3
-chapter = true
-+++
-
-Rules are pluggable part of Apache ShardingSphere.
-This chapter is a Spring Boot Starter rule configuration manual for ShardingSphere-JDBC.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.cn.md
deleted file mode 100644
index ca3366d9ef2..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.cn.md
+++ /dev/null
@@ -1,75 +0,0 @@
-+++
-title = "数据加密"
-weight = 4
-+++
-
-## 背景信息
-
-数据加密 Spring Boot Starter 配置方式适用于使用 SpringBoot 的业务场景，能够最大程度地利用 SringBoot 配置初始化及 Bean 管理的能力，完成 ShardingSphereDataSource 对象的创建，减少不必要的编码工作。
-
-## 参数解释
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置，请参考使用手册
-
-spring.shardingsphere.rules.encrypt.tables.<table-name>.query-with-cipher-column= # 该表是否使用加密列进行查询
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.plain-column= # 原文列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.cipher-column= # 加密列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.encryptor-name= # 加密算法名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-column= # 辅助查询列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-encryptor-name# 辅助查询算法名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.like-query-column= # 模糊查询列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.like-query-encryptor-name# 模糊查询算法名称
-
-# 加密算法配置
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.type= # 加密算法类型
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xxx= # 加密算法属性配置
-
-spring.shardingsphere.rules.encrypt.queryWithCipherColumn= # 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询
-```
-
-算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/common-config/builtin-algorithm/encrypt)。
-
-## 操作步骤
-
-1. 在 SpringBoot 文件中配置数据加密规则，包含数据源、加密规则、全局属性等配置项；
-2. 启动 SpringBoot 程序，会自动加载配置，并初始化 ShardingSphereDataSource。
-
-## 配置示例
-
-```properties
-spring.shardingsphere.datasource.names=ds
-
-spring.shardingsphere.datasource.ds.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds.jdbc-url=jdbc:mysql://localhost:3306/demo_ds?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
-spring.shardingsphere.datasource.ds.username=root
-spring.shardingsphere.datasource.ds.password=
-
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.props.aes-key-value=123456abc
-spring.shardingsphere.rules.encrypt.encryptors.name-assisted-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.name-assisted-encryptor.props.aes-key-value=123456abc
-spring.shardingsphere.rules.encrypt.encryptors.name-like-encryptor.type=CHAR_DIGEST_LIKE
-spring.shardingsphere.rules.encrypt.encryptors.name-like-encryptor.props.delta=2
-spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.props.aes-key-value=123456abc
-
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.cipher-column=username
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.encryptor-name=name-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.assisted-query-column=username_assisted
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.assisted-query-encryptor-name=name-assisted-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.like-query-column=username_like
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.like-query-encryptor-name=name-like-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.cipher-column=pwd
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.encryptor-name=pwd-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.query-with-cipher-column=true
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.query-with-cipher-column=false
-
-spring.shardingsphere.props.sql-show=true
-```
-
-## 相关参考
-
-- [核心特性：数据加密](/cn/features/encrypt/)
-- [开发者指南：数据加密](/cn/dev-manual/encrypt/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.en.md
deleted file mode 100644
index da1a117c263..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.en.md
+++ /dev/null
@@ -1,75 +0,0 @@
-+++
-title = "Encryption"
-weight = 4
-+++
-
-## Background
-
-The configuration method for Spring Boot Starter Data Encryption is suitable for business scenarios using SpringBoot and can make the most of SringBoot's configuration initialization and Bean management capabilities to complete the creation of ShardingSphereDataSource objects, reducing unnecessary coding work.
-
-## Parameters
-
-```properties
-spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage
-
-spring.shardingsphere.rules.encrypt.tables.<table-name>.query-with-cipher-column= # Whether the table uses cipher columns for query
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.plain-column= # Plain column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.cipher-column= # Cipher column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.encryptor-name= # Encrypt algorithm name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-column= # Assisted query column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-encryptor-name# Assisted query encrypt algorithm name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.like-query-column= # Like query column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.like-query-encryptor-name# Like query encrypt algorithm name
-
-# Encrypt algorithm configuration
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.type= # Encrypt algorithm type
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xxx= # Encrypt algorithm properties
-
-spring.shardingsphere.rules.encrypt.queryWithCipherColumn= # Whether query with cipher column for data encrypt. User you can use plaintext to query if have
-```
-
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/common-config/builtin-algorithm/encrypt) for more details about type of algorithm.
-
-## Procedure
-
-1. Configure the data encryption rules in the SpringBoot file, including the data source, encryption rules, global properties and other items.
-2. Start the SpringBoot program, which will automatically load the configuration and initialize the ShardingSphereDataSource.
-
-## Sample
-
-```properties
-spring.shardingsphere.datasource.names=ds
-
-spring.shardingsphere.datasource.ds.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds.jdbc-url=jdbc:mysql://localhost:3306/demo_ds?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
-spring.shardingsphere.datasource.ds.username=root
-spring.shardingsphere.datasource.ds.password=
-
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.props.aes-key-value=123456abc
-spring.shardingsphere.rules.encrypt.encryptors.name-assisted-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.name-assisted-encryptor.props.aes-key-value=123456abc
-spring.shardingsphere.rules.encrypt.encryptors.name-like-encryptor.type=CHAR_DIGEST_LIKE
-spring.shardingsphere.rules.encrypt.encryptors.name-like-encryptor.props.delta=2
-spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.props.aes-key-value=123456abc
-
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.cipher-column=username
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.encryptor-name=name-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.assisted-query-column=username_assisted
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.assisted-query-encryptor-name=name-assisted-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.like-query-column=username_like
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.like-query-encryptor-name=name-like-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.cipher-column=pwd
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.encryptor-name=pwd-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.query-with-cipher-column=true
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.query-with-cipher-column=false
-
-spring.shardingsphere.props.sql-show=true
-```
-
-## Related References
-
-- [Core Feature: Data Encryption](/en/features/encrypt/)
-- [Developer Guide: Data Encryption](/en/dev-manual/encrypt/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.cn.md
deleted file mode 100644
index 50910b8e488..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.cn.md
+++ /dev/null
@@ -1,74 +0,0 @@
-+++
-title = "高可用"
-weight = 3
-+++
-
-## 背景信息
-
-`Spring Boot Starter` 配置方式适用于使用 SpringBoot 的业务场景，能够最大程度地利用 SpringBoot 配置初始化及 Bean 管理的能力，自动完成 `ShardingSphereDataSource` 对象的创建。
-
-## 参数解释
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置，请参考使用手册
-
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.dynamic-strategy.auto-aware-data-source-name= # 数据库发现的逻辑数据源名称
-
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.data-source-names= # 数据源名称，多个数据源用逗号分隔 如：ds_0, ds_1
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.discovery-heartbeat-name= # 检测心跳名称
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.discovery-type-name= # 数据库发现类型名称
-spring.shardingsphere.rules.database-discovery.discovery-heartbeats.<discovery-heartbeat-name>.props.keep-alive-cron= # cron 表达式，如：'0/5 * * * * ?'
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.type= # 数据库发现类型，如：MySQL.MGR
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.props.group-name= # 数据库发现类型必要参数，如 MGR 的 group-name
-```
-
-## 操作步骤
-
-1. 引入 MAVEN 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-> 注意：请将 `${latest.release.version}` 更改为实际的版本号。
-
-## 配置示例
-```properties
-spring.shardingsphere.datasource.names=ds-0,ds-1,ds-2
-spring.shardingsphere.datasource.ds-0.jdbc-url = jdbc:mysql://127.0.0.1:13306/primary_demo_ds?serverTimezone=UTC&useSSL=false
-spring.shardingsphere.datasource.ds-0.username=root
-spring.shardingsphere.datasource.ds-0.password=
-spring.shardingsphere.datasource.ds-0.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds-0.driver-class-name=com.mysql.cj.jdbc.Driver
-
-spring.shardingsphere.datasource.ds-1.jdbc-url = jdbc:mysql://127.0.0.1:13307/primary_demo_ds?serverTimezone=UTC&useSSL=false
-spring.shardingsphere.datasource.ds-1.username=root
-spring.shardingsphere.datasource.ds-1.password=
-spring.shardingsphere.datasource.ds-1.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds-1.driver-class-name=com.mysql.cj.jdbc.Driver
-
-spring.shardingsphere.datasource.ds-2.jdbc-url = jdbc:mysql://127.0.0.1:13308/primary_demo_ds?serverTimezone=UTC&useSSL=false
-spring.shardingsphere.datasource.ds-2.username=root
-spring.shardingsphere.datasource.ds-2.password=
-spring.shardingsphere.datasource.ds-2.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds-2.driver-class-name=com.mysql.cj.jdbc.Driver
-
-spring.shardingsphere.rules.readwrite-splitting.data-sources.replica_ds.dynamic-strategy.auto-aware-data-source-name=readwrite_ds
-
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite_ds.data-source-names=ds-0, ds-1, ds-2
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite_ds.discovery-heartbeat-name=mgr-heartbeat
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite_ds.discovery-type-name=mgr
-spring.shardingsphere.rules.database-discovery.discovery-heartbeats.mgr-heartbeat.props.keep-alive-cron=0/5 * * * * ?
-spring.shardingsphere.rules.database-discovery.discovery-types.mgr.type=MGR
-spring.shardingsphere.rules.database-discovery.discovery-types.mgr.props.groupName=b13df29e-90b6-11e8-8d1b-525400fc3996
-```
-## 相关参考
-
-- [高可用核心特性](/cn/features/ha/)
-- [JAVA API：高可用配置](/cn/user-manual/shardingsphere-jdbc/java-api/rules/ha/)
-- [YAML 配置：高可用配置](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/ha/)
-- [Spring 命名空间：高可用配置](/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/ha/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.en.md
deleted file mode 100644
index e972abb96a0..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.en.md
+++ /dev/null
@@ -1,74 +0,0 @@
-+++
-title = "HA"
-weight = 3
-+++
-
-## Background
-
-The `Spring Boot Starter` configuration method is applicable to business scenarios using SpringBoot. It can make full use of the SpringBoot configuration initialization and bean management capabilities, to automatically complete the creation of `ShardingSphereDataSource` objects.
-
-## Parameters
-
-```properties
-spring.shardingsphere.datasource.names= # Omit data source configuration, please refer to the user manual
-
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.dynamic-strategy.auto-aware-data-source-name= # Logical data source name discovered by the database
-
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.data-source-names= # Data source name. Multiple data sources are separated by commas, for example: ds_0, ds_1
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.discovery-heartbeat-name= # Detect heartbeat name
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.discovery-type-name= # Database discovery type name
-spring.shardingsphere.rules.database-discovery.discovery-heartbeats.<discovery-heartbeat-name>.props.keep-alive-cron= # Cron expression, such as: '0/5 * * * * ?'
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.type= # Database discovery type, such as: MySQL.MGR
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.props.group-name= # Necessary parameters of database discovery type, such as group-name of MGR
-```
-
-## Procedure
-
-1. Import MAVEN dependency.
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-> Note: please change `${latest.release.version}' to the actual version number.
-
-## Sample
-```properties
-spring.shardingsphere.datasource.names=ds-0,ds-1,ds-2
-spring.shardingsphere.datasource.ds-0.jdbc-url = jdbc:mysql://127.0.0.1:13306/primary_demo_ds?serverTimezone=UTC&useSSL=false
-spring.shardingsphere.datasource.ds-0.username=root
-spring.shardingsphere.datasource.ds-0.password=
-spring.shardingsphere.datasource.ds-0.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds-0.driver-class-name=com.mysql.cj.jdbc.Driver
-
-spring.shardingsphere.datasource.ds-1.jdbc-url = jdbc:mysql://127.0.0.1:13307/primary_demo_ds?serverTimezone=UTC&useSSL=false
-spring.shardingsphere.datasource.ds-1.username=root
-spring.shardingsphere.datasource.ds-1.password=
-spring.shardingsphere.datasource.ds-1.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds-1.driver-class-name=com.mysql.cj.jdbc.Driver
-
-spring.shardingsphere.datasource.ds-2.jdbc-url = jdbc:mysql://127.0.0.1:13308/primary_demo_ds?serverTimezone=UTC&useSSL=false
-spring.shardingsphere.datasource.ds-2.username=root
-spring.shardingsphere.datasource.ds-2.password=
-spring.shardingsphere.datasource.ds-2.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds-2.driver-class-name=com.mysql.cj.jdbc.Driver
-
-spring.shardingsphere.rules.readwrite-splitting.data-sources.replica_ds.dynamic-strategy.auto-aware-data-source-name=readwrite_ds
-
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite_ds.data-source-names=ds-0, ds-1, ds-2
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite_ds.discovery-heartbeat-name=mgr-heartbeat
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite_ds.discovery-type-name=mgr
-spring.shardingsphere.rules.database-discovery.discovery-heartbeats.mgr-heartbeat.props.keep-alive-cron=0/5 * * * * ?
-spring.shardingsphere.rules.database-discovery.discovery-types.mgr.type=MGR
-spring.shardingsphere.rules.database-discovery.discovery-types.mgr.props.groupName=b13df29e-90b6-11e8-8d1b-525400fc3996
-```
-## Related References
-
-- [Feature Description of HA](/en/features/ha/)
-- [JAVA API: HA](/en/user-manual/shardingsphere-jdbc/java-api/rules/ha/)
-- [YAML Configuration: HA](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/ha/)
-- [Spring Namespace: HA](/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/ha/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.cn.md
deleted file mode 100644
index dfc0415d43a..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.cn.md
+++ /dev/null
@@ -1,104 +0,0 @@
-+++
-title = "混合规则"
-weight = 8
-+++
-
-## 背景信息
-
-ShardingSphere 涵盖了很多功能，例如，分库分片、读写分离、高可用、数据脱敏等。这些功能用户可以单独进行使用，也可以配合一起使用，下面是基于 SpringBoot Starter 的参数解释和配置示例。
-
-## 参数解释
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置，请参考使用手册
-# 标准分片表配置
-spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes= # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-# 用于单分片键的标准分片场景
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-column= # 分片列名称
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name= # 分片算法名称
-# 分表策略，同分库策略
-spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # 省略
-# 分布式序列策略配置
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称
-# 分片算法配置
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx= # 分片算法属性配置
-# 分布式序列算法配置
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置
-# 动态读写分离配置
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.dynamic-strategy.auto-aware-data-source-name= # 数据库发现逻辑数据源名称
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.dynamic-strategy.write-data-source-query-enabled= # 读库全部下线，主库是否承担读流量
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.load-balancer-name= # 负载均衡算法名称
-# 数据库发现配置
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.data-source-names= # 数据源名称，多个数据源用逗号分隔 如：ds_0, ds_1
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.discovery-heartbeat-name= # 检测心跳名称
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.discovery-type-name= # 数据库发现类型名称
-spring.shardingsphere.rules.database-discovery.discovery-heartbeats.<discovery-heartbeat-name>.props.keep-alive-cron= # cron 表达式，如：'0/5 * * * * ?'
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.type= # 数据库发现类型，如：MySQL.MGR
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.props.group-name= # 数据库发现类型必要参数，如 MGR 的 group-name
-# 数据脱敏配置
-spring.shardingsphere.rules.encrypt.tables.<table-name>.query-with-cipher-column= # 该表是否使用加密列进行查询
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.plain-column= # 原文列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.cipher-column= # 加密列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.encryptor-name= # 加密算法名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-column= # 辅助查询列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-encryptor-name# 辅助查询算法名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.like-query-column= # 模糊查询列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.like-query-encryptor-name# 模糊查询算法名称
-# 加密算法配置
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.type= # 加密算法类型
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xxx= # 加密算法属性配置
-spring.shardingsphere.rules.encrypt.queryWithCipherColumn= # 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询
-```
-
-## 配置示例
-
-```properties
-# 分片配置
-spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=replica-ds-$->{0..1}.t_order_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=t-order-inline
-spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=snowflake
-spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes=replica-ds-$->{0..1}.t_order_item_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column=order_id
-spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=replica_ds-$->{user_id % 2}
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.algorithm-expression=t_order_$->{order_id % 2}
-spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
-# 动态读写分离配置
-spring.shardingsphere.rules.readwrite-splitting.data-sources.replica-ds-0.dynamic-strategy.auto-aware-data-source-name=readwrite-ds-0
-spring.shardingsphere.rules.readwrite-splitting.data-sources.replica-ds-1.dynamic-strategy.auto-aware-data-source-name=readwrite-ds-1
-# 数据库发现配置
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-0.data-source-names=ds-0, ds-1, ds-2
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-0.discovery-heartbeat-name=mgr-heartbeat
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-0.discovery-type-name=mgr
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-1.data-source-names=ds-3, ds-4, ds-5
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-1.discovery-heartbeat-name=mgr-heartbeat
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-1.discovery-type-name=mgr
-spring.shardingsphere.rules.database-discovery.discovery-heartbeats.mgr-heartbeat.props.keep-alive-cron=0/5 * * * * ?
-spring.shardingsphere.rules.database-discovery.discovery-types.mgr.type=MGR
-spring.shardingsphere.rules.database-discovery.discovery-types.mgr.props.groupName=b13df29e-90b6-11e8-8d1b-525400fc3996
-# 数据脱敏配置
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.props.aes-key-value=123456abc
-spring.shardingsphere.rules.encrypt.encryptors.name-assisted-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.name-assisted-encryptor.props.aes-key-value=123456abc
-spring.shardingsphere.rules.encrypt.encryptors.name-like-encryptor.type=CHAR_DIGEST_LIKE
-spring.shardingsphere.rules.encrypt.encryptors.name-like-encryptor.props.delta=2
-spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.cipher-column=username
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.encryptor-name=name-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.assisted-query-column=username_assisted
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.assisted-query-encryptor-name=name-assisted-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.like-query-column=username_like
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.like-query-encryptor-name=name-like-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.cipher-column=pwd
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.encryptor-name=pwd-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.query-with-cipher-column=true
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.query-with-cipher-column=false
-spring.shardingsphere.props.sql-show=true
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.en.md
deleted file mode 100644
index 2d052bb836f..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.en.md
+++ /dev/null
@@ -1,106 +0,0 @@
-+++
-title = "Mixed Rules"
-weight = 8
-+++
-
-## Background
-
-ShardingSphere provides a variety of features, such as data sharding, read/write splitting, high availability, and data decryption. These features can be used independently or in combination. 
-
-Below, you will find the parameters' explanation and configuration samples based on SpringBoot Starter.
-
-## Parameters
-
-```properties
-spring.shardingsphere.datasource.names= # Please refer to the user manual for the data source configuration
-# Standard sharding table configuration
-spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes= # It consists of data source name plus table name, separated by decimal points. Multiple tables are separated by commas, and inline expression is supported. By default, a data node is generated with a known data source and logical table name, used for broadcast tables (that is, each database needs the same table for associated queries, mostly the dictionary table) or the situation when only database sharding is needed and all databases have the same table structure.
-# Standard sharding scenarios used for a single shard key
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-column= # Sharding column name
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name= # sharding algorithm name
-# Table shards strategy. The same as database shards strategy
-spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # Omit
-# Distributed sequence strategy configuration
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # Distributed sequence column name
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # Distributed sequence algorithm name
-# Sharding algorithm configuration
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # Sharding algorithm type
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx= # Sharidng algorithm property configuration
-# Distributed sequence algorithm configuration
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # Distributed sequence algorithm type
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # Property configuration of distributed sequence algorithm 
-# Dynamic read/write splitting configuration
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.dynamic-strategy.auto-aware-data-source-name= # logical data source name of database discovery
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.dynamic-strategy.write-data-source-query-enabled= # All the read databases went offline. Whether the primary database bears the read traffic.
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.load-balancer-name= # Load balancer algorithm name
-# Database discovery configuration
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.data-source-names= # Data source name. Multiple data sources are separated by commas, such as ds_0, ds_1.
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.discovery-heartbeat-name= # Detect heartbeat name
-spring.shardingsphere.rules.database-discovery.data-sources.<database-discovery-data-source-name>.discovery-type-name= # Database discovery type name
-spring.shardingsphere.rules.database-discovery.discovery-heartbeats.<discovery-heartbeat-name>.props.keep-alive-cron= # cron expression, such as '0/5 * * * * ?'.
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.type= # Database discovery type, such as MySQL.MGR.
-spring.shardingsphere.rules.database-discovery.discovery-types.<discovery-type-name>.props.group-name= # Required parameter of database discovery type, such as MGR's group-name.
-# Data desensitization configuration
-spring.shardingsphere.rules.encrypt.tables.<table-name>.query-with-cipher-column= # Whether the table uses cipher columns for query
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.plain-column= # Plain column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.cipher-column= # Cipher column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.encryptor-name= # Encrypt algorithm name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-column= # Assisted query column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-encryptor-name# Assisted query encrypt algorithm name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.like-query-column= # Like query column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.like-query-encryptor-name# Like query encrypt algorithm name
-# Encryption algorithm configuration
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.type= # Encryption algorithm type
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xxx= # Encryption algorithm property configuration
-spring.shardingsphere.rules.encrypt.queryWithCipherColumn= # Whether use ciphercolumn for queries. You can use the plaincolumn for queries if it's available.
-```
-
-## Samples
-
-```properties
-# Sharding configuration
-spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=replica-ds-$->{0..1}.t_order_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=t-order-inline
-spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=snowflake
-spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes=replica-ds-$->{0..1}.t_order_item_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column=order_id
-spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=replica_ds-$->{user_id % 2}
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.algorithm-expression=t_order_$->{order_id % 2}
-spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
-# Dynamic read/write splitting configuration
-spring.shardingsphere.rules.readwrite-splitting.data-sources.replica-ds-0.dynamic-strategy.auto-aware-data-source-name=readwrite-ds-0
-spring.shardingsphere.rules.readwrite-splitting.data-sources.replica-ds-1.dynamic-strategy.auto-aware-data-source-name=readwrite-ds-1
-# Database discovery configuration
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-0.data-source-names=ds-0, ds-1, ds-2
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-0.discovery-heartbeat-name=mgr-heartbeat
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-0.discovery-type-name=mgr
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-1.data-source-names=ds-3, ds-4, ds-5
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-1.discovery-heartbeat-name=mgr-heartbeat
-spring.shardingsphere.rules.database-discovery.data-sources.readwrite-ds-1.discovery-type-name=mgr
-spring.shardingsphere.rules.database-discovery.discovery-heartbeats.mgr-heartbeat.props.keep-alive-cron=0/5 * * * * ?
-spring.shardingsphere.rules.database-discovery.discovery-types.mgr.type=MGR
-spring.shardingsphere.rules.database-discovery.discovery-types.mgr.props.groupName=b13df29e-90b6-11e8-8d1b-525400fc3996
-# Data desensitization configuration
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.props.aes-key-value=123456abc
-spring.shardingsphere.rules.encrypt.encryptors.name-assisted-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.name-assisted-encryptor.props.aes-key-value=123456abc
-spring.shardingsphere.rules.encrypt.encryptors.name-like-encryptor.type=CHAR_DIGEST_LIKE
-spring.shardingsphere.rules.encrypt.encryptors.name-like-encryptor.props.delta=2
-spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.cipher-column=username
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.encryptor-name=name-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.assisted-query-column=username_assisted
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.assisted-query-encryptor-name=name-assisted-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.like-query-column=username_like
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.like-query-encryptor-name=name-like-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.cipher-column=pwd
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.encryptor-name=pwd-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.query-with-cipher-column=true
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.query-with-cipher-column=false
-spring.shardingsphere.props.sql-show=true
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.cn.md
deleted file mode 100644
index 2f16b4199d6..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.cn.md
+++ /dev/null
@@ -1,59 +0,0 @@
-+++
-title = "读写分离"
-weight = 2
-+++
-
-## 背景信息
-读写分离 Spring Boot Starter 配置方式适用于使用 SpringBoot 的业务场景，能够最大程度地利用 SringBoot 配置初始化及 Bean 管理的能力，完成 ShardingSphereDataSource 对象的创建，减少不必要的编码工作。
-
-## 参数解释
-
-### 静态读写分离
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置，请参考使用手册
-
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.static-strategy.write-data-source-name= # 写库数据源名称
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.static-strategy.read-data-source-names= # 读库数据源列表，多个从数据源用逗号分隔
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.load-balancer-name= # 负载均衡算法名称
-
-# 负载均衡算法配置
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.type= # 负载均衡算法类型
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx= # 负载均衡算法属性配置
-```
-
-### 动态读写分离
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置，请参考使用手册
-
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.dynamic-strategy.auto-aware-data-source-name= # 数据库发现逻辑数据源名称
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.dynamic-strategy.write-data-source-query-enabled= # 读库全部下线，主库是否承担读流量
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.load-balancer-name= # 负载均衡算法名称
-
-# 负载均衡算法配置
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.type= # 负载均衡算法类型
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx= # 负载均衡算法属性配置
-```
-
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/common-config/builtin-algorithm/load-balance)。
-查询一致性路由的详情，请参见[核心特性：读写分离](/cn/features/readwrite-splitting/)。
-
-## 操作步骤
-1. 添加读写分离数据源
-2. 设置负载均衡算法
-3. 使用读写分离数据源
-
-## 配置示例
-```properties
-spring.shardingsphere.rules.readwrite-splitting.data-sources.readwrite_ds.static-strategy.write-data-source-name=write-ds
-spring.shardingsphere.rules.readwrite-splitting.data-sources.readwrite_ds.static-strategy.read-data-source-names=read-ds-0,read-ds-1
-spring.shardingsphere.rules.readwrite-splitting.data-sources.readwrite_ds.load-balancer-name=round_robin
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.round_robin.type=ROUND_ROBIN
-```
-
-## 相关参考
-- [核心特性：读写分离](/cn/features/readwrite-splitting/)
-- [Java API：读写分离](/cn/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting/)
-- [YAML 配置：读写分离](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/)
-- [Spring 命名空间：读写分离](/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.en.md
deleted file mode 100644
index a3dae0482a3..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.en.md
+++ /dev/null
@@ -1,59 +0,0 @@
-+++
-title = "Readwrite splitting"
-weight = 2
-+++
-
-## Background
-The read-write splitting configuration method of Spring Boot Starter is suitable for business scenarios using SpringBoot and can maximize the capabilities of initializing SringBoot configuration process and bean management to complete the creation of ShardingSphereDataSource object, reducing unnecessary coding work.
-
-## Parameters Explained
-
-### Static Readwrite-splitting
-
-```properties
-spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage
-
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.static-strategy.write-data-source-name= # Write data source name
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.static-strategy.read-data-source-names= # Read data source names, multiple data source names separated with comma
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.load-balancer-name= # Load balance algorithm name
-
-# Load balance algorithm configuration
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.type= # Load balance algorithm type
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx= # Load balance algorithm properties
-```
-
-### Dynamic Readwrite-splitting
-
-```properties
-spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage
-
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.dynamic-strategy.auto-aware-data-source-name= # Database discovery logic data source name
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.dynamic-strategy.write-data-source-query-enabled= # All read data source are offline, write data source whether the data source is responsible for read traffic
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.load-balancer-name= # Load balance algorithm name
-
-# Load balance algorithm configuration
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.type= # Load balance algorithm type
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx= # Load balance algorithm properties
-```
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/common-config/builtin-algorithm/load-balance) for more details about type of algorithm.
-Please refer to [Read-write splitting-Core features](/en/features/readwrite-splitting/) for more details about query consistent routing.
-
-## Operating Procedure
-1. Add read/write splitting data source.
-2. Set load-balancing algorithm.
-3. Use read/write splitting data source.
-
-## Configuration Examples
-```properties
-spring.shardingsphere.rules.readwrite-splitting.data-sources.readwrite_ds.static-strategy.write-data-source-name=write-ds
-spring.shardingsphere.rules.readwrite-splitting.data-sources.readwrite_ds.static-strategy.read-data-source-names=read-ds-0,read-ds-1
-spring.shardingsphere.rules.readwrite-splitting.data-sources.readwrite_ds.load-balancer-name=round_robin
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.round_robin.type=ROUND_ROBIN
-```
-
-## References
-- [Read-write splitting-Core features](/en/features/readwrite-splitting/)
-- [Java API: read-write splitting](/en/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting/)
-- [YAML Configuration: read-write splitting](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/)
-- [Spring namespace: read-write splitting](/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.cn.md
deleted file mode 100644
index 2cac57c3385..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.cn.md
+++ /dev/null
@@ -1,68 +0,0 @@
-+++
-title = "影子库"
-weight = 5
-+++
-
-## 背景信息
-如果您想在 Spring Boot 环境中使用 ShardingSphere 影子库功能请参考以下配置。
-
-## 参数解释
-
-```properties
-spring.shardingsphere.rules.shadow.data-sources.shadow-data-source.production-data-source-name= # 生产数据源名称
-spring.shardingsphere.rules.shadow.data-sources.shadow-data-source.shadow-data-source-name= # 影子数据源名称
-
-spring.shardingsphere.rules.shadow.tables.<table-name>.data-source-names= # 影子表关联影子数据源名称列表（多个值用","隔开）
-spring.shardingsphere.rules.shadow.tables.<table-name>.shadow-algorithm-names= # 影子表关联影子算法名称列表（多个值用","隔开）
-
-spring.shardingsphere.rules.shadow.defaultShadowAlgorithmName= # 默认影子算法名称，选配项
-
-spring.shardingsphere.rules.shadow.shadow-algorithms.<shadow-algorithm-name>.type= # 影子算法类型
-spring.shardingsphere.rules.shadow.shadow-algorithms.<shadow-algorithm-name>.props.xxx= # 影子算法属性配置
-```
-
-详情请参见[内置影子算法列表](/cn/user-manual/common-config/builtin-algorithm/shadow)
-
-## 操作步骤
-
-1. 在 SpringBoot 文件中配置影子库规则，包含数据源、影子规则、全局属性等配置项。
-2. 启动 SpringBoot 程序，会自动加载配置，并初始化 ShardingSphereDataSource。
-
-## 配置示例
-```properties
-spring.shardingsphere.datasource.names=ds,shadow-ds
-
-spring.shardingsphere.datasource.ds.jdbc-url=jdbc:mysql://localhost:3306/ds?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
-spring.shardingsphere.datasource.ds.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds.username=root
-spring.shardingsphere.datasource.ds.password=
-
-spring.shardingsphere.datasource.shadow-ds.jdbc-url=jdbc:mysql://localhost:3306/shadow_ds?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
-spring.shardingsphere.datasource.shadow-ds.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.shadow-ds.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.shadow-ds.username=root
-spring.shardingsphere.datasource.shadow-ds.password=
-
-spring.shardingsphere.rules.shadow.data-sources.shadow-data-source.production-data-source-name=ds
-spring.shardingsphere.rules.shadow.data-sources.shadow-data-source.shadow-data-source-name=shadow-ds
-
-spring.shardingsphere.rules.shadow.tables.t_user.data-source-names=shadow-data-source
-spring.shardingsphere.rules.shadow.tables.t_user.shadow-algorithm-names=user-id-insert-match-algorithm,simple-hint-algorithm
-
-spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-match-algorithm.type=VALUE_MATCH
-spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-match-algorithm.props.operation=insert
-spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-match-algorithm.props.column=user_id
-spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-match-algorithm.props.value=1
-
-spring.shardingsphere.rules.shadow.shadow-algorithms.simple-hint-algorithm.type=SIMPLE_HINT
-spring.shardingsphere.rules.shadow.shadow-algorithms.simple-hint-algorithm.props.shadow=true
-spring.shardingsphere.rules.shadow.shadow-algorithms.simple-hint-algorithm.props.foo=bar
-```
-
-## 相关参考
-- [影子库的特性描述](/cn/features/shadow/)
-- [JAVA API：影子库的配置 ](/cn/user-manual/shardingsphere-jdbc/java-api/rules/shadow/)
-- [YAML 配置：影子库的配置](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/shadow/)
-- [Spring 命名空间：影子库的配置](/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow/)
-- [开发者指南：影子库的接口和示例](/cn/dev-manual/shadow/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.en.md
deleted file mode 100644
index 4ed1928e14a..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.en.md
+++ /dev/null
@@ -1,69 +0,0 @@
-+++
-title = "Shadow DB"
-weight = 5
-+++
-
-## Background
-If you want to use the ShardingSphere Shadow DB feature in the Spring Boot environment, please refer to the following configuration.
-
-## Parameters
-
-```properties
-spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage
-
-spring.shardingsphere.rules.shadow.data-sources.shadow-data-source.production-data-source-name= # Production data source name
-spring.shardingsphere.rules.shadow.data-sources.shadow-data-source.shadow-data-source-name= # Shadow data source name
-
-spring.shardingsphere.rules.shadow.tables.<table-name>.data-source-names= # Shadow table location shadow data source names (multiple values are separated by ",")
-spring.shardingsphere.rules.shadow.tables.<table-name>.shadow-algorithm-names= # Shadow table location shadow algorithm names (multiple values are separated by ",")
-
-spring.shardingsphere.rules.shadow.defaultShadowAlgorithmName= # Default shadow algorithm name, optional item.
-
-spring.shardingsphere.rules.shadow.shadow-algorithms.<shadow-algorithm-name>.type= # Shadow algorithm type
-spring.shardingsphere.rules.shadow.shadow-algorithms.<shadow-algorithm-name>.props.xxx= # Shadow algorithm property configuration
-```
-
-For details, see [list of built-in shadow algorithms](/en/user-manual/common-config/builtin-algorithm/shadow/)
-
-## Procedure
-1. Configure the shadow library rules in the SpringBoot file, including configuration items such as data sources, shadow rules, and global properties.
-2. Start the SpringBoot program, the configuration will be loaded automatically, and the ShardingSphereDataSource will be initialized.
-
-## Sample
-```properties
-spring.shardingsphere.datasource.names=ds,shadow-ds
-
-spring.shardingsphere.datasource.ds.jdbc-url=jdbc:mysql://localhost:3306/ds?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
-spring.shardingsphere.datasource.ds.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds.username=root
-spring.shardingsphere.datasource.ds.password=
-
-spring.shardingsphere.datasource.shadow-ds.jdbc-url=jdbc:mysql://localhost:3306/shadow_ds?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
-spring.shardingsphere.datasource.shadow-ds.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.shadow-ds.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.shadow-ds.username=root
-spring.shardingsphere.datasource.shadow-ds.password=
-
-spring.shardingsphere.rules.shadow.data-sources.shadow-data-source.production-data-source-name=ds
-spring.shardingsphere.rules.shadow.data-sources.shadow-data-source.shadow-data-source-name=shadow-ds
-
-spring.shardingsphere.rules.shadow.tables.t_user.data-source-names=shadow-data-source
-spring.shardingsphere.rules.shadow.tables.t_user.shadow-algorithm-names=user-id-insert-match-algorithm,simple-hint-algorithm
-
-spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-match-algorithm.type=VALUE_MATCH
-spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-match-algorithm.props.operation=insert
-spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-match-algorithm.props.column=user_id
-spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-match-algorithm.props.value=1
-
-spring.shardingsphere.rules.shadow.shadow-algorithms.simple-hint-algorithm.type=SIMPLE_HINT
-spring.shardingsphere.rules.shadow.shadow-algorithms.simple-hint-algorithm.props.shadow=true
-spring.shardingsphere.rules.shadow.shadow-algorithms.simple-hint-algorithm.props.foo=bar
-```
-
-## Related References
-- [Feature Description of Shadow DB](/en/features/shadow/)
-- [JAVA API: Shadow DB ](/en/user-manual/shardingsphere-jdbc/java-api/rules/shadow/)
-- [YAML Configuration: Shadow DB](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/shadow/)
-- [Spring Namespace: Shadow DB](/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow/)
-- [Dev Guide: Shadow DB](/en/dev-manual/shadow/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.cn.md
deleted file mode 100644
index 5a38b0aee66..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.cn.md
+++ /dev/null
@@ -1,138 +0,0 @@
-+++
-title = "数据分片"
-weight = 1
-+++
-
-## 背景信息
-
-数据分片 Spring Boot Starter 配置方式适用于使用 SpringBoot 的业务场景，能够最大程度地利用 SringBoot 配置初始化及 Bean 管理的能力，完成 ShardingSphereDataSource 对象的创建，减少不必要的编码工作。
-
-## 参数解释
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置，请参考使用手册
-
-# 标准分片表配置
-spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes= # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-
-# 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
-
-# 用于单分片键的标准分片场景
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-column= # 分片列名称
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name= # 分片算法名称
-
-# 用于多分片键的复合分片场景
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-columns= # 分片列名称，多个列以逗号分隔
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-algorithm-name= # 分片算法名称
-
-# 用于 Hint 的分片策略
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.sharding-algorithm-name= # 分片算法名称
-
-# 分表策略，同分库策略
-spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # 省略
-
-# 自动分片表配置
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.actual-data-sources= # 数据源名
-
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-column= # 分片列名称
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-algorithm-name= # 自动分片算法名称
-
-# 分布式序列策略配置
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称
-
-# 分片审计策略配置
-spring.shardingsphere.rules.sharding.tables.<table-name>.audit-strategy.auditor-names= # 分片审计算法名称
-spring.shardingsphere.rules.sharding.tables.<table-name>.audit-strategy.allow-hint-disable= # 是否禁用分片审计hint
-
-spring.shardingsphere.rules.sharding.binding-tables[0]= # 绑定表规则列表
-spring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表规则列表
-spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表
-
-spring.shardingsphere.rules.sharding.broadcast-tables[0]= # 广播表规则列表
-spring.shardingsphere.rules.sharding.broadcast-tables[1]= # 广播表规则列表
-spring.shardingsphere.rules.sharding.broadcast-tables[x]= # 广播表规则列表
-
-spring.shardingsphere.rules.sharding.default-database-strategy.xxx= # 默认数据库分片策略
-spring.shardingsphere.rules.sharding.default-table-strategy.xxx= # 默认表分片策略
-spring.shardingsphere.rules.sharding.default-key-generate-strategy.xxx= # 默认分布式序列策略
-spring.shardingsphere.rules.sharding.default-sharding-column= # 默认分片列名称
-
-# 分片算法配置
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx= # 分片算法属性配置
-
-# 分布式序列算法配置
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置
-
-# 分片审计算法配置
-spring.shardingsphere.rules.sharding.auditors.<sharding-audit-algorithm-name>.type= # 分片审计算法类型
-spring.shardingsphere.rules.sharding.auditors.<sharding-audit-algorithm-name>.props.xxx= # 分片审计算法属性配置
-```
-
-算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/common-config/builtin-algorithm/sharding)和[内置分布式序列算法列表](/cn/user-manual/common-config/builtin-algorithm/keygen)。
-
-> 注意事项：行表达式标识符可以使用 `${...}` 或 `$->{...}`，但前者与 Spring 本身的属性文件占位符冲突，因此在 Spring 环境中使用行表达式标识符建议使用 `$->{...}`。
-
-## 操作步骤
-
-1. 在 SpringBoot 文件中配置数据分片规则，包含数据源、分片规则、全局属性等配置项；
-2. 启动 SpringBoot 程序，会自动加载配置，并初始化 ShardingSphereDataSource。
-
-## 配置示例
-
-```properties
-spring.shardingsphere.mode.type=Standalone
-spring.shardingsphere.mode.repository.type=JDBC
-
-spring.shardingsphere.datasource.names=ds-0,ds-1
-
-spring.shardingsphere.datasource.ds-0.jdbc-url=jdbc:mysql://localhost:3306/demo_ds_0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
-spring.shardingsphere.datasource.ds-0.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds-0.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds-0.username=root
-spring.shardingsphere.datasource.ds-0.password=
-
-spring.shardingsphere.datasource.ds-1.jdbc-url=jdbc:mysql://localhost:3306/demo_ds_1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
-spring.shardingsphere.datasource.ds-1.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds-1.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds-1.username=root
-spring.shardingsphere.datasource.ds-1.password=
-
-spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=user_id
-spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=database-inline
-spring.shardingsphere.rules.sharding.binding-tables[0]=t_order,t_order_item
-spring.shardingsphere.rules.sharding.broadcast-tables=t_address
-
-spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds-$->{0..1}.t_order_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=t-order-inline
-
-spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=snowflake
-spring.shardingsphere.rules.sharding.tables.t_order.audit-strategy.auditor-names=shardingKeyAudit
-spring.shardingsphere.rules.sharding.tables.t_order.audit-strategy.allow-hint-disable=true
-
-spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes=ds-$->{0..1}.t_order_item_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name=t-order-item-inline
-
-spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.column=order_item_id
-spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.key-generator-name=snowflake
-
-spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=ds-$->{user_id % 2}
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.algorithm-expression=t_order_$->{order_id % 2}
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-item-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-item-inline.props.algorithm-expression=t_order_item_$->{order_id % 2}
-
-spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
-spring.shardingsphere.rules.sharding.auditors.shardingKeyAudit.type=DML_SHARDING_CONDITIONS
-```
-
-## 相关参考
-
-- [核心特性：数据分片](/cn/features/sharding/)
-- [开发者指南：数据分片](/cn/dev-manual/sharding/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.en.md
deleted file mode 100644
index 77c3ee3f023..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.en.md
+++ /dev/null
@@ -1,138 +0,0 @@
-+++
-title = "Sharding"
-weight = 1
-+++
-
-## Background
-
-SpringBoot Starter's data sharding configuration applies to business scenarios that use SpringBoot, which can maximize SpringBoot's capabilities, such as configuration initialization and Bean management. It can complete the creation of the ShardingSphereDataSource object and reduce unnecessary coding.
-
-## Parameters
-
-```properties
-spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage
-
-# Standard sharding table configuration
-spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes= # Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only.
-
-# Databases sharding strategy, use default databases sharding strategy if absent. sharding strategy below can choose only one.
-
-# For single sharding column scenario
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-column= # Sharding column name
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name= # Sharding algorithm name
-
-# For multiple sharding columns scenario
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-columns= # Sharding column names, multiple columns separated with comma
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-algorithm-name= # Sharding algorithm name
-
-# Sharding by hint
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.sharding-algorithm-name= # Sharding algorithm name
-
-# Tables sharding strategy, same as database sharding strategy
-spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # Omitted
-
-# Auto sharding table configuraiton
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.actual-data-sources= # data source names
-
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-column= # Sharding column name
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-algorithm-name= # Auto sharding algorithm name
-
-# Key generator strategy configuration
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # Column name of key generator
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # Key generator name
-
-# Sharding auditor strategy configuration
-spring.shardingsphere.rules.sharding.tables.<table-name>.audit-strategy.auditor-names= # Sharding auditor name
-spring.shardingsphere.rules.sharding.tables.<table-name>.audit-strategy.allow-hint-disable= # Enable or disable sharding audit hint
-
-spring.shardingsphere.rules.sharding.binding-tables[0]= # Binding table name
-spring.shardingsphere.rules.sharding.binding-tables[1]= # Binding table name
-spring.shardingsphere.rules.sharding.binding-tables[x]= # Binding table name
-
-spring.shardingsphere.rules.sharding.broadcast-tables[0]= # Broadcast tables
-spring.shardingsphere.rules.sharding.broadcast-tables[1]= # Broadcast tables
-spring.shardingsphere.rules.sharding.broadcast-tables[x]= # Broadcast tables
-
-spring.shardingsphere.rules.sharding.default-database-strategy.xxx= # Default strategy for database sharding
-spring.shardingsphere.rules.sharding.default-table-strategy.xxx= # Default strategy for table sharding
-spring.shardingsphere.rules.sharding.default-key-generate-strategy.xxx= # Default Key generator strategy
-spring.shardingsphere.rules.sharding.default-sharding-column= # Default sharding column name
-
-# Sharding algorithm configuration
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # Sharding algorithm type
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx=# Sharding algorithm properties
-
-# Key generate algorithm configuration
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # Key generate algorithm type
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # Key generate algorithm properties
-
-# Sharding audit algorithm configuration
-spring.shardingsphere.rules.sharding.auditors.<sharding-audit-algorithm-name>.type= # Sharing audit algorithm type
-spring.shardingsphere.rules.sharding.auditors.<sharding-audit-algorithm-name>.props.xxx= # Sharding audit algorithm properties
-```
-
-Please refer to [Built-in Sharding Algorithm List](/en/user-manual/common-config/builtin-algorithm/sharding) and [Built-in Key Generate Algorithm List](/en/user-manual/common-config/builtin-algorithm/keygen) for more details about type of algorithm.
-
-> Attention: Inline expression identifier can use `${...}` or `$->{...}`, but `${...}` is conflict with spring placeholder of properties, so use `$->{...}` on spring environment is better.
-
-## Procedure
-
-1. Configure data sharding rules in the SpringBoot file, including data sources, sharding rules, and global attributes.
-2. Start the SpringBoot program. The configuration is automatically loaded and the ShardingSphereDataSource is initialized.
-
-## Sample
-
-```properties
-spring.shardingsphere.mode.type=Standalone
-spring.shardingsphere.mode.repository.type=JDBC
-
-spring.shardingsphere.datasource.names=ds-0,ds-1
-
-spring.shardingsphere.datasource.ds-0.jdbc-url=jdbc:mysql://localhost:3306/demo_ds_0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
-spring.shardingsphere.datasource.ds-0.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds-0.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds-0.username=root
-spring.shardingsphere.datasource.ds-0.password=
-
-spring.shardingsphere.datasource.ds-1.jdbc-url=jdbc:mysql://localhost:3306/demo_ds_1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
-spring.shardingsphere.datasource.ds-1.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds-1.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds-1.username=root
-spring.shardingsphere.datasource.ds-1.password=
-
-spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=user_id
-spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=database-inline
-spring.shardingsphere.rules.sharding.binding-tables[0]=t_order,t_order_item
-spring.shardingsphere.rules.sharding.broadcast-tables=t_address
-
-spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds-$->{0..1}.t_order_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=t-order-inline
-
-spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=snowflake
-spring.shardingsphere.rules.sharding.tables.t_order.audit-strategy.auditor-names=shardingKeyAudit
-spring.shardingsphere.rules.sharding.tables.t_order.audit-strategy.allow-hint-disable=true
-
-spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes=ds-$->{0..1}.t_order_item_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name=t-order-item-inline
-
-spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.column=order_item_id
-spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.key-generator-name=snowflake
-
-spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=ds-$->{user_id % 2}
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.algorithm-expression=t_order_$->{order_id % 2}
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-item-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-item-inline.props.algorithm-expression=t_order_item_$->{order_id % 2}
-
-spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
-spring.shardingsphere.rules.sharding.auditors.shardingKeyAudit.type=DML_SHARDING_CONDITIONS
-```
-
-## Related References
-
-- [Core Feature: Data Sharding](/en/features/sharding/)
-- [Developer Guide: Data Sharding](/en/dev-manual/sharding/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sql-parser.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sql-parser.cn.md
deleted file mode 100644
index 5dd8ed9acc5..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sql-parser.cn.md
+++ /dev/null
@@ -1,39 +0,0 @@
-+++
-title = "SQL 解析"
-weight = 6
-+++
-
-## 背景信息
-Spring Boot Starter 的配置方式适用于使用 SpringBoot 的业务场景。使用这种方式，能够最大程度地利用 SpringBoot 配置初始化以及 Bean 管理的能力，从而达到简化代码开发的目的。
-
-## 参数解释
-```properties
-spring.shardingsphere.rules.sql-parser.sql-comment-parse-enabled= # 是否解析 SQL 注释
-
-spring.shardingsphere.rules.sql-parser.sql-statement-cache.initial-capacity= # SQL 语句本地缓存初始容量
-spring.shardingsphere.rules.sql-parser.sql-statement-cache.maximum-size= # SQL 语句本地缓存最大容量
-
-spring.shardingsphere.rules.sql-parser.parse-tree-cache.initial-capacity= # 解析树本地缓存初始容量
-spring.shardingsphere.rules.sql-parser.parse-tree-cache.maximum-size= # 解析树本地缓存最大容量
-```
-
-## 操作步骤
-1. 设置本地缓存配置
-2. 设置解析配置
-3. 使用解析引擎解析 SQL
-
-## 配置示例
-```properties
-spring.shardingsphere.rules.sql-parser.sql-comment-parse-enabled=true
-
-spring.shardingsphere.rules.sql-parser.sql-statement-cache.initial-capacity=2000
-spring.shardingsphere.rules.sql-parser.sql-statement-cache.maximum-size=65535
-
-spring.shardingsphere.rules.sql-parser.parse-tree-cache.initial-capacity=128
-spring.shardingsphere.rules.sql-parser.parse-tree-cache.maximum-size=1024
-```
-
-## 相关参考
-- [JAVA API：SQL 解析](/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-parser/)
-- [YAML 配置：SQL 解析](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-parser/)
-- [Spring 命名空间：SQl解析](/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sql-parser.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sql-parser.en.md
deleted file mode 100644
index 4c0701b4aa7..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sql-parser.en.md
+++ /dev/null
@@ -1,39 +0,0 @@
-+++
-title = "SQL Parser"
-weight = 6
-+++
-
-## Background
-The configuration method of Spring Boot Starter is applicable to business scenarios using SpringBoot. In this way, the SpringBoot configuration initialization and bean management capabilities can be used to the greatest extent, so as to simplify code development.
-
-## Parameters
-```properties
-spring.shardingsphere.rules.sql-parser.sql-comment-parse-enabled= # Whether to parse SQL comments
-
-spring.shardingsphere.rules.sql-parser.sql-statement-cache.initial-capacity= # Initial capacity of SQL statement local cache
-spring.shardingsphere.rules.sql-parser.sql-statement-cache.maximum-size= # Maximum capacity of SQL statement local cache
-
-spring.shardingsphere.rules.sql-parser.parse-tree-cache.initial-capacity= # Initial capacity of parse tree local cache
-spring.shardingsphere.rules.sql-parser.parse-tree-cache.maximum-size= # Maximum local cache capacity of parse tree
-```
-
-## Procedure
-1. Set local cache configuration
-2. Set parser configuration
-3. use the parser engine to parse SQL
-
-## Sample
-```properties
-spring.shardingsphere.rules.sql-parser.sql-comment-parse-enabled=true
-
-spring.shardingsphere.rules.sql-parser.sql-statement-cache.initial-capacity=2000
-spring.shardingsphere.rules.sql-parser.sql-statement-cache.maximum-size=65535
-
-spring.shardingsphere.rules.sql-parser.parse-tree-cache.initial-capacity=128
-spring.shardingsphere.rules.sql-parser.parse-tree-cache.maximum-size=1024
-```
-
-## Related References
-- [JAVA API: SQL Parser](/en/user-manual/shardingsphere-jdbc/java-api/rules/sql-parser/)
-- [YAML Configuration: SQL Parser](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-parser/)
-- [Spring Namespace: SQL Parser](/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/_index.cn.md
index a1deb477d97..4343cd09277 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/_index.cn.md
@@ -6,7 +6,7 @@ chapter = true
 
 ## 简介
 
-ShardingSphere-JDBC 提供官方的 Spring 命名空间，使开发者可以非常便捷的整合 ShardingSphere-JDBC 和 Spring。
+ShardingSphere 提供 JDBC 驱动，开发者可以在 Spring 中配置 `ShardingSphereDriver` 来使用 ShardingSphere。
 
 ## 使用步骤
 
@@ -15,45 +15,45 @@ ShardingSphere-JDBC 提供官方的 Spring 命名空间，使开发者可以非
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
+    <artifactId>shardingsphere-jdbc-core</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
 
 ### 配置 Spring Bean
 
+
 #### 配置项说明
 
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.2.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.2.1.xsd)
+| *名称*             | *类型*    | *说明*                                              |
+|-------------------|----------|-----------------------------------------------------|
+| driverClass       | 属性      | 数据库 Driver，这里需要指定使用 ShardingSphereDriver    |
+| url               | 属性      | YAML 配置文件路径                                     |
+
+#### 驱动类名称
+
+`org.apache.shardingsphere.driver.ShardingSphereDriver`
 
-\<shardingsphere:data-source />
+#### URL 配置说明
 
-| *名称*             | *类型* | *说明*                                                                            |
-| ----------------- | ----- | --------------------------------------------------------------------------------- |
-| id                | 属性  | Spring Bean Id                                                                     |
-| database-name (?)   | 属性  | JDBC 数据源别名                                                                      |
-| data-source-names | 标签  | 数据源名称，多个数据源以逗号分隔                                                         |
-| rule-refs         | 标签  | 规则名称，多个规则以逗号分隔                                                            |
-| mode (?)          | 标签  | 运行模式配置                                                                         |
-| props (?)         | 标签  | 属性配置，详情请参见[属性配置](/cn/user-manual/shardingsphere-jdbc/props) |
+- 以 `jdbc:shardingsphere:` 为前缀
+- 配置文件：`xxx.yaml`，配置文件格式与 [YAML 配置](/cn/user-manual/shardingsphere-jdbc/yaml-config)一致
+- 配置文件加载规则：
+  - 无前缀表示从指定路径加载配置文件
+  -  `classpath:` 前缀表示从类路径中加载配置文件
 
 #### 配置示例
 
 ```xml
 <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
        xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                           http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           ">
-    <shardingsphere:data-source id="ds" database-name="foo_schema" data-source-names="..." rule-refs="...">
-        <shardingsphere:mode type="..." />
-        <props>
-            <prop key="xxx.xxx">${xxx.xxx}</prop>
-        </props>
-    </shardingsphere:data-source>
+                           http://www.springframework.org/schema/beans/spring-beans.xsd">
+    
+    <bean id="shardingDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
+        <property name="driverClass" value="org.apache.shardingsphere.driver.ShardingSphereDriver" />
+        <property name="url" value="jdbc:shardingsphere:classpath:xxx.yaml" />
+    </bean>
 </beans>
 ```
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/_index.en.md
index dfd3864008b..c07185a7b40 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/_index.en.md
@@ -6,7 +6,7 @@ chapter = true
 
 ## Overview
 
-ShardingSphere-JDBC provides official Spring Namespace to make convenient for developers to integrate ShardingSphere-JDBC and Spring.
+ShardingSphere provides a JDBC driver, and developers can configure `ShardingSphereDriver` in Spring to use ShardingSphere.
 
 ## Usage
 
@@ -15,45 +15,45 @@ ShardingSphere-JDBC provides official Spring Namespace to make convenient for de
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
+    <artifactId>shardingsphere-jdbc-core</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
 
 ### Configure Spring Bean
 
+
 #### Configuration Item Explanation
 
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.2.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.2.1.xsd)
+| *Name*            | *Type*      | *Description*                                     |
+|-------------------|-------------|---------------------------------------------------|
+| driverClass       | Attribute   | Database Driver, need to use ShardingSphereDriver |
+| url               | Attribute   | YAML configuration file path                      |
+
+#### Driver Class Name
+
+`org.apache.shardingsphere.driver.ShardingSphereDriver`
 
-\<shardingsphere:data-source />
+#### URL Configuration Instructions
 
-| *Name*            | *Type*    | *Description*                                                                                                                                  |
-| ----------------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |
-| id                | Attribute | Spring Bean Id                                                                                                                                 |
-| database-name (?)   | Attribute | JDBC data source alias                                                                                                                         |
-| data-source-names | Attribute | Data source name, multiple data source names are separated by commas                                                                           |
-| rule-refs         | Attribute | Rule name, multiple rule names are separated by commas                                                                                         |
-| mode (?)          | Tag       | Mode configuration                                                                                                                             |
-| props (?)         | Tag       | Properties configuration, Please refer to [Properties Configuration](/en/user-manual/shardingsphere-jdbc/props) for more details |
+- Prefixed with `jdbc:shardingsphere:`
+- Configuration file: `xxx.yaml`, the configuration file format is consistent with [YAML Configuration](/en/user-manual/shardingsphere-jdbc/yaml-config)
+- Configuration file loading rules:
+  - No prefix means to load the configuration file from the specified path
+  - The `classpath:` prefix means to load configuration files from the classpath
 
 #### Example
 
 ```xml
 <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
        xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                           http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           ">
-    <shardingsphere:data-source id="ds" database-name="foo_schema" data-source-names="..." rule-refs="...">
-        <shardingsphere:mode type="..." />
-        <props>
-            <prop key="xxx.xxx">${xxx.xxx}</prop>
-        </props>
-    </shardingsphere:data-source>
+                           http://www.springframework.org/schema/beans/spring-beans.xsd">
+    
+    <bean id="shardingDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
+        <property name="driverClass" value="org.apache.shardingsphere.driver.ShardingSphereDriver" />
+        <property name="url" value="jdbc:shardingsphere:classpath:xxx.yaml" />
+    </bean>
 </beans>
 ```
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/algorithm.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/algorithm.cn.md
deleted file mode 100644
index d05512b51bd..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/algorithm.cn.md
+++ /dev/null
@@ -1,63 +0,0 @@
-+++
-title = "算法配置"
-weight = 4
-+++
-
-## 分片算法
-
-```xml
-<!-- algorithmName 由用户指定，需要和分片策略中的 algorithm-ref 属性一致 -->
-<!-- type 和 props，请参考分片内置算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/sharding/ -->
-<sharding:sharding-algorithm id="algorithmName" type="xxx">
-    <props>
-        <prop key="xxx">xxx</prop>
-    </props>
-</sharding:sharding-algorithm>
-```
-
-## 加密算法
-
-```xml
-<!-- encryptorName 由用户指定，需要和加密规则中的 encrypt-algorithm-ref 属性一致 -->
-<!-- type 和 props，请参考加密内置算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/encrypt/ -->
-<encrypt:encrypt-algorithm id="encryptorName" type="xxx">
-    <props>
-        <prop key="xxx">xxx</prop>
-    </props>
-</encrypt:encrypt-algorithm>
-```
-
-## 读写分离负载均衡算法
-
-```xml
-<!-- loadBalancerName 由用户指定，需要和读写分离规则中的 load-balance-algorithm-ref 属性一致 -->  
-<!-- type 和 props，请参考读写分离负载均衡内置算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/load-balance/ -->
-<readwrite-splitting:load-balance-algorithm id="loadBalancerName" type="xxx">
-    <props>
-        <prop key="xxx">xxx</prop>
-    </props>
-</readwrite-splitting:load-balance-algorithm>
-```
-
-## 影子算法
-
-```xml
-<!-- shadowAlgorithmName 由用户指定，需要和影子库则中的 shadow-algorithm-ref 属性一致 -->  
-<!-- type 和 props，请参考影子库内置算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/shadow/ -->
-<shadow:shadow-algorithm id="shadowAlgorithmName" type="xxx">
-    <props>
-        <prop key="xxx">xxx</prop>
-    </props>
-</shadow:shadow-algorithm>
-```
-
-## 高可用
-
-```xml
-<!-- discoveryTypeName 由用户指定，需要和数据库发现规则中的 discovery-type-name 属性一致 -->  
-<database-discovery:discovery-type id="discoveryTypeName" type="xxx">
-    <props>
-        <prop key="xxx">xxx</prop>
-    </props>
-</database-discovery:discovery-type>
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/algorithm.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/algorithm.en.md
deleted file mode 100644
index 0da101a1b2f..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/algorithm.en.md
+++ /dev/null
@@ -1,63 +0,0 @@
-+++
-title = "Algorithm"
-weight = 4
-+++
-
-## Sharding
-
-```xml
-<!-- algorithmName is specified by users and its property should be consistent with that of algorithm-ref in the sharding strategy. -->
-<!-- type and props, please refer to the built-in sharding algorithm: https://shardingsphere.apache.org/document/current/en/user-manual/common-config/builtin-algorithm/sharding/ -->
-<sharding:sharding-algorithm id="algorithmName" type="xxx">
-    <props>
-        <prop key="xxx">xxx</prop>
-    </props>
-</sharding:sharding-algorithm>
-```
-
-## Encryption
-
-```xml
-<!-- encryptorName is specified by users, and its property should be consistent with that of encrypt-algorithm-ref in encryption rules. -->
-<!-- type and props, please refer to the built-in encryption algorithm: https://shardingsphere.apache.org/document/current/en/user-manual/common-config/builtin-algorithm/encrypt/ -->
-<encrypt:encrypt-algorithm id="encryptorName" type="xxx">
-    <props>
-        <prop key="xxx">xxx</prop>
-    </props>
-</encrypt:encrypt-algorithm>
-```
-
-## Read/Write Splitting Load Balancer
-
-```xml
-<!-- loadBalancerName is specified by users, and its property has to be consistent with that of load-balance-algorithm-ref in read/write splitting rules. -->  
-<!-- type and props, please refer to the built-in read/write splitting algorithm load balancer: https://shardingsphere.apache.org/document/current/en/user-manual/common-config/builtin-algorithm/load-balance/ -->
-<readwrite-splitting:load-balance-algorithm id="loadBalancerName" type="xxx">
-    <props>
-        <prop key="xxx">xxx</prop>
-    </props>
-</readwrite-splitting:load-balance-algorithm>
-```
-
-## Shadow DB
-
-```xml
-<!-- shadowAlgorithmName is specified by users, and its property has to be consistent with that of shadow-algorithm-ref in shadow DB rules. -->  
-<!-- type and props, please refer to the built-in shadow DB algorithm: https://shardingsphere.apache.org/document/current/en/user-manual/common-config/builtin-algorithm/shadow/ -->
-<shadow:shadow-algorithm id="shadowAlgorithmName" type="xxx">
-    <props>
-        <prop key="xxx">xxx</prop>
-    </props>
-</shadow:shadow-algorithm>
-```
-
-## High Availability
-
-```xml
-<!-- discoveryTypeName is specified by users, and its property has to be consistent with that of discovery-type-name in database discovery rules. -->  
-<database-discovery:discovery-type id="discoveryTypeName" type="xxx">
-    <props>
-        <prop key="xxx">xxx</prop>
-    </props>
-</database-discovery:discovery-type>
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.cn.md
deleted file mode 100644
index 184f5023b6b..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.cn.md
+++ /dev/null
@@ -1,55 +0,0 @@
-+++
-title = "数据源配置"
-weight = 2
-chapter = true
-+++
-
-## 背景信息
-
-任何配置成为 Spring Bean 的数据源对象即可与 ShardingSphere-JDBC 的 Spring 命名空间配合使用。
-
-配置示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。
-当使用 ShardingSphere JDBC 时，JDBC 池的属性名取决于各自 JDBC 池自己的定义，并不由 ShardingSphere 硬定义，相关的处理可以参考类`org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`。例如对于 Alibaba Druid 1.2.9 而言，使用`url`代替如下示例中的`jdbcUrl`是预期行为。
-
-## 操作步骤
-
-### 1. 引入 MAVEN 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-> 注意：请将 `${latest.release.version}` 更改为实际的版本号。
-
-## 配置示例
-
-```xml
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                           http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           ">
-    <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds1" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds2" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <shardingsphere:data-source id="ds" database-name="foo_schema" data-source-names="ds1,ds2" rule-refs="..." />
-</beans>
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.en.md
deleted file mode 100644
index 0637b2e633b..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.en.md
+++ /dev/null
@@ -1,41 +0,0 @@
-+++
-title = "Data Source"
-weight = 2
-chapter = true
-+++
-
-## Background
-
-Any data source object configured as Spring bean can be used with the Spring namespace of ShardingSphere-JDBC Data Planning.
-
-The database driver in the example is MySQL and the connection pool is HikariCP, both of which can be replaced by other database drivers and connection pools.
-When using ShardingSphere JDBC, the property names of the JDBC pools depend on the definition of JDBC pools themselves respectively, rather than being rigidly defined by ShardingSphere. For relevant processing, you can see reference class `org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`. As for Alibaba Druid 1.2.9, using `url` instead of `jdbcUrl` as in the following example is the expected behavior.
-
-## Configuration Examples
-
-```xml
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                           http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           ">
-    <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds1" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds2" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <shardingsphere:data-source id="ds" database-name="foo_schema" data-source-names="ds1,ds2" rule-refs="..." />
-</beans>
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/mode.cn.md
deleted file mode 100644
index 4d0cc5c356d..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/mode.cn.md
+++ /dev/null
@@ -1,113 +0,0 @@
-+++
-title = "模式配置"
-weight = 1
-+++
-
-## 背景信息
-
-缺省配置为使用单机模式。
-
-## 参数解释
-
-### 单机模式
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository-5.1.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository-5.1.1.xsd)
-
-<standalone:repository />
-
-| *名称*     | *类型* | *说明*             |
-| --------- | ------ | ----------------- |
-| id        | 属性   | 持久化仓库 Bean 名称 |
-| type      | 属性   | 持久化仓库类型       |
-| props (?) | 标签   | 持久化仓库所需属性    |
-
-### 集群模式 (推荐)
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository-5.1.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository-5.1.1.xsd)
-
-<cluster:repository />
-
-| *名称*         | *类型* | *说明*             |
-| ------------- | ------ | ----------------- |
-| id            | 属性   | 持久化仓库 Bean 名称 |
-| type          | 属性   | 持久化仓库类型       |
-| namespace     | 属性   | 注册中心命名空间     |
-| server-lists  | 属性   | 注册中心连接地址     |
-| props (?)     | 标签   | 持久化仓库所需属性    |
-
-## 注意事项
-
-1. 生产环境建议使用集群模式部署。
-1. 集群模式部署推荐使用 `ZooKeeper` 注册中心。
-1. `ZooKeeper` 存在配置信息时，则以 `ZooKeeper` 中的配置为准。
-
-## 操作步骤
-
-引入 MAVEN 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-> 注意：请将 `${latest.release.version}` 更改为实际的版本号。
-
-## 配置示例
-
-### 单机模式
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:standalone="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                  http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository.xsd">
-    <standalone:repository id="standaloneRepository" type="JDBC">
-    </standalone:repository>
-
-    <shardingsphere:data-source id="ds" database-name="foo_db" data-source-names="..." rule-refs="..." >
-        <shardingsphere:mode type="Standalone" repository-ref="standaloneRepository" />
-    </shardingsphere:data-source>
-</beans>
-```
-
-### 集群模式
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:cluster="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository.xsd">
-    <cluster:repository id="clusterRepository" type="Zookeeper" namespace="regCenter" server-lists="localhost:3182">
-        <props>
-            <prop key="max-retries">3</prop>
-            <prop key="operation-timeout-milliseconds">1000</prop>
-        </props>
-    </cluster:repository>
-    
-    <shardingsphere:data-source id="ds" database-name="foo_db" data-source-names="..." rule-refs="...">
-        <shardingsphere:mode type="Cluster" repository-ref="clusterRepository" />
-    </shardingsphere:data-source>
-</beans>
-```
-
-## 相关参考
-
-- [ZooKeeper 注册中心安装与使用](https://zookeeper.apache.org/doc/r3.7.1/zookeeperStarted.html)
-- 持久化仓库类型的详情，请参见[内置持久化仓库类型列表](/cn/user-manual/common-config/builtin-algorithm/metadata-repository/)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/mode.en.md
deleted file mode 100644
index 36dbc8c5f7f..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/mode.en.md
+++ /dev/null
@@ -1,112 +0,0 @@
-+++
-title = "Mode"
-weight = 1
-+++
-
-## Background
-
-The default configuration uses standalone mode.
-
-## Parameters Explained
-
-### Standalone Mode
-
-Namespace:[http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository-5.1.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository-5.1.1.xsd)
-<standalone:repository />
-
-| *Name*    | *Type*   | *Description*                                 |
-| --------- | -------- | --------------------------------------------- |
-| id        | Property | Persistent repository Bean name               |
-| type      | Property | Persistent repository Type                    |
-| props (?) |Tag       | Properties required for persistent repository |
-
-### Cluster Mode(Recommended)
-
-Namespace：[http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository-5.1.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository-5.1.1.xsd)
-
-<cluster:repository />
-
-| *Name*        | *Type*   | *Description*                                 |
-| ------------- | -------- | --------------------------------------------- |
-| id            | Property | Persistent repository Bean name               |
-| type          | Property | Persistent repository Type                    |
-| namespace     | Property | Registry Center namespace                     |
-| server-lists  | Property | Registry Center Link                          |
-| props (?)     | Tag      | Properties required for persistent repository |
-
-## Tips:
-
-1. For production environments, it is recommended to use cluster mode deployment.
-1. The `ZooKeeper` registry center is recommended for cluster mode deployment.
-1. If there is configuration information in the `ZooKeeper`, please refer to the config information there.
-
-## Operating Procedures
-
-Introduce MAVEN dependency
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-> Note: Please change `${latest.release.version}` to the actual version number.
-
-## Configuration Example
-
-### Standalone Mode
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:standalone="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                  http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository.xsd">
-    <standalone:repository id="standaloneRepository" type="JDBC">
-    </standalone:repository>
-
-    <shardingsphere:data-source id="ds" database-name="foo_db" data-source-names="..." rule-refs="..." >
-        <shardingsphere:mode type="Standalone" repository-ref="standaloneRepository" />
-    </shardingsphere:data-source>
-</beans>
-``` 
-
-### Cluster Mode
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:cluster="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository.xsd">
-    <cluster:repository id="clusterRepository" type="Zookeeper" namespace="regCenter" server-lists="localhost:3182">
-        <props>
-            <prop key="max-retries">3</prop>
-            <prop key="operation-timeout-milliseconds">1000</prop>
-        </props>
-    </cluster:repository>
-    
-    <shardingsphere:data-source id="ds" database-name="foo_db" data-source-names="..." rule-refs="...">
-        <shardingsphere:mode type="Cluster" repository-ref="clusterRepository" />
-    </shardingsphere:data-source>
-</beans>
-``` 
-
-## Relevant References
-
-- [Installation and use of ZooKeeper Registry Center](https://zookeeper.apache.org/doc/r3.7.1/zookeeperStarted.html)
-- For details about persistent repository, please refer to [List of Built-in repository types](/cn/user-manual/common-config/builtin-algorithm/metadata-repository/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/_index.cn.md
deleted file mode 100644
index 3b131fed613..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/_index.cn.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "规则配置"
-weight = 3
-chapter = true
-+++
-
-规则是 Apache ShardingSphere 面向可插拔的一部分。
-本章节是 ShardingSphere-JDBC 的 Spring 命名空间规则配置参考手册。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/_index.en.md
deleted file mode 100644
index 9a000a6b7fe..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/_index.en.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "Rules"
-weight = 3
-chapter = true
-+++
-
-Rules are pluggable part of Apache ShardingSphere.
-This chapter is a Spring namespace rule configuration manual for ShardingSphere-JDBC.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/encrypt.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/encrypt.cn.md
deleted file mode 100644
index 2be7a90a79e..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/encrypt.cn.md
+++ /dev/null
@@ -1,130 +0,0 @@
-+++
-title = "数据加密"
-weight = 4
-+++
-
-## 背景信息
-
-数据加密 Spring 命名空间的配置方式，适用于传统的 Spring 项目，通过命名空间 xml 配置文件的方式配置分片规则和属性，由 Spring 完成 ShardingSphereDataSource 对象的创建和管理，避免额外的编码工作。
-
-## 参数解释
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.2.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.2.1.xsd)
-
-\<encrypt:rule />
-
-| *名称*                     | *类型* | *说明*                                               | *默认值* |
-| ---------------------------- | ----- | ------------------------------------------------------ | ------- |
-| id                           | 属性  | Spring Bean Id                                          |         |
-| query-with-cipher-column (?) | 属性  | 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询 | true    |
-| table (+)                    | 标签  | 加密表配置                                                |         |
-
-\<encrypt:table />
-
-| *名称*                       | *类型* | *说明*                                                     |
-| --------------------------- | ------ | --------------------------------------------------------- |
-| name                        | 属性    | 加密表名称                                                  |
-| column (+)                  | 标签    | 加密列配置                                                  |
-| query-with-cipher-column(?) | 属性    | 该表是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询 |
-
-\<encrypt:column />
-
-| *名称*                               | *类型* | *说明*                |
-| ------------------------------------ | ----- | -------------------- |
-| logic-column                         | 属性  | 加密列逻辑名称          |
-| cipher-column                        | 属性  | 加密列名称             |
-| assisted-query-column (?)            | 属性  | 查询辅助列名称          |
-| like-query-column (?)                | 属性  | 查询辅助列名称          |
-| plain-column (?)                     | 属性  | 原文列名称              |
-| encrypt-algorithm-ref                | 属性  | 密文列加密算法名称       |
-| assisted-query-encrypt-algorithm-ref | 属性  | 辅助查询列加密算法名称    |
-| like-query-encrypt-algorithm-ref     | 属性  | 模糊查询列加密算法名称    |
-| query-with-cipher-column(?)          | 属性  | 该列是否使用加密列进行查询 |
-
-\<encrypt:encrypt-algorithm />
-
-| *名称*    | *类型* | *说明*        |
-| --------- | ----- | ------------ |
-| id        | 属性  | 加密算法名称    |
-| type      | 属性  | 加密算法类型    |
-| props (?) | 标签  | 加密算法属性配置 |
-
-算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/common-config/builtin-algorithm/encrypt)。
-
-## 操作步骤
-
-1. 在 Spring 命名空间配置文件中配置数据加密规则，包含数据源、加密规则、全局属性等配置项；
-2. 启动 Spring 程序，会自动加载配置，并初始化 ShardingSphereDataSource。
-
-## 配置示例
-
-```xml
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:tx="http://www.springframework.org/schema/tx"
-       xmlns:encrypt="http://shardingsphere.apache.org/schema/shardingsphere/encrypt"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://www.springframework.org/schema/tx 
-                           http://www.springframework.org/schema/tx/spring-tx.xsd
-                           http://www.springframework.org/schema/context 
-                           http://www.springframework.org/schema/context/spring-context.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/encrypt
-                           http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd 
-                           ">
-    <context:component-scan base-package="org.apache.shardingsphere.example.core.mybatis" />
-    
-    <bean id="ds" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/demo_ds?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <encrypt:encrypt-algorithm id="name_encryptor" type="AES">
-        <props>
-            <prop key="aes-key-value">123456</prop>
-        </props>
-    </encrypt:encrypt-algorithm>
-    <encrypt:encrypt-algorithm id="pwd_encryptor" type="MD5" />
-    <encrypt:encrypt-algorithm id="pwd_assisted_encryptor" type="AES">
-        <props>
-            <prop key="aes-key-value">123456</prop>
-        </props>
-    </encrypt:encrypt-algorithm>
-    <encrypt:encrypt-algorithm id="like_query_encryptor" type="CHAR_DIGEST_LIKE" />
-    
-    <encrypt:rule id="encryptRule">
-        <encrypt:table name="t_user" query-with-cipher-column="false">
-            <encrypt:column logic-column="username" cipher-column="username" plain-column="username_plain" encrypt-algorithm-ref="name_encryptor" query-with-cipher-column="true"/>
-            <encrypt:column logic-column="pwd" cipher-column="pwd" assisted-query-column="assisted_query_pwd" like-query-column="like_query_pwd" encrypt-algorithm-ref="pwd_encryptor" assisted-query-encrypt-algorithm-ref="pwd_assisted_encryptor" like-query-encrypt-algorithm-ref="like_query_encryptor" query-with-cipher-column="true" />
-        </encrypt:table>
-    </encrypt:rule>
-    
-    <shardingsphere:data-source id="encryptDataSource" data-source-names="ds" rule-refs="encryptRule" />
-    
-    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
-        <property name="dataSource" ref="encryptDataSource" />
-    </bean>
-    <tx:annotation-driven />
-    
-    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
-        <property name="dataSource" ref="encryptDataSource"/>
-        <property name="mapperLocations" value="classpath*:META-INF/mappers/*.xml"/>
-    </bean>
-    
-    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
-        <property name="basePackage" value="org.apache.shardingsphere.example.core.mybatis.repository"/>
-        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
-    </bean>
-</beans>
-```
-
-## 相关参考
-
-- [核心特性：数据加密](/cn/features/encrypt/)
-- [开发者指南：数据加密](/cn/dev-manual/encrypt/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/encrypt.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/encrypt.en.md
deleted file mode 100644
index 247bedc0837..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/encrypt.en.md
+++ /dev/null
@@ -1,130 +0,0 @@
-+++
-title = "Encryption"
-weight = 4
-+++
-
-## Background
-
-Spring Namespace's data encryption configuration applies to the traditional Spring projects. Sharding rules and attributes are configured through the XML configuration file of the namespace. Spring creates and manages the ShardingSphereDataSource object, reducing unnecessary coding.
-
-## Parameters
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.2.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.2.1.xsd)
-
-\<encrypt:rule />
-
-| *Name*                    | *Type*    | *Description*                                                                                  | *Default Value* |
-| ------------------------- | --------- | ---------------------------------------------------------------------------------------------- | --------------- |
-| id                        | Attribute | Spring Bean Id                                                                                 |                 |
-| uery-with-cipher-column (?) | Attribute | Whether query with cipher column for data encrypt. User you can use plaintext to query if have | true            |
-| table (+)                 | Tag       | Encrypt table configuration                                                                    |                 |
-
-\<encrypt:table />
-
-| *Name*                          | *Type*    | *Description*                                                                                            |
-| ------------------------------- | --------- | -------------------------------------------------------------------------------------------------------- |
-| name                            | Attribute | Encrypt table name                                                                                       |
-| column (+)                      | Tag       | Encrypt column configuration                                                                             |
-| query-with-cipher-column(?) (?) | Attribute | Whether the table query with cipher column for data encrypt. User you can use plaintext to query if have |
-
-\<encrypt:column />
-
-| *Name*                               | *Type*    | *Description*                                                        |
-| ------------------------------------ | --------- | -------------------------------------------------------------------- |
-| logic-column                         | Attribute | Column logic name                                                    |
-| cipher-column                        | Attribute | Cipher column name                                                   |
-| assisted-query-column (?)            | Attribute | Assisted query column name                                           |
-| like-query-column (?)                | Attribute | Like query column name                                               |
-| plain-column (?)                     | Attribute | Plain column name                                                    |
-| encrypt-algorithm-ref                | Attribute | Cipher encrypt algorithm name                                        |
-| assisted-query-encrypt-algorithm-ref | Attribute | Assisted query encrypt algorithm name                                |
-| like-query-encrypt-algorithm-ref     | Attribute | Like query encrypt algorithm name                                    |
-| query-with-cipher-column(?)          | Attribute | The current column whether query with cipher column for data encrypt |
-
-\<encrypt:encrypt-algorithm />
-
-| *Name*    | *Type*     | *Description*                |
-| --------- | ---------- | ---------------------------- |
-| id        | Attribute  | Encrypt algorithm name       |
-| type      | Attribute  | Encrypt algorithm type       |
-| props (?) | Tag        | Encrypt algorithm properties |
-
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/common-config/builtin-algorithm/encrypt) for more details about type of algorithm.
-
-## Procedure 
-
-1. Configure data encryption rules in the Spring namespace configuration file, including data sources, encryption rules, and global attributes.
-2. Start the Spring program, and it will automatically load the configuration and initialize the ShardingSphereDataSource.
-
-## Sample
-
-```xml
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:tx="http://www.springframework.org/schema/tx"
-       xmlns:encrypt="http://shardingsphere.apache.org/schema/shardingsphere/encrypt"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://www.springframework.org/schema/tx 
-                           http://www.springframework.org/schema/tx/spring-tx.xsd
-                           http://www.springframework.org/schema/context 
-                           http://www.springframework.org/schema/context/spring-context.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/encrypt
-                           http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd 
-                           ">
-    <context:component-scan base-package="org.apache.shardingsphere.example.core.mybatis" />
-    
-    <bean id="ds" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/demo_ds?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <encrypt:encrypt-algorithm id="name_encryptor" type="AES">
-        <props>
-            <prop key="aes-key-value">123456</prop>
-        </props>
-    </encrypt:encrypt-algorithm>
-    <encrypt:encrypt-algorithm id="pwd_encryptor" type="MD5" />
-    <encrypt:encrypt-algorithm id="pwd_assisted_encryptor" type="AES">
-        <props>
-            <prop key="aes-key-value">123456</prop>
-        </props>
-    </encrypt:encrypt-algorithm>
-    <encrypt:encrypt-algorithm id="like_query_encryptor" type="CHAR_DIGEST_LIKE" />
-    
-    <encrypt:rule id="encryptRule">
-        <encrypt:table name="t_user" query-with-cipher-column="false">
-            <encrypt:column logic-column="username" cipher-column="username" plain-column="username_plain" encrypt-algorithm-ref="name_encryptor" query-with-cipher-column="true"/>
-            <encrypt:column logic-column="pwd" cipher-column="pwd" assisted-query-column="assisted_query_pwd" like-query-column="like_query_pwd" encrypt-algorithm-ref="pwd_encryptor" assisted-query-encrypt-algorithm-ref="pwd_assisted_encryptor" like-query-encrypt-algorithm-ref="like_query_encryptor" query-with-cipher-column="true" />
-        </encrypt:table>
-    </encrypt:rule>
-    
-    <shardingsphere:data-source id="encryptDataSource" data-source-names="ds" rule-refs="encryptRule" />
-    
-    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
-        <property name="dataSource" ref="encryptDataSource" />
-    </bean>
-    <tx:annotation-driven />
-    
-    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
-        <property name="dataSource" ref="encryptDataSource"/>
-        <property name="mapperLocations" value="classpath*:META-INF/mappers/*.xml"/>
-    </bean>
-    
-    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
-        <property name="basePackage" value="org.apache.shardingsphere.example.core.mybatis.repository"/>
-        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
-    </bean>
-</beans>
-```
-
-## Related References
-
-- [Core Feature: Data Encryption](/en/features/encrypt/)
-- [Developer Guide: Data Encryption](/en/dev-manual/encrypt/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/ha.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/ha.cn.md
deleted file mode 100644
index 51809936e67..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/ha.cn.md
+++ /dev/null
@@ -1,131 +0,0 @@
-+++
-title = "高可用"
-weight = 3
-+++
-
-## 背景信息
-
-`Spring 命名空间` 的配置方式，适用于传统的 Spring 项目，通过命名空间 `xml` 配置文件的方式配置高可用规则，由 Spring 完成 `ShardingSphereDataSource` 对象的创建和管理。
-
-## 参数解释
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/database-discovery/database-discovery-5.1.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/database-discovery/database-discovery-5.1.1.xsd)
-
-\<database-discovery:rule />
-
-| *名称*                  | *类型* | *说明*               |
-| ----------------------- | ------ | ------------------ |
-| id                      | 属性   | Spring Bean Id      |
-| data-source-rule (+)    | 标签   | 数据源规则配置        |
-| discovery-heartbeat (+) | 标签   | 检测心跳规则配置       |
-
-\<database-discovery:data-source-rule />
-
-| *名称*                       | *类型* | *说明*                                      |
-| --------------------------- | ----- | ------------------------------------------ |
-| id                          | 属性  | 数据源规则名称                                |
-| data-source-names           | 属性  | 数据源名称，多个数据源用逗号分隔 如：ds_0, ds_1  |
-| discovery-heartbeat-name    | 属性  | 检测心跳名称                                 |
-| discovery-type-name         | 属性  | 数据库发现类型名称                               |
-
-\<database-discovery:discovery-heartbeat />
-
-| *名称*                       | *类型* | *说明*                                      |
-| --------------------------- | ----- | ------------------------------------------  |
-| id                          | 属性  | 监听心跳名称                                  |
-| props                       | 标签  | 监听心跳属性配置，keep-alive-cron 属性配置 cron 表达式，如：'0/5 * * * * ?'  |
-
-\<database-discovery:discovery-type />
-
-| *名称*     | *类型* | *说明*                                    |
-| --------- | ----- | ----------------------------------------- |
-| id        | 属性  | 数据库发现类型名称                               |
-| type      | 属性  | 数据库发现类型，如：MySQL.MGR               |
-| props (?) | 标签  | 数据库发现类型配置，如 MGR 的 group-name 属性配置   |
-
-## 操作步骤
-
-### 1. 引入 MAVEN 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-``` 
-
-## 配置示例
-
-```xml  
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:cluster="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:database-discovery="http://shardingsphere.apache.org/schema/shardingsphere/database-discovery"
-       xmlns:readwrite-splitting="http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/database-discovery
-                           http://shardingsphere.apache.org/schema/shardingsphere/database-discovery/database-discovery.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting
-                           http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           ">
-    <bean id="ds_0" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:33306/primary_demo_ds?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    <bean id="ds_1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:33307/primary_demo_ds?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    <bean id="ds_2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:33308/primary_demo_ds?useSSL=false"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    <cluster:repository id="clusterRepository" type="ZooKeeper" namespace="governance" server-lists="localhost:2181">
-        <props>
-            <prop key="max-retries">3</prop>
-            <prop key="operation-timeout-milliseconds">3000</prop>
-        </props>
-    </cluster:repository>
-    <readwrite-splitting:rule id="readWriteSplittingRule">
-        <readwrite-splitting:data-source-rule id="replica_ds">
-            <readwrite-splitting:dynamic-strategy id="dynamicStrategy" auto-aware-data-source-name="readwrite_ds" />
-        </readwrite-splitting:data-source-rule>
-    </readwrite-splitting:rule>
-    <database-discovery:rule id="mgrDatabaseDiscoveryRule">
-        <database-discovery:data-source-rule id="readwrite_ds" data-source-names="ds_0,ds_1,ds_2" discovery-heartbeat-name="mgr-heartbeat" discovery-type-name="mgr" />
-        <database-discovery:discovery-heartbeat id="mgr-heartbeat">
-            <props>
-                <prop key="keep-alive-cron" >0/5 * * * * ?</prop>
-            </props>
-        </database-discovery:discovery-heartbeat>
-    </database-discovery:rule>
-    <database-discovery:discovery-type id="mgr" type="MySQL.MGR">
-        <props>
-            <prop key="group-name">558edd3c-02ec-11ea-9bb3-080027e39bd2</prop>
-        </props>
-    </database-discovery:discovery-type>
-    <shardingsphere:data-source id="databaseDiscoveryDataSource" schema-name="database-discovery-db" data-source-names="ds_0, ds_1, ds_2" rule-refs="readWriteSplittingRule, mgrDatabaseDiscoveryRule">
-    <shardingsphere:mode repository-ref="clusterRepository" type="Cluster" />
-    </shardingsphere:data-source>
-</beans>
-```
-
-## 相关参考
-
-- [高可用核心特性](/cn/features/ha/)
-- [JAVA API：高可用配置](/cn/user-manual/shardingsphere-jdbc/java-api/rules/ha/)
-- [YAML 配置：高可用配置](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/ha/)
-- [Spring Boot Starter：高可用配置](/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha/)
\ No newline at end of file
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/ha.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/ha.en.md
deleted file mode 100644
index 0499fc30085..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/ha.en.md
+++ /dev/null
@@ -1,131 +0,0 @@
-+++
-title = "HA"
-weight = 3
-+++
-
-## Background
-
-The Spring namespace configuration method, applicable to traditional Spring projects, configures highly availability rules by means of namespace XML configuration files, and Spring completes the creation and management of ShardingSphereDataSource objects.
-
-## Parameters Explained
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/database-discovery/database-discovery-5.1.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/database-discovery/database-discovery-5.1.1.xsd)
-
-\<database-discovery:rule />
-
-| *Name*                  | *Type* | *Description*               |
-| ----------------------- | ------ | ------------------ |
-| id                      | Property   | Spring Bean Id      |
-| data-source-rule (+)    | Tag   | Configuration of data source rules |
-| discovery-heartbeat (+) | Tag   | Configuration of heartbeat rules detection |
-
-\<database-discovery:data-source-rule />
-
-| *Name*                       | *Type* | *Description*                                      |
-| --------------------------- | ----- | ------------------------------------------ |
-| id                          | Property  | Data source rules name  |
-| data-source-names           | Property  | Data source name，multiple datasources are divided by comma,such as：ds_0, ds_1  |
-| discovery-heartbeat-name    | Property  | Detect heartbeat name|
-| discovery-type-name         | Property  | type name of database discovery |
-
-\<database-discovery:discovery-heartbeat />
-
-| *Name*                       | *Type* | *Description*                                      |
-| --------------------------- | ----- | ------------------------------------------  |
-| id                          | Property  | heartbeat listen name                                 |
-| props                       | 标签  | property configuration of heartbeat listen，cron expression of keep-alive-cron property configuration，such as：'0/5 * * * * ?'  |
-
-\<database-discovery:discovery-type />
-
-| *Name*     | *Type* | *Description*                                    |
-| --------- | ----- | ----------------------------------------- |
-| id        | Property  | Type name of database discovery|
-| type      | Property  | Database discovery type，such as：MySQL.MGR               |
-| props (?) | Tag  | Configuration of database discovery type，such as group-name property configuration of MGR |
-
-## Operating Procedures
-
-### 1. Introduce Maven dependency
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-``` 
-
-## Configuration Example
-
-```xml  
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:cluster="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:database-discovery="http://shardingsphere.apache.org/schema/shardingsphere/database-discovery"
-       xmlns:readwrite-splitting="http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/database-discovery
-                           http://shardingsphere.apache.org/schema/shardingsphere/database-discovery/database-discovery.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting
-                           http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           ">
-    <bean id="ds_0" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:33306/primary_demo_ds?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    <bean id="ds_1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:33307/primary_demo_ds?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    <bean id="ds_2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:33308/primary_demo_ds?useSSL=false"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    <cluster:repository id="clusterRepository" type="ZooKeeper" namespace="governance" server-lists="localhost:2181">
-        <props>
-            <prop key="max-retries">3</prop>
-            <prop key="operation-timeout-milliseconds">3000</prop>
-        </props>
-    </cluster:repository>
-    <readwrite-splitting:rule id="readWriteSplittingRule">
-        <readwrite-splitting:data-source-rule id="replica_ds">
-            <readwrite-splitting:dynamic-strategy id="dynamicStrategy" auto-aware-data-source-name="readwrite_ds" />
-        </readwrite-splitting:data-source-rule>
-    </readwrite-splitting:rule>
-    <database-discovery:rule id="mgrDatabaseDiscoveryRule">
-        <database-discovery:data-source-rule id="readwrite_ds" data-source-names="ds_0,ds_1,ds_2" discovery-heartbeat-name="mgr-heartbeat" discovery-type-name="mgr" />
-        <database-discovery:discovery-heartbeat id="mgr-heartbeat">
-            <props>
-                <prop key="keep-alive-cron" >0/5 * * * * ?</prop>
-            </props>
-        </database-discovery:discovery-heartbeat>
-    </database-discovery:rule>
-    <database-discovery:discovery-type id="mgr" type="MySQL.MGR">
-        <props>
-            <prop key="group-name">558edd3c-02ec-11ea-9bb3-080027e39bd2</prop>
-        </props>
-    </database-discovery:discovery-type>
-    <shardingsphere:data-source id="databaseDiscoveryDataSource" schema-name="database-discovery-db" data-source-names="ds_0, ds_1, ds_2" rule-refs="readWriteSplittingRule, mgrDatabaseDiscoveryRule">
-    <shardingsphere:mode repository-ref="clusterRepository" type="Cluster" />
-    </shardingsphere:data-source>
-</beans>
-```
-
-## Related References
-
-- [Feature Description of HA](/en/features/ha/)
-- [JAVA API: HA](/en/user-manual/shardingsphere-jdbc/java-api/rules/ha/)
-- [YAML Configuration: HA](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/ha/)
-- [Spring Boot Starter: HA](/en/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha/)
\ No newline at end of file
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/mix.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/mix.cn.md
deleted file mode 100644
index aed2b9065e4..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/mix.cn.md
+++ /dev/null
@@ -1,75 +0,0 @@
-+++
-title = "混合规则"
-weight = 8
-+++
-
-## 背景信息
-
-ShardingSphere 涵盖了很多功能，例如，分库分片、读写分离、高可用、数据脱敏等。这些功能用户可以单独进行使用，也可以配合一起使用，下面是基于 Spring 命名空间 配置示例。
-
-## 配置示例
-
-```xml
-<!-- 分片配置 -->
-<sharding:standard-strategy id="databaseStrategy" sharding-column="user_id" algorithm-ref="inlineStrategyShardingAlgorithm" />
-<sharding:sharding-algorithm id="inlineStrategyShardingAlgorithm" type="INLINE">
-    <props>
-        <prop key="algorithm-expression">replica_ds_${user_id % 2}</prop>
-    </props>
-</sharding:sharding-algorithm>
-<sharding:key-generate-algorithm id="snowflakeAlgorithm" type="SNOWFLAKE">
-</sharding:key-generate-algorithm>
-<sharding:key-generate-strategy id="orderKeyGenerator" column="order_id" algorithm-ref="snowflakeAlgorithm" />
-<sharding:rule id="shardingRule">
-    <sharding:table-rules>
-        <sharding:table-rule logic-table="t_order" database-strategy-ref="databaseStrategy" key-generate-strategy-ref="orderKeyGenerator" />
-    </sharding:table-rules>
-</sharding:rule>
-
-<!-- 动态读写分离配置 -->
-<readwrite-splitting:rule id="readWriteSplittingRule">
-    <readwrite-splitting:data-source-rule id="replica_ds_0">
-        <readwrite-splitting:dynamic-strategy id="dynamicStrategy" auto-aware-data-source-name="readwrite_ds_0" />
-    </readwrite-splitting:data-source-rule>
-    <readwrite-splitting:data-source-rule id="replica_ds_1">
-        <readwrite-splitting:dynamic-strategy id="dynamicStrategy" auto-aware-data-source-name="readwrite_ds_1" />
-    </readwrite-splitting:data-source-rule>
-</readwrite-splitting:rule>
-
-<!-- 数据库发现配置 -->
-<database-discovery:rule id="mgrDatabaseDiscoveryRule">
-    <database-discovery:data-source-rule id="readwrite_ds_0" data-source-names="ds_0,ds_1,ds_2" discovery-heartbeat-name="mgr-heartbeat" discovery-type-name="mgr" />
-    <database-discovery:data-source-rule id="readwrite_ds_1" data-source-names="ds_3,ds_4,ds_5" discovery-heartbeat-name="mgr-heartbeat" discovery-type-name="mgr" />
-    <database-discovery:discovery-heartbeat id="mgr-heartbeat">
-        <props>
-            <prop key="keep-alive-cron" >0/5 * * * * ?</prop>
-        </props>
-    </database-discovery:discovery-heartbeat>
-</database-discovery:rule>
-<database-discovery:discovery-type id="mgr" type="MySQL.MGR">
-    <props>
-        <prop key="group-name">558edd3c-02ec-11ea-9bb3-080027e39bd2</prop>
-    </props>
-</database-discovery:discovery-type>
-
-<!-- 数据脱敏配置 -->
-<encrypt:encrypt-algorithm id="name_encryptor" type="AES">
-    <props>
-        <prop key="aes-key-value">123456</prop>
-    </props>
-</encrypt:encrypt-algorithm>
-<encrypt:encrypt-algorithm id="pwd_encryptor" type="MD5" />
-<encrypt:encrypt-algorithm id="pwd_assisted_encryptor" type="AES">
-    <props>
-        <prop key="aes-key-value">123456</prop>
-    </props>
-</encrypt:encrypt-algorithm>
-<encrypt:encrypt-algorithm id="like_query_encryptor" type="CHAR_DIGEST_LIKE" />
-
-<encrypt:rule id="encryptRule">
-    <encrypt:table name="t_user" query-with-cipher-column="false">
-        <encrypt:column logic-column="username" cipher-column="username" plain-column="username_plain" encrypt-algorithm-ref="name_encryptor" query-with-cipher-column="true"/>
-        <encrypt:column logic-column="pwd" cipher-column="pwd" assisted-query-column="assisted_query_pwd" like-query-column="like_query_pwd" encrypt-algorithm-ref="pwd_encryptor" assisted-query-encrypt-algorithm-ref="pwd_assisted_encryptor" like-query-encrypt-algorithm-ref="like_query_encryptor" query-with-cipher-column="true" />
-    </encrypt:table>
-</encrypt:rule>
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/mix.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/mix.en.md
deleted file mode 100644
index 5931dbfa19c..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/mix.en.md
+++ /dev/null
@@ -1,77 +0,0 @@
-+++
-title = "Mixed Rules"
-weight = 8
-+++
-
-## Background
-
-ShardingSphere provides a variety of features, such as data sharding, read/write splitting, high availability, and data decryption. These features can be used independently or in combination. 
-
-Below, you will find the configuration samples based on Spring Namespace.
-
-## Samples
-
-```xml
-<!-- Sharding configuration -->
-<sharding:standard-strategy id="databaseStrategy" sharding-column="user_id" algorithm-ref="inlineStrategyShardingAlgorithm" />
-<sharding:sharding-algorithm id="inlineStrategyShardingAlgorithm" type="INLINE">
-    <props>
-        <prop key="algorithm-expression">replica_ds_${user_id % 2}</prop>
-    </props>
-</sharding:sharding-algorithm>
-<sharding:key-generate-algorithm id="snowflakeAlgorithm" type="SNOWFLAKE">
-</sharding:key-generate-algorithm>
-<sharding:key-generate-strategy id="orderKeyGenerator" column="order_id" algorithm-ref="snowflakeAlgorithm" />
-<sharding:rule id="shardingRule">
-    <sharding:table-rules>
-        <sharding:table-rule logic-table="t_order" database-strategy-ref="databaseStrategy" key-generate-strategy-ref="orderKeyGenerator" />
-    </sharding:table-rules>
-</sharding:rule>
-
-<!-- Dynamic read/write splitting configuration -->
-<readwrite-splitting:rule id="readWriteSplittingRule">
-    <readwrite-splitting:data-source-rule id="replica_ds_0">
-        <readwrite-splitting:dynamic-strategy id="dynamicStrategy" auto-aware-data-source-name="readwrite_ds_0" />
-    </readwrite-splitting:data-source-rule>
-    <readwrite-splitting:data-source-rule id="replica_ds_1">
-        <readwrite-splitting:dynamic-strategy id="dynamicStrategy" auto-aware-data-source-name="readwrite_ds_1" />
-    </readwrite-splitting:data-source-rule>
-</readwrite-splitting:rule>
-
-<!-- Database discovery configuration -->
-<database-discovery:rule id="mgrDatabaseDiscoveryRule">
-    <database-discovery:data-source-rule id="readwrite_ds_0" data-source-names="ds_0,ds_1,ds_2" discovery-heartbeat-name="mgr-heartbeat" discovery-type-name="mgr" />
-    <database-discovery:data-source-rule id="readwrite_ds_1" data-source-names="ds_3,ds_4,ds_5" discovery-heartbeat-name="mgr-heartbeat" discovery-type-name="mgr" />
-    <database-discovery:discovery-heartbeat id="mgr-heartbeat">
-        <props>
-            <prop key="keep-alive-cron" >0/5 * * * * ?</prop>
-        </props>
-    </database-discovery:discovery-heartbeat>
-</database-discovery:rule>
-<database-discovery:discovery-type id="mgr" type="MySQL.MGR">
-    <props>
-        <prop key="group-name">558edd3c-02ec-11ea-9bb3-080027e39bd2</prop>
-    </props>
-</database-discovery:discovery-type>
-
-<!-- Data decryption configuration -->
-<encrypt:encrypt-algorithm id="name_encryptor" type="AES">
-    <props>
-        <prop key="aes-key-value">123456</prop>
-    </props>
-</encrypt:encrypt-algorithm>
-<encrypt:encrypt-algorithm id="pwd_encryptor" type="MD5" />
-<encrypt:encrypt-algorithm id="pwd_assisted_encryptor" type="AES">
-    <props>
-        <prop key="aes-key-value">123456</prop>
-    </props>
-</encrypt:encrypt-algorithm>
-<encrypt:encrypt-algorithm id="like_query_encryptor" type="CHAR_DIGEST_LIKE" />
-
-<encrypt:rule id="encryptRule">
-    <encrypt:table name="t_user" query-with-cipher-column="false">
-        <encrypt:column logic-column="username" cipher-column="username" plain-column="username_plain" encrypt-algorithm-ref="name_encryptor" query-with-cipher-column="true"/>
-        <encrypt:column logic-column="pwd" cipher-column="pwd" assisted-query-column="assisted_query_pwd" like-query-column="like_query_pwd" encrypt-algorithm-ref="pwd_encryptor" assisted-query-encrypt-algorithm-ref="pwd_assisted_encryptor" like-query-encrypt-algorithm-ref="like_query_encryptor" query-with-cipher-column="true" />
-    </encrypt:table>
-</encrypt:rule>
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting.cn.md
deleted file mode 100644
index 88a2ede01a0..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting.cn.md
+++ /dev/null
@@ -1,81 +0,0 @@
-+++
-title = "读写分离"
-weight = 2
-+++
-
-## 背景信息
-读写分离 Spring 命名空间的配置方式，适用于传统的 Spring 项目，通过命名空间 xml 配置文件的方式配置分片规则和属性，由 Spring 完成 ShardingSphereDataSource 对象的创建和管理，避免额外的编码工作。
-
-## 参数解释
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.2.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.2.1.xsd)
-
-\<readwrite-splitting:rule />
-
-| *名称*                | *类型* | *说明*           |
-| -------------------- | ------ | --------------- |
-| id                   | 属性   | Spring Bean Id   |
-| data-source-rule (+) | 标签   | 读写分离数据源规则配置 |
-
-\<readwrite-splitting:data-source-rule />
-
-| *名称*                     | *类型* | *说明*                 |
-| -------------------------- | ----- | --------------------- |
-| id                         | 属性  | 读写分离数据源规则名称    |
-| static-strategy            | 标签  | 静态读写分离类型         |
-| dynamic-strategy           | 标签  | 动态读写分离类型         |
-| load-balance-algorithm-ref | 属性  | 负载均衡算法名称         |
-
-\<readwrite-splitting:static-strategy />
-
-| *名称*                     | *类型* | *说明*                             |
-| -------------------------- | ----- | --------------------------------- |
-| id                         | 属性  | 静态读写分离名称                     |
-| write-data-source-name     | 属性  | 写库数据源名称                       |
-| read-data-source-names     | 属性  | 读库数据源列表，多个从数据源用逗号分隔  |
-| load-balance-algorithm-ref | 属性  | 负载均衡算法名称                     |
-
-\<readwrite-splitting:dynamic-strategy />
-
-| *名称*                            | *类型* | *说明*                            |
-| -------------------------------- | ----- | --------------------------------- |
-| id                               | 属性  | 动态读写分离名称                     |
-| auto-aware-data-source-name      | 属性  | 数据库发现逻辑数据源名称              |
-| write-data-source-query-enabled  | 属性  | 读库全部下线，主库是否承担读流量       |
-| load-balance-algorithm-ref       | 属性  | 负载均衡算法名称                     |
-
-
-\<readwrite-splitting:load-balance-algorithm />
-
-| *名称*     | *类型* | *说明*           |
-| --------- | ----- | ---------------- |
-| id        | 属性  | 负载均衡算法名称    |
-| type      | 属性  | 负载均衡算法类型    |
-| props (?) | 标签  | 负载均衡算法属性配置 |
-
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/common-config/builtin-algorithm/load-balance)。
-查询一致性路由的详情，请参见[核心特性：读写分离](/cn/features/readwrite-splitting/)。
-
-## 操作步骤
-1. 添加读写分离数据源
-2. 设置负载均衡算法
-3. 使用读写分离数据源
-
-## 配置示例
-```xml
-<readwrite-splitting:load-balance-algorithm id="randomStrategy" type="RANDOM" />
-    
-<readwrite-splitting:rule id="readWriteSplittingRule">
-    <readwrite-splitting:data-source-rule id="demo_ds" load-balance-algorithm-ref="randomStrategy">
-        <readwrite-splitting:static-strategy id="staticStrategy" write-data-source-name="demo_write_ds" read-data-source-names="demo_read_ds_0, demo_read_ds_1"/>
-    </readwrite-splitting:data-source-rule>
-</readwrite-splitting:rule>
-
-<shardingsphere:data-source id="readWriteSplittingDataSource" data-source-names="demo_write_ds, demo_read_ds_0, demo_read_ds_1" rule-refs="readWriteSplittingRule" />
-```
-
-## 相关参考
-- [核心特性：读写分离](/cn/features/readwrite-splitting/)
-- [Java API：读写分离](/cn/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting/)
-- [YAML 配置：读写分离](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/)
-- [Spring Boot Starter：读写分离](/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting.en.md
deleted file mode 100644
index 730c51527bb..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting.en.md
+++ /dev/null
@@ -1,80 +0,0 @@
-+++
-title = "Readwrite-splitting"
-weight = 2
-+++
-
-## Background
-Spring namespace read/write splitting configuration method is suitable for conventional Spring projects, determine sharding rules and properties through namespace XML configuration files, and let Spring do the creation and management of ShardingSphereDataSource objects, avoiding additional coding work.
-
-## Parameters Explained
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.2.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.2.1.xsd)
-
-\<readwrite-splitting:rule />
-
-| *Name*               | *Type*    | *Description*                                |
-| -------------------- | --------- | -------------------------------------------- |
-| id                   | Attribute | Spring Bean Id                               |
-| data-source-rule (+) | Tag       | Readwrite-splitting data source rule configuration |
-
-\<readwrite-splitting:data-source-rule />
-
-| *Name*                     | *Type*     | *Description*                                                           |
-| -------------------------- | ---------- | ----------------------------------------------------------------------- |
-| id                         | Attribute  | Readwrite-splitting data source rule name                               |
-| static-strategy            | Tag        | Static Readwrite-splitting type                                         |
-| dynamic-strategy           | Tag        | Dynamic Readwrite-splitting type                                        |
-| load-balance-algorithm-ref | Attribute  | Load balance algorithm name                                             |
-
-
-\<readwrite-splitting:static-strategy />
-
-| *Name*                     | *Type* | *Description*                                                          |
-| -------------------------- | ----- | ----------------------------------------------------------------------- |
-| id                         | Attribute  | Static readwrite-splitting name                                          |
-| write-data-source-name     | Attribute  | Write data source name                                                   |
-| read-data-source-names     | Attribute  | Read data source names, multiple data source names separated with comma  |
-| load-balance-algorithm-ref | Attribute  | Load balance algorithm name                                              |
-
-\<readwrite-splitting:dynamic-strategy />
-
-| *Name*                           | *Type*     | *Description*                                                                                               |
-| -------------------------------- | ---------- | ----------------------------------------------------------------------------------------------------------- |
-| id                               | Attribute  | Dynamic readwrite-splitting name                                                                            |
-| auto-aware-data-source-name      | Attribute  | Database discovery logic data source name                                                                   |
-| write-data-source-query-enabled  | Attribute  | All read data source are offline, write data source whether the data source is responsible for read traffic |
-| load-balance-algorithm-ref       | Attribute  | Load balance algorithm name                                                                                 |
-
-\<readwrite-splitting:load-balance-algorithm />
-
-| *Name*    | *Type*     | *Description*                     |
-| --------- | ---------- | --------------------------------- |
-| id        | Attribute  | Load balance algorithm name       |
-| type      | Attribute  | Load balance algorithm type       |
-| props (?) | Tag        | Load balance algorithm properties |
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/common-config/builtin-algorithm/load-balance) for more details about type of algorithm.
-Please refer to [Read-write splitting-Core features](/en/features/readwrite-splitting/) for more details about query consistent routing.
-
-## Operating Procedures
-1. Add read/write splitting data source.
-2. Set the load balancing algorithm.
-3. Using read/write splitting data sources.
-
-## Configuration Example
-```xml
-<readwrite-splitting:load-balance-algorithm id="randomStrategy" type="RANDOM" />
-    
-<readwrite-splitting:rule id="readWriteSplittingRule">
-    <readwrite-splitting:data-source-rule id="demo_ds" load-balance-algorithm-ref="randomStrategy">
-        <readwrite-splitting:static-strategy id="staticStrategy" write-data-source-name="demo_write_ds" read-data-source-names="demo_read_ds_0, demo_read_ds_1"/>
-    </readwrite-splitting:data-source-rule>
-</readwrite-splitting:rule>
-
-<shardingsphere:data-source id="readWriteSplittingDataSource" data-source-names="demo_write_ds, demo_read_ds_0, demo_read_ds_1" rule-refs="readWriteSplittingRule" />
-```
-
-## Related References
-- [Read-write splitting-Core features](/en/features/readwrite-splitting/)
-- [Java API: read-write splitting](/en/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting/)
-- [YAML Configuration: read-write splitting](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/)
-- [Spring Boot Starter: read-write splitting](/en/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow.cn.md
deleted file mode 100644
index d52aa10bedc..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow.cn.md
+++ /dev/null
@@ -1,105 +0,0 @@
-+++
-title = "影子库"
-weight = 5
-+++
-
-## 背景信息
-如果您只想使用 XML 配置文件方式配置使用 ShardingSphere 影子库功能请参考以下配置。
-
-## 参数解释
-### 配置入口
-
-```xml
-<shadow:rule />
-```
-
-###  可配置属性：
-|  *名称*  |  *类型*  | *说明*  | 
-| ------- | -------- | ------- | 
-| id | 属性 | Spring Bean Id | 
-| data-source(?) | 标签 | 影子库数据源映射配置 | 
-| shadow-table(?) | 标签 | 影子表配置 | 
-| shadow-algorithm(?) | 标签 | 影子表配置 | 
-| default-shadow-algorithm-name(?) | 标签 | 默认影子算法名称 | 
-
-###  影子数据源配置：
-```xml
-<shadow:data-source />
-```
-
-|  *名称*  |  *类型*  | *说明*  |
-| ------- | -------- | ------- |
-| id | 属性 | Spring Bean Id |
-| production-data-source-name | 属性 | 生产数据源名称 |
-| shadow-data-source-name | 属性 | 影子数据源名称 |
-
-###  影子表配置：
-```xml
-<shadow:shadow-table />
-```
-
-|  *名称*  |  *类型*  | *说明*  |
-| ------- | -------- | ------- |
-| name | 属性 | 影子表名称 |
-| data-sources | 属性 | 影子表关联影子数据源名称列表（多个值用","隔开） |
-| algorithm (?) | 标签 | 影子表关联影子算法配置 |
-
-```xml
-<shadow:algorithm />
-```
-
-|  *名称*  |  *类型*  | *说明*  |
-| ------- | -------- | ------- |
-| shadow-algorithm-ref | 属性 | 影子表关联影子算法名称 |
-
-###  影子算法配置：
-```xml
-<shadow:shadow-algorithm />
-```
-
-|  *名称*  |  *类型*  | *说明*  |
-| ------- | -------- | ------- |
-| id | 属性 | 影子算法名称 |
-| type | 属性 | 影子算法类型 |
-| props (?) | 标签 | 影子算法属性配置 |
-
-详情请参见[内置影子算法列表](/cn/user-manual/common-config/builtin-algorithm/shadow)
-
-## 操作步骤
-1. 创建生产和影子数据源。
-2. 配置影子规则
-    - 配置影子数据源
-    - 配置影子表
-    - 配置影子算法
-
-## 配置示例
-
-```xml
-<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:shadow="http://shardingsphere.apache.org/schema/shardingsphere/shadow" xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/shadow
-                           http://shardingsphere.apache.org/schema/shardingsphere/shadow/shadow.xsd
-                           ">
-    <shadow:shadow-algorithm id="user-id-insert-match-algorithm" type="VALUE_MATCH">
-        <props>
-            <prop key="operation">insert</prop>
-            <prop key="column">user_id</prop>
-            <prop key="value">1</prop>
-        </props>
-    </shadow:shadow-algorithm>
-
-    <shadow:rule id="shadowRule">
-        <shadow:data-source id="shadow-data-source" production-data-source-name="ds" shadow-data-source-name="ds_shadow"/>
-        <shadow:shadow-table name="t_user" data-sources="shadow-data-source">
-        <shadow:algorithm shadow-algorithm-ref="user-id-insert-match-algorithm" />
-        </shadow:shadow-table>
-    </shadow:rule>
-</beans>
-```
-
-## 相关参考
-- [影子库的特性描述](/cn/features/shadow/)
-- [JAVA API：影子库的配置 ](/cn/user-manual/shardingsphere-jdbc/java-api/rules/shadow/)
-- [YAML 配置：影子库的配置](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/shadow/)
-- [Spring 命名空间：影子库的配置](/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow/)
-- [开发者指南：影子库的接口和示例](/cn/dev-manual/shadow/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow.en.md
deleted file mode 100644
index f48f3b6d495..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow.en.md
+++ /dev/null
@@ -1,104 +0,0 @@
-+++
-title = "Shadow DB"
-weight = 5
-+++
-
-## Background
-Under the distributed application architecture based on microservices, the business needs multiple services to be completed through a series of service and middleware calls, so the stress test of a single service can no longer represent the real scenario.
-In the test environment, rebuilding a complete set of pressure test environments similar to the production environment would mean an excessively high cost, and often an inability to simulate the complexity and flow of the online environment.
-Therefore, enterprises usually select the full link voltage test method, i.e. a pressure test in the production environment, so that the test results can accurately reflect the system's real capacity and performance level.
-
-## Parameters
-### Configuration Entry
-```xml
-<shadow:rule />
-```
-
-###  Configurable Properties:
-|  *Name*  |  *Type*  | *Description*  | 
-| ------- | -------- | ------- | 
-| id | Attribute | Spring Bean Id | 
-| data-source(?) | Tag | Shadow data source configuration | 
-| shadow-table(?) | Tag | Shadow table configuration | 
-| shadow-algorithm(?) | Tag | Shadow table configuration | 
-| default-shadow-algorithm-name(?) | Tag | Default shadow algorithm configuration | 
-
-###  Shadow data source configuration:
-```xml
-<shadow:data-source />
-```
-
-|  *Name*  |  *Type*  | *Description*  |
-| ------- | -------- | ------- |
-| id | Attribute | Spring Bean Id |
-| production-data-source-name | Attribute | Production data source name |
-| shadow-data-source-name     | Attribute | Shadow data source name     |
-
-###  Shadow table configuration:
-```xml
-<shadow:shadow-table />
-```
-
-|  *Name*  |  *Type*  | *Description*  |
-| ------- | -------- | ------- |
-| name | Attribute | Shadow table name|
-| data-sources | Attribute | Shadow table associated shadow data source name list (multiple values are separated by ",") |
-| algorithm (?) | Tag | Shadow table association shadow algorithm configuration |
-
-```xml
-<shadow:algorithm />
-```
-
-|  *Name*  |  *Type*  | *Description*  |
-| ------- | -------- | ------- |
-| shadow-algorithm-ref | Attribute | Shadow table association shadow algorithm name |
-
-###  Shadow algorithm configuration:
-```xml
-<shadow:shadow-algorithm />
-```
-
-|  *Name*  |  *Type*  | *Description*  |
-| ------- | -------- | ------- |
-| id | Attribute | Shadow algorithm name |
-| type | Attribute | Shadow algorithm type |
-| props (?) | Tag | Shadow algorithm attribute configuration |
-Refer to [Builin Shadow Algorithm](/en/user-manual/common-config/builtin-algorithm/shadow/) for details
-
-## Procedure
-1. Create production and shadow data sources.
-2. Configure shadow rules.
-    - Configure shadow data sources.
-    - Configure shadow table.
-    - Configure shadow algorithm.
-
-## Sample
-```xml
-<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:shadow="http://shardingsphere.apache.org/schema/shardingsphere/shadow" xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/shadow
-                           http://shardingsphere.apache.org/schema/shardingsphere/shadow/shadow.xsd
-                           ">
-    <shadow:shadow-algorithm id="user-id-insert-match-algorithm" type="VALUE_MATCH">
-        <props>
-            <prop key="operation">insert</prop>
-            <prop key="column">user_id</prop>
-            <prop key="value">1</prop>
-        </props>
-    </shadow:shadow-algorithm>
-
-    <shadow:rule id="shadowRule">
-        <shadow:data-source id="shadow-data-source" production-data-source-name="ds" shadow-data-source-name="ds_shadow"/>
-        <shadow:shadow-table name="t_user" data-sources="shadow-data-source">
-            <shadow:algorithm shadow-algorithm-ref="user-id-insert-match-algorithm" />
-        </shadow:shadow-table>
-    </shadow:rule>
-</beans>
-```
-
-## Related References
-- [Feature Description of Shadow DB](/en/features/shadow/)
-- [JAVA API: Shadow DB ](/en/user-manual/shardingsphere-jdbc/java-api/rules/shadow/)
-- [YAML Configuration: Shadow DB](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/shadow/)
-- [Spring Namespace: Shadow DB](/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow/)
-- [Dev Guide: Shadow DB](/en/dev-manual/shadow/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sharding.cn.md
deleted file mode 100644
index 52158c4e475..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sharding.cn.md
+++ /dev/null
@@ -1,254 +0,0 @@
-+++
-title = "数据分片"
-weight = 1
-+++
-
-## 背景信息
-
-数据分片 Spring 命名空间的配置方式，适用于传统的 Spring 项目，通过命名空间 xml 配置文件的方式配置分片规则和属性，由 Spring 完成 ShardingSphereDataSource 对象的创建和管理，避免额外的编码工作。
-
-## 参数解释
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.2.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.2.1.xsd)
-
-\<sharding:rule />
-
-| *名称*                                  | *类型* | *说明*           |
-|---------------------------------------| ------ |----------------|
-| id                                    | 属性   | Spring Bean Id |
-| table-rules (?)                       | 标签   | 分片表规则配置        |
-| auto-table-rules (?)                  | 标签   | 自动分片表规则配置      |
-| binding-table-rules (?)               | 标签   | 绑定表规则配置        |
-| broadcast-table-rules (?)             | 标签   | 广播表规则配置        |
-| default-database-strategy-ref (?)     | 属性   | 默认分库策略名称       |
-| default-table-strategy-ref (?)        | 属性   | 默认分表策略名称       |
-| default-key-generate-strategy-ref (?) | 属性   | 默认分布式序列策略名称    |
-| default-audit-strategy-ref (?)        | 属性   | 默认分片审计策略名称     |
-| default-sharding-column (?)           | 属性   | 默认分片列名称        |
-
-\<sharding:table-rule />
-
-| *名称*                      | *类型* | *说明*                                                                                                                       |
-|---------------------------| ----- |----------------------------------------------------------------------------------------------------------------------------|
-| logic-table               | 属性  | 逻辑表名称                                                                                                                      |
-| actual-data-nodes         | 属性  | 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况 |
-| actual-data-sources       | 属性  | 自动分片表数据源名                                                                                                                  |
-| database-strategy-ref     | 属性  | 标准分片表分库策略名称                                                                                                                |
-| table-strategy-ref        | 属性  | 标准分片表分表策略名称                                                                                                                |
-| sharding-strategy-ref     | 属性  | 自动分片表策略名称                                                                                                                  |
-| key-generate-strategy-ref | 属性  | 分布式序列策略名称                                                                                                                  |
-| audit-strategy-ref        | 属性  | 分片审计策略名称                                                                                                                   |
-
-\<sharding:binding-table-rules />
-
-| *名称*                  | *类型* | *说明*       |
-| ---------------------- | ------ | ------------ |
-| binding-table-rule (+) | 标签   | 绑定表规则配置 |
-
-\<sharding:binding-table-rule />
-
-| *名称*       | *类型*  | *说明*                   |
-| ------------ | ------ | ------------------------ |
-| logic-tables | 属性   | 绑定表名称，多个表以逗号分隔 |
-
-\<sharding:broadcast-table-rules />
-
-| *名称*                  | *类型* | *说明*       |
-| ---------------------- | ------ | ------------ |
-| broadcast-table-rule (+) | 标签   | 广播表规则配置 |
-
-\<sharding:broadcast-table-rule />
-
-| *名称* | *类型* | *说明*   |
-| ------ | ----- | -------- |
-| table  | 属性  | 广播表名称 |
-
-\<sharding:standard-strategy />
-
-| *名称*          | *类型* | *说明*          |
-| --------------- | ----- | -------------- |
-| id              | 属性   | 标准分片策略名称 |
-| sharding-column | 属性   | 分片列名称      |
-| algorithm-ref   | 属性   | 分片算法名称    |
-
-\<sharding:complex-strategy />
-
-| *名称*           | *类型* | *说明*                    |
-| ---------------- | ----- | ------------------------- |
-| id               | 属性   | 复合分片策略名称            |
-| sharding-columns | 属性   | 分片列名称，多个列以逗号分隔 |
-| algorithm-ref    | 属性   | 分片算法名称               |
-
-\<sharding:hint-strategy />
-
-| *名称*        | *类型* | *说明*           |
-| ------------- | ----- | ---------------- |
-| id            | 属性   | Hint 分片策略名称 |
-| algorithm-ref | 属性   | 分片算法名称      |
-
-\<sharding:none-strategy />
-
-| *名称* | *类型* | *说明*      |
-| ------ | ----- | ----------- |
-| id     | 属性   | 分片策略名称 |
-
-\<sharding:key-generate-strategy />
-
-| *名称*        | *类型* | *说明*           |
-| ------------- | ----- | ---------------- |
-| id            | 属性   | 分布式序列策略名称 |
-| column        | 属性   | 分布式序列列名称   |
-| algorithm-ref | 属性   | 分布式序列算法名称 |
-
-\<sharding:audit-strategy />
-
-| *名称*              | *类型*   | *说明*         |
-| -------------------|--------|--------------|
-| id                 | 属性     | 分片审计策略名称     |
-| allow-hint-disable | 属性     | 是否禁用分片审计hint |
-| auditors           | 标签     | 分片审计算法名称     |
-
-\<sharding:auditors />
-
-| *名称*             | *类型*   | *说明*     |
-| -----------------|--------|----------|
-| auditor          | 标签     | 分片审计算法名称 |
-
-\<sharding:auditor />
-
-| *名称*             | *类型* | *说明*     |
-| -----------------|------|----------|
-| algorithm-ref    | 属性   | 分片审计算法名称 |
-
-\<sharding:sharding-algorithm />
-
-| *名称*    | *类型* | *说明*        |
-| --------- | ----- | ------------- |
-| id        | 属性  | 分片算法名称    |
-| type      | 属性  | 分片算法类型    |
-| props (?) | 标签  | 分片算法属性配置 |
-
-\<sharding:key-generate-algorithm />
-
-| *名称*    | *类型* | *说明*              |
-| --------- | ----- | ------------------ |
-| id        | 属性  | 分布式序列算法名称    |
-| type      | 属性  | 分布式序列算法类型    |
-| props (?) | 标签  | 分布式序列算法属性配置 |
-
-\<sharding:audit-algorithm />
-
-| *名称*    | *类型* | *说明*       |
-| --------- | ----- |------------|
-| id        | 属性  | 分片审计算法名称   |
-| type      | 属性  | 分片审计算法类型   |
-| props (?) | 标签  | 分片审计算法属性配置 |
-
-算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/common-config/builtin-algorithm/sharding)，[内置分布式序列算法列表](/cn/user-manual/common-config/builtin-algorithm/keygen) 和 [内置分片审计算法列表](/cn/user-manual/common-config/builtin-algorithm/audit)。
-
-> 注意事项：行表达式标识符可以使用 `${...}` 或 `$->{...}`，但前者与 Spring 本身的属性文件占位符冲突，因此在 Spring 环境中使用行表达式标识符建议使用 `$->{...}`。
-
-## 操作步骤
-
-1. 在 Spring 命名空间配置文件中配置数据分片规则，包含数据源、分片规则、全局属性等配置项；
-2. 启动 Spring 程序，会自动加载配置，并初始化 ShardingSphereDataSource。
-
-## 配置示例
-
-```xml
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:tx="http://www.springframework.org/schema/tx"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:sharding="http://shardingsphere.apache.org/schema/shardingsphere/sharding"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://www.springframework.org/schema/tx 
-                           http://www.springframework.org/schema/tx/spring-tx.xsd
-                           http://www.springframework.org/schema/context 
-                           http://www.springframework.org/schema/context/spring-context.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/sharding
-                           http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd
-                           ">
-    <context:component-scan base-package="org.apache.shardingsphere.example.core.mybatis" />
-    
-    <bean id="demo_ds_0" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/demo_ds_0?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="demo_ds_1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/demo_ds_1?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <sharding:standard-strategy id="databaseStrategy" sharding-column="user_id" algorithm-ref="inlineStrategyShardingAlgorithm" />
-
-    <sharding:sharding-algorithm id="inlineStrategyShardingAlgorithm" type="INLINE">
-        <props>
-            <prop key="algorithm-expression">demo_ds_${user_id % 2}</prop>
-        </props>
-    </sharding:sharding-algorithm>
-    
-    <sharding:key-generate-algorithm id="snowflakeAlgorithm" type="SNOWFLAKE">
-    </sharding:key-generate-algorithm>
-
-    <sharding:audit-algorithm id="auditAlgorithm" type="DML_SHARDING_CONDITIONS" />
-    
-    <sharding:key-generate-strategy id="orderKeyGenerator" column="order_id" algorithm-ref="snowflakeAlgorithm" />
-    <sharding:key-generate-strategy id="itemKeyGenerator" column="order_item_id" algorithm-ref="snowflakeAlgorithm" />
-
-    <sharding:audit-strategy id="defaultAudit" allow-hint-disable="true">
-        <sharding:auditors>
-            <sharding:auditor algorithm-ref="auditAlgorithm" />
-        </sharding:auditors>
-    </sharding:audit-strategy>
-    <sharding:audit-strategy id="shardingKeyAudit" allow-hint-disable="true">
-        <sharding:auditors>
-            <sharding:auditor algorithm-ref="auditAlgorithm" />
-        </sharding:auditors>
-    </sharding:audit-strategy>
-    
-    <sharding:rule id="shardingRule">
-        <sharding:table-rules>
-            <sharding:table-rule logic-table="t_order" database-strategy-ref="databaseStrategy" key-generate-strategy-ref="orderKeyGenerator" audit-strategy-ref="shardingKeyAudit" />
-            <sharding:table-rule logic-table="t_order_item" database-strategy-ref="databaseStrategy" key-generate-strategy-ref="itemKeyGenerator" />
-        </sharding:table-rules>
-        <sharding:binding-table-rules>
-            <sharding:binding-table-rule logic-tables="t_order,t_order_item"/>
-        </sharding:binding-table-rules>
-        <sharding:broadcast-table-rules>
-            <sharding:broadcast-table-rule table="t_address"/>
-        </sharding:broadcast-table-rules>
-    </sharding:rule>
-    
-    <shardingsphere:data-source id="shardingDataSource" database-name="sharding-databases" data-source-names="demo_ds_0, demo_ds_1" rule-refs="shardingRule" />
-    
-    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
-        <property name="dataSource" ref="shardingDataSource" />
-    </bean>
-    <tx:annotation-driven />
-    
-    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
-        <property name="dataSource" ref="shardingDataSource"/>
-        <property name="mapperLocations" value="classpath*:META-INF/mappers/*.xml"/>
-    </bean>
-    
-    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
-        <property name="basePackage" value="org.apache.shardingsphere.example.core.mybatis.repository"/>
-        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
-    </bean>
-</beans>
-```
-
-## 相关参考
-
-- [核心特性：数据分片](/cn/features/sharding/)
-- [开发者指南：数据分片](/cn/dev-manual/sharding/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sharding.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sharding.en.md
deleted file mode 100644
index f99a781ef38..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sharding.en.md
+++ /dev/null
@@ -1,254 +0,0 @@
-+++
-title = "Sharding"
-weight = 1
-+++
-
-## Background
-
-The configuration method of data sharding Spring Namespace is applicable to traditional Spring projects. The sharding rules and attributes are configured through the namespace xml configuration file. Spring completes the creation and management of ShardingSphereDataSource objects to avoid additional coding work.
-
-## Parameters
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.2.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.2.1.xsd)
-
-\<sharding:rule />
-
-| *Name*                                | *Type*    | *Description*                               |
-| ------------------------------------- | --------- |---------------------------------------------|
-| id                                    | Attribute | Spring Bean Id                              |
-| table-rules (?)                       | Tag       | Sharding table rule configuration           |
-| auto-table-rules (?)                  | Tag       | Automatic sharding table rule configuration |
-| binding-table-rules (?)               | Tag       | Binding table rule configuration            |
-| broadcast-table-rules (?)             | Tag       | Broadcast table rule configuration          |
-| default-database-strategy-ref (?)     | Attribute | Default database strategy name              |
-| default-table-strategy-ref (?)        | Attribute | Default table strategy name                 |
-| default-key-generate-strategy-ref (?) | Attribute | Default key generate strategy name          |
-| default-audit-strategy-ref (?)        | Attribute | Default sharding audit strategy name        |
-| default-sharding-column (?)           | Attribute | Default sharding column name                |
-
-\<sharding:table-rule />
-
-| *Name*                    | *Type*    | *Description*                                                                                                                                                                |
-| ------------------------- | --------- |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
-| logic-table               | Attribute | Logic table name                                                                                                                                                             |
-| actual-data-nodes         | Attribute | Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only. |
-| actual-data-sources       | Attribute | Data source names for auto sharding table                                                                                                                                    |
-| database-strategy-ref     | Attribute | Database strategy name for standard sharding table                                                                                                                           |
-| table-strategy-ref        | Attribute | Table strategy name for standard sharding table                                                                                                                              |
-| sharding-strategy-ref     | Attribute | sharding strategy name for auto sharding table                                                                                                                               |
-| key-generate-strategy-ref | Attribute | Key generate strategy name                                                                                                                                                   |
-| audit-strategy-ref        | Attribute | Sharding audit strategy name                                                                                                                                                 |
-
-\<sharding:binding-table-rules />
-
-| *Name*                 | *Type* | *Description*                    |
-| ---------------------- | ------ | -------------------------------- |
-| binding-table-rule (+) | Tag    | Binding table rule configuration |
-
-\<sharding:binding-table-rule />
-
-| *Name*       | *Type*    | *Description*                                            |
-| ------------ | --------- | -------------------------------------------------------- |
-| logic-tables | Attribute | Binding table name, multiple tables separated with comma |
-
-\<sharding:broadcast-table-rules />
-
-| *Name*                   | *Type* | *Description*                      |
-| ------------------------ | ------ | ---------------------------------- |
-| broadcast-table-rule (+) | Tag    | Broadcast table rule configuration |
-
-\<sharding:broadcast-table-rule />
-
-| *Name* | *Type*    | *Description*        |
-| ------ | --------- | -------------------- |
-| table  | Attribute | Broadcast table name |
-
-\<sharding:standard-strategy />
-
-| *Name*          | *Type*    | *Description*                   |
-| --------------- | --------- | ------------------------------- |
-| id              | Attribute | Standard sharding strategy name |
-| sharding-column | Attribute | Sharding column name            |
-| algorithm-ref   | Attribute | Sharding algorithm name         |
-
-\<sharding:complex-strategy />
-
-| *Name*           | *Type*    | *Description*                                                |
-| ---------------- | --------- | ------------------------------------------------------------ |
-| id               | Attribute | Complex sharding strategy name                               |
-| sharding-columns | Attribute | Sharding column names, multiple columns separated with comma |
-| algorithm-ref    | Attribute | Sharding algorithm name                                      |
-
-\<sharding:hint-strategy />
-
-| *Name*        | *Type*    | *Description*               |
-| ------------- | --------- | --------------------------- |
-| id            | Attribute | Hint sharding strategy name |
-| algorithm-ref | Attribute | Sharding algorithm name     |
-
-\<sharding:none-strategy />
-
-| *Name* | *Type*    | *Description*          |
-| ------ | --------- | ---------------------- |
-| id     | Attribute | Sharding strategy name |
-
-\<sharding:key-generate-strategy />
-
-| *Name*        | *Type*    | *Description*               |
-| ------------- | --------- | --------------------------- |
-| id            | Attribute | Key generate strategy name  |
-| column        | Attribute | Key generate column name    |
-| algorithm-ref | Attribute | Key generate algorithm name |
-
-\<sharding:audit-strategy />
-
-| *Name*             | *Type*    | *Description*                         |
-|--------------------|-----------|---------------------------------------|
-| id                 | Attribute | Sharding audit strategy name          |
-| allow-hint-disable | Attribute | Enable or disable sharding audit hint |
-| auditors           | Tag       | Sharding audit algorithm name         |
-
-\<sharding:auditors />
-
-| *Name*  | *Type* | *Description*                 |
-|---------|--------|-------------------------------|
-| auditor | Tag    | Sharding audit algorithm name |
-
-\<sharding:auditor />
-
-| *Name*           | *Type*    | *Description*                 |
-| -----------------|-----------|-------------------------------|
-| algorithm-ref    | Attribute | Sharding audit algorithm name |
-
-\<sharding:sharding-algorithm />
-
-| *Name*    | *Type*    | *Description*                 |
-| --------- | --------- | ----------------------------- |
-| id        | Attribute | Sharding algorithm name       |
-| type      | Attribute | Sharding algorithm type       |
-| props (?) | Tag       | Sharding algorithm properties |
-
-\<sharding:key-generate-algorithm />
-
-| *Name*    | *Type*    | *Description*                     |
-| --------- | --------- | --------------------------------- |
-| id        | Attribute | Key generate algorithm name       |
-| type      | Attribute | Key generate algorithm type       |
-| props (?) | Tag       | Key generate algorithm properties |
-
-\<sharding:audit-algorithm />
-
-| *Name*    | *Type*    | *Description*                       |
-| --------- | --------- |-------------------------------------|
-| id        | Attribute | Sharding audit algorithm name       |
-| type      | Attribute | Sharding audit algorithm type       |
-| props (?) | Tag       | Sharding audit algorithm properties |
-
-Please refer to [Built-in Sharding Audit Algorithm List](/en/user-manual/common-config/builtin-algorithm/sharding), [Built-in Key Generate Algorithm List](/en/user-manual/common-config/builtin-algorithm/keygen) and [Built-in Sharding Audit Algorithm List](/en/user-manual/common-config/builtin-algorithm/audit) for more details about type of algorithm.
-
-> Attention: Inline expression identifier can use `${...}` or `$->{...}`, but `${...}` is conflict with spring placeholder of properties, so use `$->{...}` on spring environment is better.
-
-## Procedure
-
-1. Configure data sharding rules in the Spring Namespace configuration file, including data source, sharding rules, global attributes and other configuration items.
-2. Start the Spring program, the configuration will be loaded automatically, and the ShardingSphereDataSource will be initialized.
-
-## Sample
-
-```xml
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:tx="http://www.springframework.org/schema/tx"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:sharding="http://shardingsphere.apache.org/schema/shardingsphere/sharding"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://www.springframework.org/schema/tx 
-                           http://www.springframework.org/schema/tx/spring-tx.xsd
-                           http://www.springframework.org/schema/context 
-                           http://www.springframework.org/schema/context/spring-context.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/sharding
-                           http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd
-                           ">
-    <context:component-scan base-package="org.apache.shardingsphere.example.core.mybatis" />
-
-    <bean id="demo_ds_0" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/demo_ds_0?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-
-    <bean id="demo_ds_1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/demo_ds_1?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-
-    <sharding:standard-strategy id="databaseStrategy" sharding-column="user_id" algorithm-ref="inlineStrategyShardingAlgorithm" />
-
-    <sharding:sharding-algorithm id="inlineStrategyShardingAlgorithm" type="INLINE">
-        <props>
-            <prop key="algorithm-expression">demo_ds_${user_id % 2}</prop>
-        </props>
-    </sharding:sharding-algorithm>
-
-    <sharding:key-generate-algorithm id="snowflakeAlgorithm" type="SNOWFLAKE">
-    </sharding:key-generate-algorithm>
-
-    <sharding:audit-algorithm id="auditAlgorithm" type="DML_SHARDING_CONDITIONS" />
-
-    <sharding:key-generate-strategy id="orderKeyGenerator" column="order_id" algorithm-ref="snowflakeAlgorithm" />
-    <sharding:key-generate-strategy id="itemKeyGenerator" column="order_item_id" algorithm-ref="snowflakeAlgorithm" />
-
-    <sharding:audit-strategy id="defaultAudit" allow-hint-disable="true">
-        <sharding:auditors>
-            <sharding:auditor algorithm-ref="auditAlgorithm" />
-        </sharding:auditors>
-    </sharding:audit-strategy>
-    <sharding:audit-strategy id="shardingKeyAudit" allow-hint-disable="true">
-        <sharding:auditors>
-            <sharding:auditor algorithm-ref="auditAlgorithm" />
-        </sharding:auditors>
-    </sharding:audit-strategy>
-    
-    <sharding:rule id="shardingRule">
-        <sharding:table-rules>
-            <sharding:table-rule logic-table="t_order" database-strategy-ref="databaseStrategy" key-generate-strategy-ref="orderKeyGenerator" audit-strategy-ref="shardingKeyAudit" />
-            <sharding:table-rule logic-table="t_order_item" database-strategy-ref="databaseStrategy" key-generate-strategy-ref="itemKeyGenerator" />
-        </sharding:table-rules>
-        <sharding:binding-table-rules>
-            <sharding:binding-table-rule logic-tables="t_order,t_order_item"/>
-        </sharding:binding-table-rules>
-        <sharding:broadcast-table-rules>
-            <sharding:broadcast-table-rule table="t_address"/>
-        </sharding:broadcast-table-rules>
-    </sharding:rule>
-
-    <shardingsphere:data-source id="shardingDataSource" database-name="sharding-databases" data-source-names="demo_ds_0, demo_ds_1" rule-refs="shardingRule" />
-
-    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
-        <property name="dataSource" ref="shardingDataSource" />
-    </bean>
-    <tx:annotation-driven />
-
-    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
-        <property name="dataSource" ref="shardingDataSource"/>
-        <property name="mapperLocations" value="classpath*:META-INF/mappers/*.xml"/>
-    </bean>
-
-    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
-        <property name="basePackage" value="org.apache.shardingsphere.example.core.mybatis.repository"/>
-        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
-    </bean>
-</beans>
-```
-
-## Related References
-
-- [Core Feature: Data Sharding](/en/features/sharding/)
-- [Developer Guide: Data Sharding](/en/dev-manual/sharding/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser.cn.md
deleted file mode 100644
index 4391c24eb77..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser.cn.md
+++ /dev/null
@@ -1,45 +0,0 @@
-+++
-title = "SQL解析"
-weight = 6
-+++
-
-## 背景信息
-Spring 命名空间的配置方式，适用于传统的 Spring 项目，它通过命名空间 xml 配置文件的方式配置SQL 解析规则和属性。
-
-## 参数解释
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/sql-parser/sql-parser-5.2.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/sql-parser/sql-parser-5.2.1.xsd)
-
-\<sql-parser:rule />
-
-| *名称*                    | *类型* | *说明*             |
-|--------------------------|-------|--------------------|
-| id                       | 属性   | Spring Bean Id     |
-| sql-comment-parse-enable | 属性   | 是否解析 SQL 注释    |
-| parse-tree-cache-ref     | 属性   | 解析树本地缓存名称    |
-| sql-statement-cache-ref  | 属性   | SQL 语句本地缓存名称 |
-
-\<sql-parser:cache-option />
-
-| *名称*                       | *类型* | *说明*                              |
-|-----------------------------| ----- |-------------------------------------|
-| id                          | 属性  | 本地缓存配置项名称                      |
-| initial-capacity            | 属性  | 本地缓存初始容量                        |
-| maximum-size                | 属性  | 本地缓存最大容量                        |
-
-## 操作步骤
-1. 设置本地缓存配置
-2. 设置解析配置
-3. 使用解析引擎解析 SQL
-
-## 配置示例
-```xml
-<sql-parser:rule id="sqlParseRule" sql-comment-parse-enable="true" parse-tree-cache-ref="parseTreeCache" sql-statement-cache-ref="sqlStatementCache" />
-<sql-parser:cache-option id="sqlStatementCache" initial-capacity="1024" maximum-size="1024"/>
-<sql-parser:cache-option id="parseTreeCache" initial-capacity="1024" maximum-size="1024"/>
-```
-
-## 相关参考
-- [JAVA API：SQL 解析](/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-parser/)
-- [YAML 配置：SQL 解析](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-parser/)
-- [Spring Boot Starter：SQL 解析](/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sql-parser/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser.en.md
deleted file mode 100644
index 1ce0e4db938..00000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser.en.md
+++ /dev/null
@@ -1,45 +0,0 @@
-+++
-title = "SQL Parser"
-weight = 6
-+++
-
-## Background
-Spring namespace's SQL parser configuration applies to traditional Spring projects. SQL parsing rules and attributes can be configured through the XML configuration files of the namespace.
-
-## Parameters
-
-Namespace：[http://shardingsphere.apache.org/schema/shardingsphere/sql-parser/sql-parser-5.2.1.xsd](http://shardingsphere.apache.org/schema/shardingsphere/sql-parser/sql-parser-5.2.1.xsd)
-
-\<sql-parser:rule />
-
-| *Name*                   | *Type*    | *Description*           |
-|--------------------------|-----------|----------------|
-| id                       | Attribute | Spring Bean Id |
-| sql-comment-parse-enable | Attribute | Whether to parse SQL comments    |
-| parse-tree-cache-ref     | Attribute | Parse tree local cache name      |
-| sql-statement-cache-ref  | Attribute | SQL statement local cache name   |
-
-\<sql-parser:cache-option />
-
-| *Name*                        | *Type* | *Description*               |
-|-----------------------------| ----- |--------------------|
-| id                          | Attribute  | Local cache configuration item name          |
-| initial-capacity            | Attribute  | Initial capacity of local cache           |
-| maximum-size                | Attribute  | Maximum capacity of local cache             |
-
-## Procedure
-1. Set local cache configuration.
-2. Set parser configuration.
-3. Parse SQL with a parsing engine.
-
-## Sample
-```xml
-<sql-parser:rule id="sqlParseRule" sql-comment-parse-enable="true" parse-tree-cache-ref="parseTreeCache" sql-statement-cache-ref="sqlStatementCache" />
-<sql-parser:cache-option id="sqlStatementCache" initial-capacity="1024" maximum-size="1024"/>
-<sql-parser:cache-option id="parseTreeCache" initial-capacity="1024" maximum-size="1024"/>
-```
-
-## Related References
-- [JAVA API: SQL Parser](/en/user-manual/shardingsphere-jdbc/java-api/rules/sql-parser/)
-- [YAML Configuration: SQL Parser](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-parser/)
-- [Spring Boot Starter: SQL Parser](/en/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sql-parser/)

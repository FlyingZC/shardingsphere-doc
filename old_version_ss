commit f32af7e7acfc9a81315fa8bae11727469dfc9584
Author: Liang Zhang <zhangliang@apache.org>
Date:   Tue Dec 6 00:59:57 2022 +0800

    Refactor pipeline's class names (#22682)

diff --git a/docs/document/content/test-manual/scaling-integration-test/_index.cn.md b/docs/document/content/test-manual/scaling-integration-test/_index.cn.md
index 905a3fcd9c8..1fa7ceaca48 100644
--- a/docs/document/content/test-manual/scaling-integration-test/_index.cn.md
+++ b/docs/document/content/test-manual/scaling-integration-test/_index.cn.md
@@ -1,6 +1,6 @@
 +++
 pre = "<b>6.4. </b>"
-title = "Scaling 集成测试"
+title = "Pipeline 集成测试"
 weight = 4
 +++
 
@@ -19,7 +19,7 @@ weight = 4
 
 ## 使用指南
 
-模块路径 `shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling` 。
+模块路径 `shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-pipeline` 。
 
 ### 环境配置
 `${DOCKER-IMAGE}` 表示 docker 镜像名称，如 `mysql:8` 。 `${DATABASE-TYPE}` 表示数据库类型。
@@ -36,7 +36,7 @@ weight = 4
 - `BaseITCase`：提供了通用方法给子类
 - `BaseExtraSQLITCase`：提供了建表、CRUD 语句执行方法
 
-用例示例：MySQLGeneralScalingIT。
+用例示例：MySQLGeneralPipelineE2EIT。
 覆盖的功能点如下：
 - 库级别迁移（所有表）
 - 表级别迁移（任意多个表）
@@ -56,11 +56,11 @@ weight = 4
 要求 ShardingSphere-Proxy 的端口是 3307。
 以 MySQL 为例，`it-env.properties` 可以配置如下：
 ```
-scaling.it.env.type=NATIVE
-scaling.it.native.database=mysql
-scaling.it.native.mysql.username=root
-scaling.it.native.mysql.password=root
-scaling.it.native.mysql.port=3306
+pipeline.it.env.type=NATIVE
+pipeline.it.native.database=mysql
+pipeline.it.native.mysql.username=root
+pipeline.it.native.mysql.password=root
+pipeline.it.native.mysql.port=3306
 ```
 
 找到对应的用例，在 IDE 下使用 Junit 的方式启动即可。
@@ -70,24 +70,24 @@ scaling.it.native.mysql.port=3306
 第一步：打包镜像
 
 ```
-./mvnw -B clean install -am -pl shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling -Pit.env.docker -DskipTests
+./mvnw -B clean install -am -pl shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-pipeline -Pit.env.docker -DskipTests
 ```
 
 运行以上命令会构建出一个用于集成测试的 Docker 镜像 apache/shardingsphere-proxy-test:latest，该镜像设置了远程调试的端口，默认是3308。 如果仅修改了测试代码，可以复用已有的测试镜像，无须重新构建。
 
 Docker 模式下，如果需要对 Docker 镜像启动参数进行调整，可以对修改 ShardingSphereProxyDockerContainer 文件中的相关配置。
 
-ShardingSphere-Proxy 输出的日志带有 :Scaling-Proxy 前缀。
+ShardingSphere-Proxy 输出的日志带有 :Pipeline-Proxy 前缀。
 
 使用 Maven 的方式运行用例。以 MySQL 为例：
 
 ```
-./mvnw -nsu -B install -f shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling/pom.xml -Dscaling.it.env.type=DOCKER -Dscaling.it.docker.mysql.version=${image-name}
+./mvnw -nsu -B install -f shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-pipeline/pom.xml -Dpipeline.it.env.type=DOCKER -Dpipeline.it.docker.mysql.version=${image-name}
 ```
 
 也可以使用 IDE 的方式运行用例。`it-env.properties` 可以配置如下：
 
 ```
-scaling.it.env.type=DOCKER
-scaling.it.docker.mysql.version=mysql:5.7
+pipeline.it.env.type=DOCKER
+pipeline.it.docker.mysql.version=mysql:5.7
 ```
\ No newline at end of file
diff --git a/docs/document/content/test-manual/scaling-integration-test/_index.en.md b/docs/document/content/test-manual/scaling-integration-test/_index.en.md
index b1eb387d6ba..c3b5894a0d9 100644
--- a/docs/document/content/test-manual/scaling-integration-test/_index.en.md
+++ b/docs/document/content/test-manual/scaling-integration-test/_index.en.md
@@ -1,6 +1,6 @@
 +++
 pre = "<b>6.4. </b>"
-title = "Scaling Integration Test"
+title = "Pipeline Integration Test"
 weight = 4
 +++
 
@@ -18,7 +18,7 @@ Currently, you can use MySQL, PostgreSQL and openGuass databases.
 
 ## User guide
 
-Module path: `shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling`.
+Module path: `shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-pipeline`.
 
 ### Environment setup
 
@@ -37,7 +37,7 @@ Currently, all the test cases are directly inherited from `BaseExtraSQLITCase` a
 - `BaseITCase`: Provide generic methods for sub-class.
 - `BaseExtraSQLITCase`: Provide table creation and CRUD statement execution methods.
 
-Test case example: MySQLGeneralScalingIT.
+Test case example: MySQLGeneralPipelineE2EIT.
 Functions included:
 - Database-level migration (all tables).
 - Table-level migration (any number).
@@ -58,11 +58,11 @@ The user starts ShardingSphere-Proxy locally in advance, along with dependent co
 The port required for ShardingSphere-Proxy is 3307.
 Take MySQL as an example, `it-env.properties` can be configured as follows: 
 ```
-scaling.it.env.type=NATIVE
-scaling.it.native.database=mysql
-scaling.it.native.mysql.username=root
-scaling.it.native.mysql.password=root
-scaling.it.native.mysql.port=3306
+pipeline.it.env.type=NATIVE
+pipeline.it.native.database=mysql
+pipeline.it.native.mysql.username=root
+pipeline.it.native.mysql.password=root
+pipeline.it.native.mysql.port=3306
 ```
 
 Find the appropriate test case and start it with Junit under the IDE.
@@ -72,7 +72,7 @@ Find the appropriate test case and start it with Junit under the IDE.
 Step 1: Package mirror.
 
 ```
-./mvnw -B clean install -am -pl shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling -Pit.env.docker -DskipTests
+./mvnw -B clean install -am -pl shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-pipeline -Pit.env.docker -DskipTests
 ```
 
 Running the above command will build a Docker mirror apache/shardingsphere-proxy-test:latest used for integration testing. 
@@ -80,17 +80,17 @@ The mirror sets the port for remote debugging and the default port is 3308. If o
 
 If you need to adjust Docker mirror startup parameters, you can modify the configuration of the ShardingSphereProxyDockerContainer file.
 
-The output log of ShardingSphere-Proxy has the prefix Scaling-Proxy.
+The output log of ShardingSphere-Proxy has the prefix Pipeline-Proxy.
 
 Use Maven to run the test cases. Take MySQL as an example:
 
 ```
-./mvnw -nsu -B install -f shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling/pom.xml -Dscaling.it.env.type=DOCKER -Dscaling.it.docker.mysql.version=${image-name}
+./mvnw -nsu -B install -f shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-pipeline/pom.xml -Dpipeline.it.env.type=DOCKER -Dpipeline.it.docker.mysql.version=${image-name}
 ```
 
 You can also use IDE to run test cases. `it-env.properties` can be configured as follows: 
 
 ```
-scaling.it.env.type=DOCKER
-scaling.it.docker.mysql.version=mysql:5.7
+pipeline.it.env.type=DOCKER
+pipeline.it.docker.mysql.version=mysql:5.7
 ```

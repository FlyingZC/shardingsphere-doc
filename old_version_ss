commit bbf5b0dcd36a3426b015cea50f660f1fa319d7bc
Author: Raigor <raigor.jiang@gmail.com>
Date:   Thu Dec 15 22:22:35 2022 +0800

    Update doc of encrypt DistSQL. (#22891)

diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/alter-encrypt-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/alter-encrypt-rule.cn.md
index 58e6a95da94..5dc1e0a3b91 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/alter-encrypt-rule.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/alter-encrypt-rule.cn.md
@@ -14,11 +14,26 @@ AlterEncryptRule ::=
   'ALTER' 'ENCRYPT' 'RULE' encryptDefinition ( ',' encryptDefinition )*
 
 encryptDefinition ::=
-  tableName '(' 'COLUMNS' '(' columnDefinition ( ',' columnDefinition )*  ')' ',' 'QUERY_WITH_CIPHER_COLUMN' '=' ( 'TRUE' | 'FALSE' ) ')'
+  ruleName '(' 'COLUMNS' '(' columnDefinition ( ',' columnDefinition )*  ')' ( ',' 'QUERY_WITH_CIPHER_COLUMN' '=' ( 'TRUE' | 'FALSE' ) )? ')'
 
 columnDefinition ::=
-    'NAME' '=' columnName ',' ( 'PLAIN' '=' plainColumnName )? 'CIPHER' '=' cipherColumnName ','  'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' 'PROPERTIES' '(' 'key' '=' 'value' ( ',' 'key' '=' 'value' )* ')' )? ')'
-    
+  '(' 'NAME' '=' columnName ( ',' 'PLAIN' '=' plainColumnName )? ',' 'CIPHER' '=' cipherColumnName ( ',' 'ASSISTED_QUERY_COLUMN' '=' assistedQueryColumnName )? ( ',' 'LIKE_QUERY_COLUMN' '=' likeQueryColumnName )? ',' encryptAlgorithmDefinition ( ',' assistedQueryAlgorithmDefinition )? ( ',' likeQueryAlgorithmDefinition )? ')' 
+
+encryptAlgorithmDefinition ::=
+  'ENCRYPT_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+assistedQueryAlgorithmDefinition ::=
+  'ASSISTED_QUERY_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+likeQueryAlgorithmDefinition ::=
+  'LIKE_QUERY_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+propertiesDefinition ::=
+  'PROPERTIES' '(' property ( ',' property )* ')'
+
+property ::=
+  key '=' value
+
 tableName ::=
   identifier
 
@@ -31,16 +46,27 @@ plainColumnName ::=
 cipherColumnName ::=
   identifier
 
+assistedQueryColumnName ::=
+  identifier
+
+likeQueryColumnName ::=
+  identifier
+
 encryptAlgorithmType ::=
   string
+
+key ::=
+  string
+
+value ::=
+  literal
 ```
 
 ### Supplement
 
-- `PLAIN` 指定明文数据列，`CIPHER` 指定密文数据列；
+- `PLAIN` 指定明文数据列，`CIPHER` 指定密文数据列，`ASSISTED_QUERY_COLUMN` 指定辅助查询列，`LIKE_QUERY_COLUMN` 指定模糊查询列；
 - `encryptAlgorithmType` 指定加密算法类型，请参考 [加密算法](/cn/user-manual/common-config/builtin-algorithm/encrypt/)；
-- 重复的 `tableName` 将无法被创建；
-- `queryWithCipherColumn` 支持大写或小写的 true 或 false。
+- 重复的 `ruleName` 将无法被创建。
 
 ### 示例
 
@@ -49,8 +75,8 @@ encryptAlgorithmType ::=
 ```sql
 ALTER ENCRYPT RULE t_encrypt (
 COLUMNS(
-(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc'))),
-(NAME=order_id,CIPHER=order_cipher,TYPE(NAME='MD5'))
+(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc')))),
+(NAME=order_id,CIPHER=order_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='MD5')))
 ), QUERY_WITH_CIPHER_COLUMN=TRUE);
 ```
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/alter-encrypt-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/alter-encrypt-rule.en.md
index d672d8c2c44..4168e5c1c33 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/alter-encrypt-rule.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/alter-encrypt-rule.en.md
@@ -14,11 +14,26 @@ AlterEncryptRule ::=
   'ALTER' 'ENCRYPT' 'RULE' encryptDefinition ( ',' encryptDefinition )*
 
 encryptDefinition ::=
-  tableName '(' 'COLUMNS' '(' columnDefinition ( ',' columnDefinition )*  ')' ',' 'QUERY_WITH_CIPHER_COLUMN' '=' ( 'TRUE' | 'FALSE' ) ')'
+  ruleName '(' 'COLUMNS' '(' columnDefinition ( ',' columnDefinition )*  ')' ( ',' 'QUERY_WITH_CIPHER_COLUMN' '=' ( 'TRUE' | 'FALSE' ) )? ')'
 
 columnDefinition ::=
-    'NAME' '=' columnName ',' ( 'PLAIN' '=' plainColumnName )? 'CIPHER' '=' cipherColumnName ','  'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' 'PROPERTIES' '(' 'key' '=' 'value' ( ',' 'key' '=' 'value' )* ')' )? ')'
-    
+  '(' 'NAME' '=' columnName ( ',' 'PLAIN' '=' plainColumnName )? ',' 'CIPHER' '=' cipherColumnName ( ',' 'ASSISTED_QUERY_COLUMN' '=' assistedQueryColumnName )? ( ',' 'LIKE_QUERY_COLUMN' '=' likeQueryColumnName )? ',' encryptAlgorithmDefinition ( ',' assistedQueryAlgorithmDefinition )? ( ',' likeQueryAlgorithmDefinition )? ')' 
+
+encryptAlgorithmDefinition ::=
+  'ENCRYPT_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+assistedQueryAlgorithmDefinition ::=
+  'ASSISTED_QUERY_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+likeQueryAlgorithmDefinition ::=
+  'LIKE_QUERY_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+propertiesDefinition ::=
+  'PROPERTIES' '(' property ( ',' property )* ')'
+
+property ::=
+  key '=' value
+
 tableName ::=
   identifier
 
@@ -31,15 +46,26 @@ plainColumnName ::=
 cipherColumnName ::=
   identifier
 
+assistedQueryColumnName ::=
+  identifier
+
+likeQueryColumnName ::=
+  identifier
+
 encryptAlgorithmType ::=
   string
+
+key ::=
+  string
+
+value ::=
+  literal
 ```
 
 ### Supplement
 
-- `PLAIN` specifies the plain column, `CIPHER` specifies the cipher column 
-- `encryptAlgorithmType` specifies the encryption algorithm type, please refer to [Encryption Algorithm](/en/user-manual/common-config/builtin-algorithm/encrypt/) 
-- `queryWithCipherColumn` support uppercase or lowercase true or false
+- `PLAIN` specifies the plain column, `CIPHER` specifies the cipher column, `ASSISTED_QUERY_COLUMN` specifies the assisted query column，`LIKE_QUERY_COLUMN` specifies the like query column
+- `encryptAlgorithmType` specifies the encryption algorithm type, please refer to [Encryption Algorithm](/en/user-manual/common-config/builtin-algorithm/encrypt/)
 
 ### Example
 
@@ -48,8 +74,8 @@ encryptAlgorithmType ::=
 ```sql
 ALTER ENCRYPT RULE t_encrypt (
 COLUMNS(
-(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc'))),
-(NAME=order_id,CIPHER=order_cipher,TYPE(NAME='MD5'))
+(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc')))),
+(NAME=order_id,CIPHER=order_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='MD5')))
 ), QUERY_WITH_CIPHER_COLUMN=TRUE);
 ```
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/create-encrypt-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/create-encrypt-rule.cn.md
index c963acf01be..a8f2df9180e 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/create-encrypt-rule.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/create-encrypt-rule.cn.md
@@ -14,10 +14,25 @@ CreateEncryptRule ::=
   'CREATE' 'ENCRYPT' 'RULE' encryptDefinition ( ',' encryptDefinition )*
 
 encryptDefinition ::=
-  tableName '(' 'COLUMNS' '(' columnDefinition ( ',' columnDefinition )*  ')' ',' 'QUERY_WITH_CIPHER_COLUMN' '=' ( 'TRUE' | 'FALSE' ) ')'
+  ruleName '(' 'COLUMNS' '(' columnDefinition ( ',' columnDefinition )*  ')' ( ',' 'QUERY_WITH_CIPHER_COLUMN' '=' ( 'TRUE' | 'FALSE' ) )? ')'
 
 columnDefinition ::=
-    'NAME' '=' columnName ',' ( 'PLAIN' '=' plainColumnName )? 'CIPHER' '=' cipherColumnName ','  'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' 'PROPERTIES' '(' 'key' '=' 'value' ( ',' 'key' '=' 'value' )* ')' )? ')'
+  '(' 'NAME' '=' columnName ( ',' 'PLAIN' '=' plainColumnName )? ',' 'CIPHER' '=' cipherColumnName ( ',' 'ASSISTED_QUERY_COLUMN' '=' assistedQueryColumnName )? ( ',' 'LIKE_QUERY_COLUMN' '=' likeQueryColumnName )? ',' encryptAlgorithmDefinition ( ',' assistedQueryAlgorithmDefinition )? ( ',' likeQueryAlgorithmDefinition )? ')' 
+
+encryptAlgorithmDefinition ::=
+  'ENCRYPT_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+assistedQueryAlgorithmDefinition ::=
+  'ASSISTED_QUERY_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+likeQueryAlgorithmDefinition ::=
+  'LIKE_QUERY_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+propertiesDefinition ::=
+  'PROPERTIES' '(' property ( ',' property )* ')'
+
+property ::=
+  key '=' value
 
 tableName ::=
   identifier
@@ -31,16 +46,27 @@ plainColumnName ::=
 cipherColumnName ::=
   identifier
 
+assistedQueryColumnName ::=
+  identifier
+
+likeQueryColumnName ::=
+  identifier
+
 encryptAlgorithmType ::=
   string
+
+key ::=
+  string
+
+value ::=
+  literal
 ```
 
 ### 补充说明
 
-- `PLAIN` 指定明文数据列，`CIPHER` 指定密文数据列；
+- `PLAIN` 指定明文数据列，`CIPHER` 指定密文数据列，`ASSISTED_QUERY_COLUMN` 指定辅助查询列，`LIKE_QUERY_COLUMN` 指定模糊查询列；
 - `encryptAlgorithmType` 指定加密算法类型，请参考 [加密算法](/cn/user-manual/common-config/builtin-algorithm/encrypt/)；
-- 重复的 `tableName` 将无法被创建；
-- queryWithCipherColumn 支持大写或小写的 `true` 或 `false`。
+- 重复的 `ruleName` 将无法被创建。
 
 ### 示例
 
@@ -49,13 +75,13 @@ encryptAlgorithmType ::=
 ```sql
 CREATE ENCRYPT RULE t_encrypt (
 COLUMNS(
-(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc'))),
-(NAME=order_id, CIPHER =order_cipher,TYPE(NAME='MD5'))
+(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc')))),
+(NAME=order_id, CIPHER =order_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='MD5')))
 ),QUERY_WITH_CIPHER_COLUMN=true),
 t_encrypt_2 (
 COLUMNS(
-(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc'))),
-(NAME=order_id, CIPHER=order_cipher,TYPE(NAME='MD5'))
+(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc')))),
+(NAME=order_id, CIPHER=order_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='MD5')))
 ), QUERY_WITH_CIPHER_COLUMN=FALSE);
 ```
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/create-encrypt-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/create-encrypt-rule.en.md
index 89853e4b75f..f2b346c1ad2 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/create-encrypt-rule.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/encrypt/create-encrypt-rule.en.md
@@ -14,11 +14,26 @@ CreateEncryptRule ::=
   'CREATE' 'ENCRYPT' 'RULE' encryptDefinition ( ',' encryptDefinition )*
 
 encryptDefinition ::=
-  tableName '(' 'COLUMNS' '(' columnDefinition ( ',' columnDefinition )*  ')' ',' 'QUERY_WITH_CIPHER_COLUMN' '=' ( 'TRUE' | 'FALSE' ) ')'
+  ruleName '(' 'COLUMNS' '(' columnDefinition ( ',' columnDefinition )*  ')' ( ',' 'QUERY_WITH_CIPHER_COLUMN' '=' ( 'TRUE' | 'FALSE' ) )? ')'
 
 columnDefinition ::=
-    'NAME' '=' columnName ',' ( 'PLAIN' '=' plainColumnName )? 'CIPHER' '=' cipherColumnName ','  'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' 'PROPERTIES' '(' 'key' '=' 'value' ( ',' 'key' '=' 'value' )* ')' )? ')'
-    
+  '(' 'NAME' '=' columnName ( ',' 'PLAIN' '=' plainColumnName )? ',' 'CIPHER' '=' cipherColumnName ( ',' 'ASSISTED_QUERY_COLUMN' '=' assistedQueryColumnName )? ( ',' 'LIKE_QUERY_COLUMN' '=' likeQueryColumnName )? ',' encryptAlgorithmDefinition ( ',' assistedQueryAlgorithmDefinition )? ( ',' likeQueryAlgorithmDefinition )? ')' 
+
+encryptAlgorithmDefinition ::=
+  'ENCRYPT_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+assistedQueryAlgorithmDefinition ::=
+  'ASSISTED_QUERY_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+likeQueryAlgorithmDefinition ::=
+  'LIKE_QUERY_ALGORITHM' '(' 'TYPE' '(' 'NAME' '=' encryptAlgorithmType ( ',' propertiesDefinition )? ')'
+
+propertiesDefinition ::=
+  'PROPERTIES' '(' property ( ',' property )* ')'
+
+property ::=
+  key '=' value
+
 tableName ::=
   identifier
 
@@ -31,16 +46,27 @@ plainColumnName ::=
 cipherColumnName ::=
   identifier
 
+assistedQueryColumnName ::=
+  identifier
+
+likeQueryColumnName ::=
+  identifier
+
 encryptAlgorithmType ::=
   string
+
+key ::=
+  string
+
+value ::=
+  literal
 ```
 
 ### Supplement
 
-- `PLAIN` specifies the plain column, `CIPHER` specifies the cipher column 
-- `encryptAlgorithmType` specifies the encryption algorithm type, please refer to [Encryption Algorithm](/en/user-manual/common-config/builtin-algorithm/encrypt/) 
-- Duplicate `tableName` will not be created 
-- `queryWithCipherColumn` support uppercase or lowercase true or false
+- `PLAIN` specifies the plain column, `CIPHER` specifies the cipher column, `ASSISTED_QUERY_COLUMN` specifies the assisted query column，`LIKE_QUERY_COLUMN` specifies the like query column
+- `encryptAlgorithmType` specifies the encryption algorithm type, please refer to [Encryption Algorithm](/en/user-manual/common-config/builtin-algorithm/encrypt/)
+- Duplicate `ruleName` will not be created
 
 ### Example
 
@@ -49,13 +75,13 @@ encryptAlgorithmType ::=
 ```sql
 CREATE ENCRYPT RULE t_encrypt (
 COLUMNS(
-(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc'))),
-(NAME=order_id, CIPHER =order_cipher,TYPE(NAME='MD5'))
+(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc')))),
+(NAME=order_id, CIPHER =order_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='MD5')))
 ),QUERY_WITH_CIPHER_COLUMN=true),
 t_encrypt_2 (
 COLUMNS(
-(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc'))),
-(NAME=order_id, CIPHER=order_cipher,TYPE(NAME='MD5'))
+(NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='AES',PROPERTIES('aes-key-value'='123456abc')))),
+(NAME=order_id, CIPHER=order_cipher,ENCRYPT_ALGORITHM(TYPE(NAME='MD5')))
 ), QUERY_WITH_CIPHER_COLUMN=FALSE);
 ```
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/alter-storage-unit.cn.md b/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/alter-storage-unit.cn.md
index d8dcecb11cc..4477564b400 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/alter-storage-unit.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/alter-storage-unit.cn.md
@@ -47,7 +47,7 @@ key ::=
   string
 
 value ::=
-  string
+  literal
 ```
 
 ### 补充说明
@@ -59,8 +59,7 @@ value ::=
 - `storageUnitName` 区分大小写；
 - `storageUnitName` 在当前逻辑库中需要唯一；
 - `storageUnitName` 命名只允许使用字母、数字以及 `_` ，且必须以字母开头；
-- `poolProperty` 用于自定义连接池参数，`key` 必须和连接池参数名一致，`value` 支持 int 和 String 类型；
-- 当 `password` 包含特殊字符时，建议使用 string 形式；例如 `password@123`的 string 形式为 `"password@123"`。
+- `poolProperty` 用于自定义连接池参数，`key` 必须和连接池参数名一致。
 
 ### 示例
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/alter-storage-unit.en.md b/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/alter-storage-unit.en.md
index 80365637c0b..962b3122566 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/alter-storage-unit.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/alter-storage-unit.en.md
@@ -47,7 +47,7 @@ key ::=
   string
 
 value ::=
-  string
+  literal
 ```
 
 ### Supplement
@@ -61,9 +61,7 @@ value ::=
 - `storageUnitName` needs to be unique within the current database;
 - `storageUnitName` name only allows letters, numbers and `_`, and must start with a letter;
 - `poolProperty` is used to customize connection pool parameters, `key` must be the same as the connection pool
-  parameter name, `value` supports int and String types;
-- When `password` contains special characters, it is recommended to use the string form; for example, the string form
-  of `password@123` is `"password@123"`.
+  parameter name.
 
 ### Example
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/register-storage-unit.cn.md b/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/register-storage-unit.cn.md
index bb59802de61..dbd1e7db68c 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/register-storage-unit.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/register-storage-unit.cn.md
@@ -47,7 +47,7 @@ key ::=
   string
 
 value ::=
-  string
+  literal
 ```
 
 ### 特别说明
@@ -57,8 +57,7 @@ value ::=
 - `storageUnitName` 区分大小写；
 - `storageUnitName` 在当前逻辑库中需要唯一；
 - `storageUnitName` 命名只允许使用字母、数字以及 `_` ，且必须以字母开头；
-- `poolProperty` 用于自定义连接池参数，`key` 必须和连接池参数名一致，`value` 支持 int 和 String 类型；
-- 当 `password` 包含特殊字符时，建议使用 string 形式；例如 `password@123`的 string 形式为 `"password@123"`。
+- `poolProperty` 用于自定义连接池参数，`key` 必须和连接池参数名一致。
 
 ### 示例
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/register-storage-unit.en.md b/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/register-storage-unit.en.md
index 13d7606e74c..c02b93049a8 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/register-storage-unit.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/storage-unit-definition/register-storage-unit.en.md
@@ -47,7 +47,7 @@ key ::=
   string
 
 value ::=
-  string
+  literal
 ```
 
 ### Supplement
@@ -59,9 +59,7 @@ value ::=
 - `storageUnitName` needs to be unique within the current database;
 - `storageUnitName` name only allows letters, numbers and `_`, and must start with a letter;
 - `poolProperty` is used to customize connection pool parameters, `key` must be the same as the connection pool
-  parameter name, `value` supports int and String types;
-- When `password` contains special characters, it is recommended to use the string form; For example, the string form
-  of `password@123` is `"password@123"`.
+  parameter name.
 
 ### Example
 

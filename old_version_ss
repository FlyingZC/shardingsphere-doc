commit 8397b02a143f03544057e2553e2557963214ca49
Author: Liang Zhang <zhangliang@apache.org>
Date:   Sat Dec 3 23:57:10 2022 +0800

    Refactor test module as it and e2e sub modules (#22630)
    
    * Refactor test module as it and e2e sub modules

diff --git a/docs/blog/content/material/Jan_28_Blog_X_How_to Develop_Your_Distributed_SQL_Statement_in_Apache_ShardingSphere.en.md b/docs/blog/content/material/Jan_28_Blog_X_How_to Develop_Your_Distributed_SQL_Statement_in_Apache_ShardingSphere.en.md
index 38362a941eb..59b45b1565d 100644
--- a/docs/blog/content/material/Jan_28_Blog_X_How_to Develop_Your_Distributed_SQL_Statement_in_Apache_ShardingSphere.en.md	
+++ b/docs/blog/content/material/Jan_28_Blog_X_How_to Develop_Your_Distributed_SQL_Statement_in_Apache_ShardingSphere.en.md	
@@ -119,7 +119,7 @@ When you complete the basic feature development, to ensure its continuous usabil
 
 ![](https://shardingsphere.apache.org/blog/img/DistSQL_Statement_Development_img_11.png)
 
-In addition to the unit test, you are also required to complete a parsing test for the grammar definition in `shardingsphere-test-parser`. The purpose is to parse the input DistSQL into a `DistSQLStatement` and then compare the parsed statement with your expected `TestCase` object. The steps are as follows:
+In addition to the unit test, you are also required to complete a parsing test for the grammar definition in `shardingsphere-test-it-parser`. The purpose is to parse the input DistSQL into a `DistSQLStatement` and then compare the parsed statement with your expected `TestCase` object. The steps are as follows:
 
 a. Add the SQL you want to test in `src/main/resources/sql/supported/rql/show.xml`;
 
diff --git a/docs/document/content/test-manual/integration-test/_index.cn.md b/docs/document/content/test-manual/integration-test/_index.cn.md
index cf042bc866f..5c8ee8e84c0 100644
--- a/docs/document/content/test-manual/integration-test/_index.cn.md
+++ b/docs/document/content/test-manual/integration-test/_index.cn.md
@@ -49,7 +49,7 @@ weight = 1
 
 ## 使用指南
 
-模块路径：`shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite`
+模块路径：`shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-test-suite`
 
 ### 测试用例配置
 
@@ -112,7 +112,7 @@ SQL 用例在 `resources/cases/${SQL-TYPE}/${SQL-TYPE}-integration-test-cases.xm
 
   - `proxy/conf/config-${SCENARIO-TYPE}.yaml`: 规则配置。
 
-**Docker 环境配置为 ShardingSphere-Proxy 提供了远程调试端口，可以在 `shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-fixture/src/test/assembly/bin/start.sh` 文件的 `JAVA_OPTS` 中找到第 2 个暴露的端口用于远程调试。**
+**Docker 环境配置为 ShardingSphere-Proxy 提供了远程调试端口，可以在 `shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-fixture/src/test/assembly/bin/start.sh` 文件的 `JAVA_OPTS` 中找到第 2 个暴露的端口用于远程调试。**
 
 ### 运行测试引擎
 
@@ -156,14 +156,14 @@ it.cluster.databases=H2,MySQL,Oracle,SQLServer,PostgreSQL
 #### 运行 Docker 模式
 
 ```bash
-./mvnw -B clean install -f shardingsphere-test/shardingsphere-integration-test/pom.xml -Pit.env.docker -Dit.cluster.adapters=proxy,jdbc -Dit.scenarios=${scenario_name_1,scenario_name_2,scenario_name_n} -Dit.cluster.databases=MySQL
+./mvnw -B clean install -f shardingsphere-test/shardingsphere-test-e2e/pom.xml -Pit.env.docker -Dit.cluster.adapters=proxy,jdbc -Dit.scenarios=${scenario_name_1,scenario_name_2,scenario_name_n} -Dit.cluster.databases=MySQL
 ```
 
 运行以上命令会构建出一个用于集成测试的 Docker 镜像 `apache/shardingsphere-proxy-test:latest`。
 如果仅修改了测试代码，可以复用已有的测试镜像，无须重新构建。使用以下命令可以跳过镜像构建，直接运行集成测试：
 
 ```bash
-./mvnw -B clean install -f shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/pom.xml -Pit.env.docker -Dit.cluster.adapters=proxy,jdbc -Dit.scenarios=${scenario_name_1,scenario_name_2,scenario_name_n} -Dit.cluster.databases=MySQL
+./mvnw -B clean install -f shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-test-suite/pom.xml -Pit.env.docker -Dit.cluster.adapters=proxy,jdbc -Dit.scenarios=${scenario_name_1,scenario_name_2,scenario_name_n} -Dit.cluster.databases=MySQL
 ```
 
 #### 远程 debug Docker 容器中的 Proxy 代码
diff --git a/docs/document/content/test-manual/integration-test/_index.en.md b/docs/document/content/test-manual/integration-test/_index.en.md
index c8775b37fec..d932b852c2a 100644
--- a/docs/document/content/test-manual/integration-test/_index.en.md
+++ b/docs/document/content/test-manual/integration-test/_index.en.md
@@ -43,6 +43,7 @@ Each SQL generates a test report in the combination of `database type * access p
   - Database types: H2, MySQL, PostgreSQL, SQLServer, and Oracle;
   - Access port types: ShardingSphere-JDBC and ShardingSphere-Proxy;
   - SQL execution modes: Statement and PreparedStatement;
+    
   - JDBC execution modes: execute and executeQuery/executeUpdate;
   - Scenarios: database shards, table shards, read/write splitting and sharding + read/write splitting
 
@@ -50,7 +51,7 @@ Therefore, one SQL will drive `Database type (5) * Access port type (2) * SQL ex
 
 ## User Guide
 
-Module path：`shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite`
+Module path：`shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-test-suite`
 
 ### Test case configuration
 
@@ -156,13 +157,13 @@ it.cluster.databases=H2,MySQL,Oracle,SQLServer,PostgreSQL
 #### Run Docker mode
 
 ```bash
-./mvnw -B clean install -f shardingsphere-test/shardingsphere-integration-test/pom.xml -Pit.env.docker -Dit.cluster.adapters=proxy,jdbc -Dit.scenarios=${scenario_name_1,scenario_name_2,scenario_name_n} -Dit.cluster.databases=MySQL
+./mvnw -B clean install -f shardingsphere-test/shardingsphere-test-e2e/pom.xml -Pit.env.docker -Dit.cluster.adapters=proxy,jdbc -Dit.scenarios=${scenario_name_1,scenario_name_2,scenario_name_n} -Dit.cluster.databases=MySQL
 ```
 Run the above command to build a Docker mirror `apache/shardingsphere-proxy-test:latest` used for integration testing.
 If you only modify the test code, you can reuse the existing test mirror without rebuilding it. Skip the mirror building and run the integration testing directly with the following command:
 
 ```bash
-./mvnw -B clean install -f shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-suite/pom.xml -Pit.env.docker -Dit.cluster.adapters=proxy,jdbc -Dit.scenarios=${scenario_name_1,scenario_name_2,scenario_name_n} -Dit.cluster.databases=MySQL
+./mvnw -B clean install -f shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-test-suite/pom.xml -Pit.env.docker -Dit.cluster.adapters=proxy,jdbc -Dit.scenarios=${scenario_name_1,scenario_name_2,scenario_name_n} -Dit.cluster.databases=MySQL
 ```
 
 #### Notice
diff --git a/docs/document/content/test-manual/scaling-integration-test/_index.cn.md b/docs/document/content/test-manual/scaling-integration-test/_index.cn.md
index e78ec271788..905a3fcd9c8 100644
--- a/docs/document/content/test-manual/scaling-integration-test/_index.cn.md
+++ b/docs/document/content/test-manual/scaling-integration-test/_index.cn.md
@@ -19,7 +19,7 @@ weight = 4
 
 ## 使用指南
 
-模块路径 `shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-scaling` 。
+模块路径 `shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling` 。
 
 ### 环境配置
 `${DOCKER-IMAGE}` 表示 docker 镜像名称，如 `mysql:8` 。 `${DATABASE-TYPE}` 表示数据库类型。
@@ -70,7 +70,7 @@ scaling.it.native.mysql.port=3306
 第一步：打包镜像
 
 ```
-./mvnw -B clean install -am -pl shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-scaling -Pit.env.docker -DskipTests
+./mvnw -B clean install -am -pl shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling -Pit.env.docker -DskipTests
 ```
 
 运行以上命令会构建出一个用于集成测试的 Docker 镜像 apache/shardingsphere-proxy-test:latest，该镜像设置了远程调试的端口，默认是3308。 如果仅修改了测试代码，可以复用已有的测试镜像，无须重新构建。
@@ -82,7 +82,7 @@ ShardingSphere-Proxy 输出的日志带有 :Scaling-Proxy 前缀。
 使用 Maven 的方式运行用例。以 MySQL 为例：
 
 ```
-./mvnw -nsu -B install -f shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-scaling/pom.xml -Dscaling.it.env.type=DOCKER -Dscaling.it.docker.mysql.version=${image-name}
+./mvnw -nsu -B install -f shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling/pom.xml -Dscaling.it.env.type=DOCKER -Dscaling.it.docker.mysql.version=${image-name}
 ```
 
 也可以使用 IDE 的方式运行用例。`it-env.properties` 可以配置如下：
diff --git a/docs/document/content/test-manual/scaling-integration-test/_index.en.md b/docs/document/content/test-manual/scaling-integration-test/_index.en.md
index 22c3c94765a..b1eb387d6ba 100644
--- a/docs/document/content/test-manual/scaling-integration-test/_index.en.md
+++ b/docs/document/content/test-manual/scaling-integration-test/_index.en.md
@@ -18,7 +18,7 @@ Currently, you can use MySQL, PostgreSQL and openGuass databases.
 
 ## User guide
 
-Module path: `shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-scaling`.
+Module path: `shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling`.
 
 ### Environment setup
 
@@ -72,7 +72,7 @@ Find the appropriate test case and start it with Junit under the IDE.
 Step 1: Package mirror.
 
 ```
-./mvnw -B clean install -am -pl shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-scaling -Pit.env.docker -DskipTests
+./mvnw -B clean install -am -pl shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling -Pit.env.docker -DskipTests
 ```
 
 Running the above command will build a Docker mirror apache/shardingsphere-proxy-test:latest used for integration testing. 
@@ -85,7 +85,7 @@ The output log of ShardingSphere-Proxy has the prefix Scaling-Proxy.
 Use Maven to run the test cases. Take MySQL as an example:
 
 ```
-./mvnw -nsu -B install -f shardingsphere-test/shardingsphere-integration-test/shardingsphere-integration-test-scaling/pom.xml -Dscaling.it.env.type=DOCKER -Dscaling.it.docker.mysql.version=${image-name}
+./mvnw -nsu -B install -f shardingsphere-test/shardingsphere-test-e2e/shardingsphere-test-e2e-scaling/pom.xml -Dscaling.it.env.type=DOCKER -Dscaling.it.docker.mysql.version=${image-name}
 ```
 
 You can also use IDE to run test cases. `it-env.properties` can be configured as follows: 

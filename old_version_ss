commit 4f5d6bf4fb2b2356e85fe9545b5d6c68fe7a1449
Author: Raigor <raigor.jiang@gmail.com>
Date:   Fri Dec 2 16:07:11 2022 +0800

    Update documents for sharding table reference rule. (#22587)

diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-reference-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-reference-rule.cn.md
index e4ea62cc1b5..eef253e3926 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-reference-rule.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-reference-rule.cn.md
@@ -5,7 +5,7 @@ weight = 14
 
 ## 描述
 
-`ALTER SHARDING TABLE REFERENCE RULE` 语法用于修改关联规则
+`ALTER SHARDING TABLE REFERENCE RULE` 语法用于修改分片表关联关系
 
 ### 语法定义
 
@@ -14,7 +14,7 @@ AlterShardingTableReferenceRule ::=
   'ALTER' 'SHARDING' 'TABLE' 'REFERENCE' 'RULE'  referenceRelationshipDefinition  (',' referenceRelationshipDefinition )*
 
 referenceRelationshipDefinition ::=
-  '(' tableName (',' tableName)* ')'
+  ruleName '(' tableName (',' tableName)* ')'
 
 tableName ::=
   identifier
@@ -22,22 +22,22 @@ tableName ::=
 
 ### 补充说明
 
-- 一个分片表只能具有一个关联关系；
-- 添加关联关系的分片表需要使用相同的存储单元，并且分片节点个数相同。例如 `su_${0..1}.t_order_${0..1}` 与 `su_${0..1}.t_order_item_${0..1}`；
-- 添加关联关系的分片表需要对分片键使用相同的分片算法。例如 `t_order_${order_id % 2}` 与 `t_order_item_${order_item_id % 2}`；
+- 一张分片表只能具有一个关联关系；
+- 关联的分片表应分布在相同的存储单元，并且分片个数相同。例如 `ds_${0..1}.t_order_${0..1}` 与 `ds_${0..1}.t_order_item_${0..1}`；
+- 关联的分片表应使用一致的分片算法。例如 `t_order_${order_id % 2}` 与 `t_order_item_${order_item_id % 2}`；
 
 ### 示例
 
-#### 1.创建关联关系
+#### 1.修改关联关系
 
 ```sql
-ALTER SHARDING TABLE REFERENCE RULE (t_order,t_order_item);
+ALTER SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item);
 ```
 
-#### 2.创建多个关联关系
+#### 2.修改多个关联关系
 
 ```sql
-ALTER SHARDING TABLE REFERENCE RULE (t_order,t_order_item),(t_product,t_product_item);
+ALTER SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item), ref_1 (t_product,t_product_item);
 ```
 
 ### 保留字
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-reference-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-reference-rule.en.md
index 78bbdc8d896..cb9cc0cff65 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-reference-rule.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-reference-rule.en.md
@@ -5,7 +5,7 @@ weight = 14
 
 ## Description
 
-The `ALTER SHARDING TABLE REFERENCE RULE` syntax is used to alter reference table rules. 
+The `ALTER SHARDING TABLE REFERENCE RULE` syntax is used to alter sharding table reference rule. 
 
 ### Syntax
 
@@ -14,7 +14,7 @@ AlterShardingTableReferenceRule ::=
   'ALTER' 'SHARDING' 'TABLE' 'REFERENCE' 'RULE'  referenceRelationshipDefinition  (',' referenceRelationshipDefinition )*
 
 referenceRelationshipDefinition ::=
-  '(' tableName (',' tableName)* ')'
+  ruleName '(' tableName (',' tableName)* ')'
 
 tableName ::=
   identifier
@@ -22,24 +22,23 @@ tableName ::=
 
 ### Supplement
 
-- A sharding table can only have one reference relationships;
-- The sharding table for creating reference relationships needs to use the same storage unit and the same actual tables. For
-  example `su_${0..1}.t_order_${0..1}` 与 `su_${0..1}.t_order_item_${0..1}`;
-- The sharding table for creating reference relationships needs to use the same sharding algorithm for the sharding
-  column. For example `t_order_{order_id % 2}` and `t_order_item_{order_item_id % 2}`;
+- A sharding table can only be associated with one sharding table reference rule;
+- The referenced sharding tables should be sharded in the same storage units and have the same number of sharding nodes. For
+  example `ds_${0..1}.t_order_${0..1}` and `ds_${0..1}.t_order_item_${0..1}`;
+- The referenced sharding tables should use consistent sharding algorithms. For example `t_order_{order_id % 2}` and `t_order_item_{order_item_id % 2}`;
 
 ### Example
 
-#### 1. Alter a reference table rule
+#### 1. Alter a sharding table reference rule
 
 ```sql
-ALTER SHARDING TABLE REFERENCE RULE (t_order,t_order_item);
+ALTER SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item);
 ```
 
-#### 2. Alter multiple reference table rules
+#### 2. Alter multiple sharding table reference rules
 
 ```sql
-ALTER SHARDING TABLE REFERENCE RULE (t_order,t_order_item),(t_product,t_product_item);
+ALTER SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item), ref_1 (t_product,t_product_item);
 ```
 
 ### Reserved word
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-reference-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-reference-rule.cn.md
index f8225cf54fe..b7daaa2d995 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-reference-rule.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-reference-rule.cn.md
@@ -5,7 +5,7 @@ weight = 13
 
 ## 描述
 
-`CREATE SHARDING TABLE REFERENCE RULE` 语法用于为具有分片规则的表（分片表）添加关联关系并创建关联规则
+`CREATE SHARDING TABLE REFERENCE RULE` 语法用于为分片表创建关联规则
 
 ### 语法定义
 
@@ -14,7 +14,7 @@ CreateShardingTableReferenceRule ::=
   'CREATE' 'SHARDING' 'TABLE' 'REFERENCE' 'RULE'  referenceRelationshipDefinition  (',' referenceRelationshipDefinition )*
 
 referenceRelationshipDefinition ::=
-  '(' tableName (',' tableName)* ')'
+   ruleName '(' tableName (',' tableName)* ')'
 
 tableName ::=
   identifier
@@ -22,27 +22,25 @@ tableName ::=
 
 ### 补充说明
 
-- 只有分片表才能创建关联关系；
-- 一个分片表只能具有一个关联关系；
-- 添加关联关系的分片表需要使用相同的存储单元，并且分片节点个数相同。例如 `su_${0..1}.t_order_${0..1}` 与 `su_${0..1}.t_order_item_${0..1}`；
-- 添加关联关系的分片表需要对分片键使用相同的分片算法。例如 `t_order_${order_id % 2}` 与 `t_order_item_${order_item_id % 2}`；
-- 只能存在一个关联规则，但可包含多个关联关系，因此无法重复执行 `CREATE SHARDING TABLE REFERENCE RULE`。
-  当关联规则已经存在但还需要添加关联关系时，需要使用 `ALTER SHARDING TABLE REFERENCE RULE` 来修改关联规则。
+- 只能为分片表创建关联关系；
+- 一张分片表只能具有一个关联关系；
+- 关联的分片表应分布在相同的存储单元，并且分片个数相同。例如 `ds_${0..1}.t_order_${0..1}` 与 `ds_${0..1}.t_order_item_${0..1}`；
+- 关联的分片表应使用一致的分片算法。例如 `t_order_${order_id % 2}` 与 `t_order_item_${order_item_id % 2}`；
 
 ### 示例
 
 #### 1.创建关联关系
 
 ```sql
--- 创建关联关系之前需要先创建分片表 t_order,t_order_item
-CREATE SHARDING TABLE REFERENCE RULE (t_order,t_order_item);
+-- 创建关联关系之前需要先创建分片规则 t_order,t_order_item
+CREATE SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item);
 ```
 
 #### 2.创建多个关联关系
 
 ```sql
--- 创建关联关系之前需要先创建分片表 t_order,t_order_item,t_product,t_product_item
-CREATE SHARDING TABLE REFERENCE RULE (t_order,t_order_item),(t_product,t_product_item);
+-- 创建关联关系之前需要先创建分片规则 t_order,t_order_item,t_product,t_product_item
+CREATE SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item), ref_1 (t_product,t_product_item);
 ```
 
 ### 保留字
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-reference-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-reference-rule.en.md
index 2ca3ec089f9..22dda92bf5f 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-reference-rule.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-reference-rule.en.md
@@ -5,8 +5,7 @@ weight = 13
 
 ## Description
 
-The `CREATE SHARDING TABLE REFERENCE RULE` syntax is used to add reference relationships and create reference table rules for
-tables with sharding table rules
+The `CREATE SHARDING TABLE REFERENCE RULE` syntax is used to create reference rule for sharding tables
 
 ### Syntax
 
@@ -15,7 +14,7 @@ CreateShardingTableReferenceRule ::=
   'CREATE' 'SHARDING' 'TABLE' 'REFERENCE' 'RULE'  referenceRelationshipDefinition  (',' referenceRelationshipDefinition )*
 
 referenceRelationshipDefinition ::=
-  '(' tableName (',' tableName)* ')'
+   ruleName '(' tableName (',' tableName)* ')'
 
 tableName ::=
   identifier
@@ -23,31 +22,26 @@ tableName ::=
 
 ### Supplement
 
-- Creating reference relationships rules can only use sharding tables;
-- A sharding table can only have one reference relationships;
-- The sharding table for creating reference relationships needs to use the same storage unit and the same actual tables. For
-  example `su_${0..1}.t_order_${0..1}` 与 `su_${0..1}.t_order_item_${0..1}`;
-- The sharding table for creating reference relationships needs to use the same sharding algorithm for the sharding
-  column. For example `t_order_{order_id % 2}` and `t_order_item_{order_item_id % 2}`;
-- Only one reference rule can exist, but can contain multiple reference relationships, so can not
-  execute `CREATE SHARDING TABLE REFERENCE RULE` more than one time. When a reference table rule already exists but a
-  reference relationship needs to be added, you need to use `ALTER SHARDING TABLE REFERENCE RULE` to modify the reference
-  table.
+- Sharding table reference rule can only be created for sharding tables;
+- A sharding table can only be associated with one sharding table reference rule;
+- The referenced sharding tables should be sharded in the same storage units and have the same number of sharding nodes. For
+  example `ds_${0..1}.t_order_${0..1}` and `ds_${0..1}.t_order_item_${0..1}`;
+- The referenced sharding tables should use consistent sharding algorithms. For example `t_order_{order_id % 2}` and `t_order_item_{order_item_id % 2}`;
 
 ### Example
 
-#### 1.Create a reference table rule
+#### 1.Create a sharding table reference rule
 
 ```sql
--- Before creating a reference table rule, you need to create sharding table rules t_order, t_order_item
-CREATE SHARDING TABLE REFERENCE RULE (t_order,t_order_item);
+-- Before creating a sharding table reference rule, you need to create sharding table rules t_order, t_order_item
+CREATE SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item);
 ```
 
-#### 2.Create multiple reference table rules
+#### 2.Create multiple sharding table reference rules
 
 ```sql
--- Before creating reference table rules, you need to create sharding table rules t_order, t_order_item, t_product, t_product_item
-CREATE SHARDING TABLE REFERENCE RULE (t_order,t_order_item),(t_product,t_product_item);
+-- Before creating sharding table reference rules, you need to create sharding table rules t_order, t_order_item, t_product, t_product_item
+CREATE SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item), ref_1 (t_product,t_product_item);
 ```
 
 ### Reserved word
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/drop-sharding-table-reference-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/drop-sharding-table-reference-rule.cn.md
index ea3dfab6fbd..675a339f842 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/drop-sharding-table-reference-rule.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/drop-sharding-table-reference-rule.cn.md
@@ -11,28 +11,24 @@ weight = 15
 
 ```sql
 DropShardingTableReferenceRule ::=
-  'DROP' 'SHARDING' 'TABLE' 'REFERENCE' 'RULE'  (tableName (',' tableName)* )?
+  'DROP' 'SHARDING' 'TABLE' 'REFERENCE' 'RULE'  ruleName (',' ruleName)*
 
-tableName ::=
+ruleName ::=
   identifier
 ```
 
-### 补充说明
-
-- 未指定 `SHARDING TABLE REFERENCE RULE` 时，默认删除所有关联规则。
-
 ### 示例
 
-- 删除指定关联规则
+- 删除单个关联规则
  
 ```sql
-DROP SHARDING TABLE REFERENCE RULE (t_order, t_order_item);
+DROP SHARDING TABLE REFERENCE RULE ref_0;
 ```
 
-- 删除全部关联规则
+- 删除多个关联规则
 
 ```sql
-DROP SHARDING TABLE REFERENCE RULE;
+DROP SHARDING TABLE REFERENCE RULE ref_0, ref_1;
 ```
 
 ### 保留字
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/drop-sharding-table-reference-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/drop-sharding-table-reference-rule.en.md
index d49067e2c4a..acc4c1d6be3 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/drop-sharding-table-reference-rule.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/drop-sharding-table-reference-rule.en.md
@@ -11,28 +11,24 @@ The `DROP SHARDING TABLE REFERENCE RULE` syntax is used to drop specified shardi
 
 ```sql
 DropShardingTableReferenceRule ::=
-  'DROP' 'SHARDING' 'TABLE' 'REFERENCE' 'RULE'  (tableName (',' tableName)* )?
+  'DROP' 'SHARDING' 'TABLE' 'REFERENCE' 'RULE'  ruleName (',' ruleName)*
 
-tableName ::=
+ruleName ::=
   identifier
 ```
 
-### Supplement
-
-- When `SHARDING TABLE REFERENCE RULE` is not specified, default is drop all sharding table reference rules.
-
 ### Example
 
-- Drop specified sharding table reference rule
+- Drop a specified sharding table reference rule
 
 ```sql
-DROP SHARDING TABLE REFERENCE RULE (t_order, t_order_item);
+DROP SHARDING TABLE REFERENCE RULE ref_0;
 ```
 
-- Drop all sharding table reference rule
+- Drop multiple sharding table reference rules
 
 ```sql
-DROP SHARDING TABLE REFERENCE RULE;
+DROP SHARDING TABLE REFERENCE RULE ref_0, ref_1;
 ```
 
 ### Reserved word
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding.cn.md
index f2aba23def1..129ce72563c 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding.cn.md
@@ -126,12 +126,12 @@ CREATE SHARDING TABLE REFERENCE RULE tableReferenceRuleDefinition [, tableRefere
 
 ALTER SHARDING TABLE REFERENCE RULE tableReferenceRuleDefinition [, tableReferenceRuleDefinition] ...
 
-DROP SHARDING TABLE REFERENCE RULE tableReferenceRuleDefinition [, tableReferenceRuleDefinition] ...
+DROP SHARDING TABLE REFERENCE RULE ifExists? ruleName [, ruleName] ...
 
 tableReferenceRuleDefinition:
-    (tableName [, tableName] ... )
+    ruleName (tableName [, tableName] ... )
 ```
-- `ALTER` 会使用新的配置覆盖数据库内的绑定表配置
+- 一张分片表只能关联一个 sharding table reference rule
 
 ### Broadcast Table Rule
 
@@ -223,13 +223,11 @@ DROP DEFAULT SHARDING DATABASE STRATEGY;
 ### Sharding Table Reference Rule
 
 ```sql
-CREATE SHARDING TABLE REFERENCE RULE (t_order,t_order_item),(t_1,t_2);
+CREATE SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item), ref_1 (t_1,t_2);
 
-ALTER SHARDING TABLE REFERENCE RULE (t_order,t_order_item);
+ALTER SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item,t_user);
 
-DROP SHARDING TABLE REFERENCE RULE;
-
-DROP SHARDING TABLE REFERENCE RULE (t_order,t_order_item);
+DROP SHARDING TABLE REFERENCE RULE ref_0, ref_1;
 ```
 
 ### Broadcast Table Rule
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding.en.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding.en.md
index 49d259a6a2e..0e9dd34fc5f 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding.en.md
@@ -127,12 +127,12 @@ CREATE SHARDING TABLE REFERENCE RULE tableReferenceRuleDefinition [, tableRefere
 
 ALTER SHARDING TABLE REFERENCE RULE tableReferenceRuleDefinition [, tableReferenceRuleDefinition] ...
 
-DROP SHARDING TABLE REFERENCE RULE tableReferenceRuleDefinition [, tableReferenceRuleDefinition] ...
+DROP SHARDING TABLE REFERENCE RULE ifExists? ruleName [, ruleName] ...
 
 tableReferenceRuleDefinition:
-    (tableName [, tableName] ... )
+    ruleName (tableName [, tableName] ... )
 ```
-- `ALTER` will overwrite the binding table configuration in the database with the new configuration
+- A sharding table can only be associated with one sharding table reference rule
 
 ### Broadcast Table Rule
 
@@ -224,13 +224,11 @@ DROP DEFAULT SHARDING DATABASE STRATEGY;
 ### Sharding Table Reference Rule
 
 ```sql
-CREATE SHARDING TABLE REFERENCE RULE (t_order,t_order_item),(t_1,t_2);
+CREATE SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item), ref_1 (t_1,t_2);
 
-ALTER SHARDING TABLE REFERENCE RULE (t_order,t_order_item);
+ALTER SHARDING TABLE REFERENCE RULE ref_0 (t_order,t_order_item,t_user);
 
-DROP SHARDING TABLE REFERENCE RULE;
-
-DROP SHARDING TABLE REFERENCE RULE (t_order,t_order_item);
+DROP SHARDING TABLE REFERENCE RULE ref_0, ref_1;
 ```
 
 ### Broadcast Table Rule
